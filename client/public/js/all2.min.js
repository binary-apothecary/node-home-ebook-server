!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t="length"in e&&e.length,n=Z.type(e);return"function"===n||Z.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function r(e,t,n){if(Z.isFunction(t))return Z.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return Z.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(ae.test(t))return Z.filter(t,e,n);t=Z.filter(t,e)}return Z.grep(e,function(e){return U.call(t,e)>=0!==n})}function i(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t=he[e]={};return Z.each(e.match(de)||[],function(e,n){t[n]=!0}),t}function s(){J.removeEventListener("DOMContentLoaded",s,!1),e.removeEventListener("load",s,!1),Z.ready()}function a(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=Z.expando+a.uid++}function u(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(be,"-$1").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:xe.test(n)?Z.parseJSON(n):n}catch(i){}ye.set(e,t,n)}else n=void 0;return n}function l(){return!0}function c(){return!1}function f(){try{return J.activeElement}catch(e){}}function p(e,t){return Z.nodeName(e,"table")&&Z.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function d(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function h(e){var t=Pe.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function g(e,t){for(var n=0,r=e.length;r>n;n++)ve.set(e[n],"globalEval",!t||ve.get(t[n],"globalEval"))}function m(e,t){var n,r,i,o,s,a,u,l;if(1===t.nodeType){if(ve.hasData(e)&&(o=ve.access(e),s=ve.set(t,o),l=o.events)){delete s.handle,s.events={};for(i in l)for(n=0,r=l[i].length;r>n;n++)Z.event.add(t,i,l[i][n])}ye.hasData(e)&&(a=ye.access(e),u=Z.extend({},a),ye.set(t,u))}}function v(e,t){var n=e.getElementsByTagName?e.getElementsByTagName(t||"*"):e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&Z.nodeName(e,t)?Z.merge([e],n):n}function y(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ne.test(e.type)?t.checked=e.checked:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}function x(t,n){var r,i=Z(n.createElement(t)).appendTo(n.body),o=e.getDefaultComputedStyle&&(r=e.getDefaultComputedStyle(i[0]))?r.display:Z.css(i[0],"display");return i.detach(),o}function b(e){var t=J,n=$e[e];return n||(n=x(e,t),"none"!==n&&n||(We=(We||Z("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=We[0].contentDocument,t.write(),t.close(),n=x(e,t),We.detach()),$e[e]=n),n}function w(e,t,n){var r,i,o,s,a=e.style;return n=n||_e(e),n&&(s=n.getPropertyValue(t)||n[t]),n&&(""!==s||Z.contains(e.ownerDocument,e)||(s=Z.style(e,t)),Be.test(s)&&Ie.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function T(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function C(e,t){if(t in e)return t;for(var n=t[0].toUpperCase()+t.slice(1),r=t,i=Ge.length;i--;)if(t=Ge[i]+n,t in e)return t;return r}function N(e,t,n){var r=Xe.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function k(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=Z.css(e,n+Te[o],!0,i)),r?("content"===n&&(s-=Z.css(e,"padding"+Te[o],!0,i)),"margin"!==n&&(s-=Z.css(e,"border"+Te[o]+"Width",!0,i))):(s+=Z.css(e,"padding"+Te[o],!0,i),"padding"!==n&&(s+=Z.css(e,"border"+Te[o]+"Width",!0,i)));return s}function E(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=_e(e),s="border-box"===Z.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=w(e,t,o),(0>i||null==i)&&(i=e.style[t]),Be.test(i))return i;r=s&&(Q.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+k(e,t,n||(s?"border":"content"),r,o)+"px"}function S(e,t){for(var n,r,i,o=[],s=0,a=e.length;a>s;s++)r=e[s],r.style&&(o[s]=ve.get(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&Ce(r)&&(o[s]=ve.access(r,"olddisplay",b(r.nodeName)))):(i=Ce(r),"none"===n&&i||ve.set(r,"olddisplay",i?n:Z.css(r,"display"))));for(s=0;a>s;s++)r=e[s],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}function D(e,t,n,r,i){return new D.prototype.init(e,t,n,r,i)}function j(){return setTimeout(function(){Qe=void 0}),Qe=Z.now()}function A(e,t){var n,r=0,i={height:e};for(t=t?1:0;4>r;r+=2-t)n=Te[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function L(e,t,n){for(var r,i=(nt[t]||[]).concat(nt["*"]),o=0,s=i.length;s>o;o++)if(r=i[o].call(n,t,e))return r}function q(e,t,n){var r,i,o,s,a,u,l,c,f=this,p={},d=e.style,h=e.nodeType&&Ce(e),g=ve.get(e,"fxshow");n.queue||(a=Z._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,Z.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],l=Z.css(e,"display"),c="none"===l?ve.get(e,"olddisplay")||b(e.nodeName):l,"inline"===c&&"none"===Z.css(e,"float")&&(d.display="inline-block")),n.overflow&&(d.overflow="hidden",f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],Ke.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;h=!0}p[r]=g&&g[r]||Z.style(e,r)}else l=void 0;if(Z.isEmptyObject(p))"inline"===("none"===l?b(e.nodeName):l)&&(d.display=l);else{g?"hidden"in g&&(h=g.hidden):g=ve.access(e,"fxshow",{}),o&&(g.hidden=!h),h?Z(e).show():f.done(function(){Z(e).hide()}),f.done(function(){var t;ve.remove(e,"fxshow");for(t in p)Z.style(e,t,p[t])});for(r in p)s=L(h?g[r]:0,r,f),r in g||(g[r]=s.start,h&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function H(e,t){var n,r,i,o,s;for(n in e)if(r=Z.camelCase(n),i=t[r],o=e[n],Z.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=Z.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function O(e,t,n){var r,i,o=0,s=tt.length,a=Z.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=Qe||j(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,s=0,u=l.tweens.length;u>s;s++)l.tweens[s].run(o);return a.notifyWith(e,[l,o,n]),1>o&&u?n:(a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:Z.extend({},t),opts:Z.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Qe||j(),duration:n.duration,tweens:[],createTween:function(t,n){var r=Z.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?a.resolveWith(e,[l,t]):a.rejectWith(e,[l,t]),this}}),c=l.props;for(H(c,l.opts.specialEasing);s>o;o++)if(r=tt[o].call(l,e,c,l.opts))return r;return Z.map(c,L,l),Z.isFunction(l.opts.start)&&l.opts.start.call(e,l),Z.fx.timer(Z.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function F(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(de)||[];if(Z.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function P(e,t,n,r){function i(a){var u;return o[a]=!0,Z.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||s||o[l]?s?!(u=l):void 0:(t.dataTypes.unshift(l),i(l),!1)}),u}var o={},s=e===xt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function R(e,t){var n,r,i=Z.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&Z.extend(!0,e,r),e}function M(e,t,n){for(var r,i,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}return o?(o!==u[0]&&u.unshift(o),n[o]):void 0}function W(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=l[u+" "+o]||l["* "+o],!s)for(i in l)if(a=i.split(" "),a[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){s===!0?s=l[i]:l[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(f){return{state:"parsererror",error:s?f:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}function $(e,t,n,r){var i;if(Z.isArray(t))Z.each(t,function(t,i){n||Nt.test(e)?r(e,i):$(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==Z.type(t))r(e,t);else for(i in t)$(e+"["+i+"]",t[i],n,r)}function I(e){return Z.isWindow(e)?e:9===e.nodeType&&e.defaultView}var B=[],_=B.slice,z=B.concat,X=B.push,U=B.indexOf,V={},Y=V.toString,G=V.hasOwnProperty,Q={},J=e.document,K="2.1.4",Z=function(e,t){return new Z.fn.init(e,t)},ee=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,te=/^-ms-/,ne=/-([\da-z])/gi,re=function(e,t){return t.toUpperCase()};Z.fn=Z.prototype={jquery:K,constructor:Z,selector:"",length:0,toArray:function(){return _.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:_.call(this)},pushStack:function(e){var t=Z.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return Z.each(this,e,t)},map:function(e){return this.pushStack(Z.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(_.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:X,sort:B.sort,splice:B.splice},Z.extend=Z.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||Z.isFunction(s)||(s={}),a===u&&(s=this,a--);u>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(l&&r&&(Z.isPlainObject(r)||(i=Z.isArray(r)))?(i?(i=!1,o=n&&Z.isArray(n)?n:[]):o=n&&Z.isPlainObject(n)?n:{},s[t]=Z.extend(l,o,r)):void 0!==r&&(s[t]=r));return s},Z.extend({expando:"jQuery"+(K+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===Z.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!Z.isArray(e)&&e-parseFloat(e)+1>=0},isPlainObject:function(e){return"object"!==Z.type(e)||e.nodeType||Z.isWindow(e)?!1:e.constructor&&!G.call(e.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?V[Y.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;e=Z.trim(e),e&&(1===e.indexOf("use strict")?(t=J.createElement("script"),t.text=e,J.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(te,"ms-").replace(ne,re)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,r){var i,o=0,s=e.length,a=n(e);if(r){if(a)for(;s>o&&(i=t.apply(e[o],r),i!==!1);o++);else for(o in e)if(i=t.apply(e[o],r),i===!1)break}else if(a)for(;s>o&&(i=t.call(e[o],o,e[o]),i!==!1);o++);else for(o in e)if(i=t.call(e[o],o,e[o]),i===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(ee,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?Z.merge(r,"string"==typeof e?[e]:e):X.call(r,e)),r},inArray:function(e,t,n){return null==t?-1:U.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,s=e.length,a=!n;s>o;o++)r=!t(e[o],o),r!==a&&i.push(e[o]);return i},map:function(e,t,r){var i,o=0,s=e.length,a=n(e),u=[];if(a)for(;s>o;o++)i=t(e[o],o,r),null!=i&&u.push(i);else for(o in e)i=t(e[o],o,r),null!=i&&u.push(i);return z.apply([],u)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(n=e[t],t=e,e=n),Z.isFunction(e)?(r=_.call(arguments,2),i=function(){return e.apply(t||this,r.concat(_.call(arguments)))},i.guid=e.guid=e.guid||Z.guid++,i):void 0},now:Date.now,support:Q}),Z.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){V["[object "+t+"]"]=t.toLowerCase()});var ie=function(e){function t(e,t,n,r){var i,o,s,a,u,l,f,d,h,g;if((t?t.ownerDocument||t:$)!==q&&L(t),t=t||q,n=n||[],a=t.nodeType,"string"!=typeof e||!e||1!==a&&9!==a&&11!==a)return n;if(!r&&O){if(11!==a&&(i=ye.exec(e)))if(s=i[1]){if(9===a){if(o=t.getElementById(s),!o||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(s))&&M(t,o)&&o.id===s)return n.push(o),n}else{if(i[2])return K.apply(n,t.getElementsByTagName(e)),n;if((s=i[3])&&w.getElementsByClassName)return K.apply(n,t.getElementsByClassName(s)),n}if(w.qsa&&(!F||!F.test(e))){if(d=f=W,h=t,g=1!==a&&e,1===a&&"object"!==t.nodeName.toLowerCase()){for(l=k(e),(f=t.getAttribute("id"))?d=f.replace(be,"\\$&"):t.setAttribute("id",d),d="[id='"+d+"'] ",u=l.length;u--;)l[u]=d+p(l[u]);h=xe.test(e)&&c(t.parentNode)||t,g=l.join(",")}if(g)try{return K.apply(n,h.querySelectorAll(g)),n}catch(m){}finally{f||t.removeAttribute("id")}}}return S(e.replace(ue,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>T.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[W]=!0,e}function i(e){var t=q.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=e.length;r--;)T.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||V)-(~e.sourceIndex||V);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function f(){}function p(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function d(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=B++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,s){var a,u,l=[I,o];if(s){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(u=t[W]||(t[W]={}),(a=u[r])&&a[0]===I&&a[1]===o)return l[2]=a[2];if(u[r]=l,l[2]=e(t,n,s))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function g(e,n,r){for(var i=0,o=n.length;o>i;i++)t(e,n[i],r);return r}function m(e,t,n,r,i){for(var o,s=[],a=0,u=e.length,l=null!=t;u>a;a++)(o=e[a])&&(!n||n(o,r,i))&&(s.push(o),l&&t.push(a));return s}function v(e,t,n,i,o,s){return i&&!i[W]&&(i=v(i)),o&&!o[W]&&(o=v(o,s)),r(function(r,s,a,u){var l,c,f,p=[],d=[],h=s.length,v=r||g(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?v:m(v,p,e,a,u),x=n?o||(r?e:h||i)?[]:s:y;if(n&&n(y,x,a,u),i)for(l=m(x,d),i(l,[],a,u),c=l.length;c--;)(f=l[c])&&(x[d[c]]=!(y[d[c]]=f));if(r){if(o||e){if(o){for(l=[],c=x.length;c--;)(f=x[c])&&l.push(y[c]=f);o(null,x=[],l,u)}for(c=x.length;c--;)(f=x[c])&&(l=o?ee(r,f):p[c])>-1&&(r[l]=!(s[l]=f))}}else x=m(x===s?x.splice(h,x.length):x),o?o(null,s,x,u):K.apply(s,x)})}function y(e){for(var t,n,r,i=e.length,o=T.relative[e[0].type],s=o||T.relative[" "],a=o?1:0,u=d(function(e){return e===t},s,!0),l=d(function(e){return ee(t,e)>-1},s,!0),c=[function(e,n,r){var i=!o&&(r||n!==D)||((t=n).nodeType?u(e,n,r):l(e,n,r));return t=null,i}];i>a;a++)if(n=T.relative[e[a].type])c=[d(h(c),n)];else{if(n=T.filter[e[a].type].apply(null,e[a].matches),n[W]){for(r=++a;i>r&&!T.relative[e[r].type];r++);return v(a>1&&h(c),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ue,"$1"),n,r>a&&y(e.slice(a,r)),i>r&&y(e=e.slice(r)),i>r&&p(e))}c.push(n)}return h(c)}function x(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,u,l){var c,f,p,d=0,h="0",g=r&&[],v=[],y=D,x=r||o&&T.find.TAG("*",l),b=I+=null==y?1:Math.random()||.1,w=x.length;for(l&&(D=s!==q&&s);h!==w&&null!=(c=x[h]);h++){if(o&&c){for(f=0;p=e[f++];)if(p(c,s,a)){u.push(c);break}l&&(I=b)}i&&((c=!p&&c)&&d--,r&&g.push(c))}if(d+=h,i&&h!==d){for(f=0;p=n[f++];)p(g,v,s,a);if(r){if(d>0)for(;h--;)g[h]||v[h]||(v[h]=Q.call(u));v=m(v)}K.apply(u,v),l&&!r&&v.length>0&&d+n.length>1&&t.uniqueSort(u)}return l&&(I=b,D=y),g};return i?r(s):s}var b,w,T,C,N,k,E,S,D,j,A,L,q,H,O,F,P,R,M,W="sizzle"+1*new Date,$=e.document,I=0,B=0,_=n(),z=n(),X=n(),U=function(e,t){return e===t&&(A=!0),0},V=1<<31,Y={}.hasOwnProperty,G=[],Q=G.pop,J=G.push,K=G.push,Z=G.slice,ee=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie=re.replace("w","w#"),oe="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ie+"))|)"+ne+"*\\]",se=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+oe+")*)|.*)\\)|)",ae=new RegExp(ne+"+","g"),ue=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),le=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),fe=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),pe=new RegExp(se),de=new RegExp("^"+ie+"$"),he={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re.replace("w","w*")+")"),ATTR:new RegExp("^"+oe),PSEUDO:new RegExp("^"+se),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},ge=/^(?:input|select|textarea|button)$/i,me=/^h\d$/i,ve=/^[^{]+\{\s*\[native \w/,ye=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,xe=/[+~]/,be=/'|\\/g,we=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),Te=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},Ce=function(){L()};try{K.apply(G=Z.call($.childNodes),$.childNodes),G[$.childNodes.length].nodeType}catch(Ne){K={apply:G.length?function(e,t){J.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}w=t.support={},N=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},L=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:$;return r!==q&&9===r.nodeType&&r.documentElement?(q=r,H=r.documentElement,n=r.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",Ce,!1):n.attachEvent&&n.attachEvent("onunload",Ce)),O=!N(r),w.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=i(function(e){return e.appendChild(r.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=ve.test(r.getElementsByClassName),w.getById=i(function(e){return H.appendChild(e).id=W,!r.getElementsByName||!r.getElementsByName(W).length}),w.getById?(T.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&O){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},T.filter.ID=function(e){var t=e.replace(we,Te);return function(e){return e.getAttribute("id")===t}}):(delete T.find.ID,T.filter.ID=function(e){var t=e.replace(we,Te);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),T.find.TAG=w.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},T.find.CLASS=w.getElementsByClassName&&function(e,t){return O?t.getElementsByClassName(e):void 0},P=[],F=[],(w.qsa=ve.test(r.querySelectorAll))&&(i(function(e){H.appendChild(e).innerHTML="<a id='"+W+"'></a><select id='"+W+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&F.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||F.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+W+"-]").length||F.push("~="),e.querySelectorAll(":checked").length||F.push(":checked"),e.querySelectorAll("a#"+W+"+*").length||F.push(".#.+[+~]")}),i(function(e){var t=r.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&F.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||F.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),F.push(",.*:")})),(w.matchesSelector=ve.test(R=H.matches||H.webkitMatchesSelector||H.mozMatchesSelector||H.oMatchesSelector||H.msMatchesSelector))&&i(function(e){w.disconnectedMatch=R.call(e,"div"),R.call(e,"[s!='']:x"),P.push("!=",se)}),F=F.length&&new RegExp(F.join("|")),P=P.length&&new RegExp(P.join("|")),t=ve.test(H.compareDocumentPosition),M=t||ve.test(H.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return A=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===r||e.ownerDocument===$&&M($,e)?-1:t===r||t.ownerDocument===$&&M($,t)?1:j?ee(j,e)-ee(j,t):0:4&n?-1:1)}:function(e,t){if(e===t)return A=!0,0;var n,i=0,o=e.parentNode,a=t.parentNode,u=[e],l=[t];if(!o||!a)return e===r?-1:t===r?1:o?-1:a?1:j?ee(j,e)-ee(j,t):0;if(o===a)return s(e,t);for(n=e;n=n.parentNode;)u.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;u[i]===l[i];)i++;return i?s(u[i],l[i]):u[i]===$?-1:l[i]===$?1:0},r):q},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==q&&L(e),n=n.replace(fe,"='$1']"),w.matchesSelector&&O&&(!P||!P.test(n))&&(!F||!F.test(n)))try{var r=R.call(e,n);if(r||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,q,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==q&&L(e),M(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==q&&L(e);var n=T.attrHandle[t.toLowerCase()],r=n&&Y.call(T.attrHandle,t.toLowerCase())?n(e,t,!O):void 0;return void 0!==r?r:w.attributes||!O?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(A=!w.detectDuplicates,j=!w.sortStable&&e.slice(0),e.sort(U),A){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return j=null,e},C=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=C(t);return n},T=t.selectors={cacheLength:50,createPseudo:r,match:he,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(we,Te),e[3]=(e[3]||e[4]||e[5]||"").replace(we,Te),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return he.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&pe.test(n)&&(t=k(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(we,Te).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&_(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ae," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!u&&!a;if(m){if(o){for(;g;){for(f=t;f=f[g];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(c=m[W]||(m[W]={}),l=c[e]||[],d=l[0]===I&&l[1],p=l[0]===I&&l[2],f=d&&m.childNodes[d];f=++d&&f&&f[g]||(p=d=0)||h.pop();)if(1===f.nodeType&&++p&&f===t){c[e]=[I,d,p];break}}else if(y&&(l=(t[W]||(t[W]={}))[e])&&l[0]===I)p=l[1];else for(;(f=++d&&f&&f[g]||(p=d=0)||h.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++p||(y&&((f[W]||(f[W]={}))[e]=[I,p]),f!==t)););return p-=i,p===r||p%r===0&&p/r>=0}}},PSEUDO:function(e,n){var i,o=T.pseudos[e]||T.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[W]?o(n):o.length>1?(i=[e,e,"",n],T.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)r=ee(e,i[s]),e[r]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=E(e.replace(ue,"$1"));return i[W]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(we,Te),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:r(function(e){return de.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(we,Te).toLowerCase(),function(t){var n;do if(n=O?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===H},focus:function(e){return e===q.activeElement&&(!q.hasFocus||q.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!T.pseudos.empty(e)},header:function(e){return me.test(e.nodeName)},input:function(e){return ge.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[0>n?n+t:n]}),even:l(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},T.pseudos.nth=T.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})T.pseudos[b]=u(b);return f.prototype=T.filters=T.pseudos,T.setFilters=new f,k=t.tokenize=function(e,n){var r,i,o,s,a,u,l,c=z[e+" "];if(c)return n?0:c.slice(0);for(a=e,u=[],l=T.preFilter;a;){(!r||(i=le.exec(a)))&&(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),r=!1,(i=ce.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ue," ")}),a=a.slice(r.length));for(s in T.filter)!(i=he[s].exec(a))||l[s]&&!(i=l[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):z(e,u).slice(0)},E=t.compile=function(e,t){var n,r=[],i=[],o=X[e+" "];if(!o){for(t||(t=k(e)),n=t.length;n--;)o=y(t[n]),o[W]?r.push(o):i.push(o);o=X(e,x(i,r)),o.selector=e}return o},S=t.select=function(e,t,n,r){var i,o,s,a,u,l="function"==typeof e&&e,f=!r&&k(e=l.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&w.getById&&9===t.nodeType&&O&&T.relative[o[1].type]){if(t=(T.find.ID(s.matches[0].replace(we,Te),t)||[])[0],!t)return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=he.needsContext.test(e)?0:o.length;i--&&(s=o[i],!T.relative[a=s.type]);)if((u=T.find[a])&&(r=u(s.matches[0].replace(we,Te),xe.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&p(o),!e)return K.apply(n,r),n;break}}return(l||E(e,f))(r,t,!O,n,xe.test(e)&&c(t.parentNode)||t),n},w.sortStable=W.split("").sort(U).join("")===W,w.detectDuplicates=!!A,L(),w.sortDetached=i(function(e){return 1&e.compareDocumentPosition(q.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);Z.find=ie,Z.expr=ie.selectors,Z.expr[":"]=Z.expr.pseudos,Z.unique=ie.uniqueSort,Z.text=ie.getText,Z.isXMLDoc=ie.isXML,Z.contains=ie.contains;var oe=Z.expr.match.needsContext,se=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,ae=/^.[^:#\[\.,]*$/;Z.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?Z.find.matchesSelector(r,e)?[r]:[]:Z.find.matches(e,Z.grep(t,function(e){return 1===e.nodeType}))},Z.fn.extend({find:function(e){var t,n=this.length,r=[],i=this;
if("string"!=typeof e)return this.pushStack(Z(e).filter(function(){for(t=0;n>t;t++)if(Z.contains(i[t],this))return!0}));for(t=0;n>t;t++)Z.find(e,i[t],r);return r=this.pushStack(n>1?Z.unique(r):r),r.selector=this.selector?this.selector+" "+e:e,r},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&oe.test(e)?Z(e):e||[],!1).length}});var ue,le=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ce=Z.fn.init=function(e,t){var n,r;if(!e)return this;if("string"==typeof e){if(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:le.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||ue).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof Z?t[0]:t,Z.merge(this,Z.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:J,!0)),se.test(n[1])&&Z.isPlainObject(t))for(n in t)Z.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return r=J.getElementById(n[2]),r&&r.parentNode&&(this.length=1,this[0]=r),this.context=J,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):Z.isFunction(e)?"undefined"!=typeof ue.ready?ue.ready(e):e(Z):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),Z.makeArray(e,this))};ce.prototype=Z.fn,ue=Z(J);var fe=/^(?:parents|prev(?:Until|All))/,pe={children:!0,contents:!0,next:!0,prev:!0};Z.extend({dir:function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&Z(e).is(n))break;r.push(e)}return r},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),Z.fn.extend({has:function(e){var t=Z(e,this),n=t.length;return this.filter(function(){for(var e=0;n>e;e++)if(Z.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],s=oe.test(e)||"string"!=typeof e?Z(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&Z.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?Z.unique(o):o)},index:function(e){return e?"string"==typeof e?U.call(Z(e),this[0]):U.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(Z.unique(Z.merge(this.get(),Z(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),Z.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return Z.dir(e,"parentNode")},parentsUntil:function(e,t,n){return Z.dir(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return Z.dir(e,"nextSibling")},prevAll:function(e){return Z.dir(e,"previousSibling")},nextUntil:function(e,t,n){return Z.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return Z.dir(e,"previousSibling",n)},siblings:function(e){return Z.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return Z.sibling(e.firstChild)},contents:function(e){return e.contentDocument||Z.merge([],e.childNodes)}},function(e,t){Z.fn[e]=function(n,r){var i=Z.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=Z.filter(r,i)),this.length>1&&(pe[e]||Z.unique(i),fe.test(e)&&i.reverse()),this.pushStack(i)}});var de=/\S+/g,he={};Z.Callbacks=function(e){e="string"==typeof e?he[e]||o(e):Z.extend({},e);var t,n,r,i,s,a,u=[],l=!e.once&&[],c=function(o){for(t=e.memory&&o,n=!0,a=i||0,i=0,s=u.length,r=!0;u&&s>a;a++)if(u[a].apply(o[0],o[1])===!1&&e.stopOnFalse){t=!1;break}r=!1,u&&(l?l.length&&c(l.shift()):t?u=[]:f.disable())},f={add:function(){if(u){var n=u.length;!function o(t){Z.each(t,function(t,n){var r=Z.type(n);"function"===r?e.unique&&f.has(n)||u.push(n):n&&n.length&&"string"!==r&&o(n)})}(arguments),r?s=u.length:t&&(i=n,c(t))}return this},remove:function(){return u&&Z.each(arguments,function(e,t){for(var n;(n=Z.inArray(t,u,n))>-1;)u.splice(n,1),r&&(s>=n&&s--,a>=n&&a--)}),this},has:function(e){return e?Z.inArray(e,u)>-1:!(!u||!u.length)},empty:function(){return u=[],s=0,this},disable:function(){return u=l=t=void 0,this},disabled:function(){return!u},lock:function(){return l=void 0,t||f.disable(),this},locked:function(){return!l},fireWith:function(e,t){return!u||n&&!l||(t=t||[],t=[e,t.slice?t.slice():t],r?l.push(t):c(t)),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!n}};return f},Z.extend({Deferred:function(e){var t=[["resolve","done",Z.Callbacks("once memory"),"resolved"],["reject","fail",Z.Callbacks("once memory"),"rejected"],["notify","progress",Z.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return Z.Deferred(function(n){Z.each(t,function(t,o){var s=Z.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&Z.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?Z.extend(e,r):r}},i={};return r.pipe=r.then,Z.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=_.call(arguments),s=o.length,a=1!==s||e&&Z.isFunction(e.promise)?s:0,u=1===a?e:Z.Deferred(),l=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?_.call(arguments):i,r===t?u.notifyWith(n,r):--a||u.resolveWith(n,r)}};if(s>1)for(t=new Array(s),n=new Array(s),r=new Array(s);s>i;i++)o[i]&&Z.isFunction(o[i].promise)?o[i].promise().done(l(i,r,o)).fail(u.reject).progress(l(i,n,t)):--a;return a||u.resolveWith(r,o),u.promise()}});var ge;Z.fn.ready=function(e){return Z.ready.promise().done(e),this},Z.extend({isReady:!1,readyWait:1,holdReady:function(e){e?Z.readyWait++:Z.ready(!0)},ready:function(e){(e===!0?--Z.readyWait:Z.isReady)||(Z.isReady=!0,e!==!0&&--Z.readyWait>0||(ge.resolveWith(J,[Z]),Z.fn.triggerHandler&&(Z(J).triggerHandler("ready"),Z(J).off("ready"))))}}),Z.ready.promise=function(t){return ge||(ge=Z.Deferred(),"complete"===J.readyState?setTimeout(Z.ready):(J.addEventListener("DOMContentLoaded",s,!1),e.addEventListener("load",s,!1))),ge.promise(t)},Z.ready.promise();var me=Z.access=function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if("object"===Z.type(n)){i=!0;for(a in n)Z.access(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,Z.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(Z(e),n)})),t))for(;u>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o};Z.acceptData=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType},a.uid=1,a.accepts=Z.acceptData,a.prototype={key:function(e){if(!a.accepts(e))return 0;var t={},n=e[this.expando];if(!n){n=a.uid++;try{t[this.expando]={value:n},Object.defineProperties(e,t)}catch(r){t[this.expando]=n,Z.extend(e,t)}}return this.cache[n]||(this.cache[n]={}),n},set:function(e,t,n){var r,i=this.key(e),o=this.cache[i];if("string"==typeof t)o[t]=n;else if(Z.isEmptyObject(o))Z.extend(this.cache[i],t);else for(r in t)o[r]=t[r];return o},get:function(e,t){var n=this.cache[this.key(e)];return void 0===t?n:n[t]},access:function(e,t,n){var r;return void 0===t||t&&"string"==typeof t&&void 0===n?(r=this.get(e,t),void 0!==r?r:this.get(e,Z.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r,i,o=this.key(e),s=this.cache[o];if(void 0===t)this.cache[o]={};else{Z.isArray(t)?r=t.concat(t.map(Z.camelCase)):(i=Z.camelCase(t),t in s?r=[t,i]:(r=i,r=r in s?[r]:r.match(de)||[])),n=r.length;for(;n--;)delete s[r[n]]}},hasData:function(e){return!Z.isEmptyObject(this.cache[e[this.expando]]||{})},discard:function(e){e[this.expando]&&delete this.cache[e[this.expando]]}};var ve=new a,ye=new a,xe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,be=/([A-Z])/g;Z.extend({hasData:function(e){return ye.hasData(e)||ve.hasData(e)},data:function(e,t,n){return ye.access(e,t,n)},removeData:function(e,t){ye.remove(e,t)},_data:function(e,t,n){return ve.access(e,t,n)},_removeData:function(e,t){ve.remove(e,t)}}),Z.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=ye.get(o),1===o.nodeType&&!ve.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=Z.camelCase(r.slice(5)),u(o,r,i[r])));ve.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){ye.set(this,e)}):me(this,function(t){var n,r=Z.camelCase(e);if(o&&void 0===t){if(n=ye.get(o,e),void 0!==n)return n;if(n=ye.get(o,r),void 0!==n)return n;if(n=u(o,r,void 0),void 0!==n)return n}else this.each(function(){var n=ye.get(this,r);ye.set(this,r,t),-1!==e.indexOf("-")&&void 0!==n&&ye.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){ye.remove(this,e)})}}),Z.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=ve.get(e,t),n&&(!r||Z.isArray(n)?r=ve.access(e,t,Z.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=Z.queue(e,t),r=n.length,i=n.shift(),o=Z._queueHooks(e,t),s=function(){Z.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ve.get(e,n)||ve.access(e,n,{empty:Z.Callbacks("once memory").add(function(){ve.remove(e,[t+"queue",n])})})}}),Z.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?Z.queue(this[0],e):void 0===t?this:this.each(function(){var n=Z.queue(this,e,t);Z._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&Z.dequeue(this,e)})},dequeue:function(e){return this.each(function(){Z.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=Z.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=ve.get(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var we=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Te=["Top","Right","Bottom","Left"],Ce=function(e,t){return e=t||e,"none"===Z.css(e,"display")||!Z.contains(e.ownerDocument,e)},Ne=/^(?:checkbox|radio)$/i;!function(){var e=J.createDocumentFragment(),t=e.appendChild(J.createElement("div")),n=J.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),Q.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",Q.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var ke="undefined";Q.focusinBubbles="onfocusin"in e;var Ee=/^key/,Se=/^(?:mouse|pointer|contextmenu)|click/,De=/^(?:focusinfocus|focusoutblur)$/,je=/^([^.]*)(?:\.(.+)|)$/;Z.event={global:{},add:function(e,t,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,m=ve.get(e);if(m)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=Z.guid++),(u=m.events)||(u=m.events={}),(s=m.handle)||(s=m.handle=function(t){return typeof Z!==ke&&Z.event.triggered!==t.type?Z.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(de)||[""],l=t.length;l--;)a=je.exec(t[l])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d&&(f=Z.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=Z.event.special[d]||{},c=Z.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&Z.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||(p=u[d]=[],p.delegateCount=0,f.setup&&f.setup.call(e,r,h,s)!==!1||e.addEventListener&&e.addEventListener(d,s,!1)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),Z.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,m=ve.hasData(e)&&ve.get(e);if(m&&(u=m.events)){for(t=(t||"").match(de)||[""],l=t.length;l--;)if(a=je.exec(t[l])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d){for(f=Z.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,p=u[d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));s&&!p.length&&(f.teardown&&f.teardown.call(e,h,m.handle)!==!1||Z.removeEvent(e,d,m.handle),delete u[d])}else for(d in u)Z.event.remove(e,d+t[l],n,r,!0);Z.isEmptyObject(u)&&(delete m.handle,ve.remove(e,"events"))}},trigger:function(t,n,r,i){var o,s,a,u,l,c,f,p=[r||J],d=G.call(t,"type")?t.type:t,h=G.call(t,"namespace")?t.namespace.split("."):[];if(s=a=r=r||J,3!==r.nodeType&&8!==r.nodeType&&!De.test(d+Z.event.triggered)&&(d.indexOf(".")>=0&&(h=d.split("."),d=h.shift(),h.sort()),l=d.indexOf(":")<0&&"on"+d,t=t[Z.expando]?t:new Z.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:Z.makeArray(n,[t]),f=Z.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!Z.isWindow(r)){for(u=f.delegateType||d,De.test(u+d)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(r.ownerDocument||J)&&p.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=p[o++])&&!t.isPropagationStopped();)t.type=o>1?u:f.bindType||d,c=(ve.get(s,"events")||{})[t.type]&&ve.get(s,"handle"),c&&c.apply(s,n),c=l&&s[l],c&&c.apply&&Z.acceptData(s)&&(t.result=c.apply(s,n),t.result===!1&&t.preventDefault());return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(p.pop(),n)!==!1||!Z.acceptData(r)||l&&Z.isFunction(r[d])&&!Z.isWindow(r)&&(a=r[l],a&&(r[l]=null),Z.event.triggered=d,r[d](),Z.event.triggered=void 0,a&&(r[l]=a)),t.result}},dispatch:function(e){e=Z.event.fix(e);var t,n,r,i,o,s=[],a=_.call(arguments),u=(ve.get(this,"events")||{})[e.type]||[],l=Z.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){for(s=Z.event.handlers.call(this,e,u),t=0;(i=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!e.isImmediatePropagationStopped();)(!e.namespace_re||e.namespace_re.test(o.namespace))&&(e.handleObj=o,e.data=o.data,r=((Z.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,u=e.target;if(a&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!==this;u=u.parentNode||this)if(u.disabled!==!0||"click"!==e.type){for(r=[],n=0;a>n;n++)o=t[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?Z(i,this).index(u)>=0:Z.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&s.push({elem:u,handlers:r})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||J,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},fix:function(e){if(e[Z.expando])return e;var t,n,r,i=e.type,o=e,s=this.fixHooks[i];for(s||(this.fixHooks[i]=s=Se.test(i)?this.mouseHooks:Ee.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new Z.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=J),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,o):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==f()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===f()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&Z.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(e){return Z.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=Z.extend(new Z.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?Z.event.trigger(i,null,t):Z.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},Z.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)},Z.Event=function(e,t){return this instanceof Z.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?l:c):this.type=e,t&&Z.extend(this,t),this.timeStamp=e&&e.timeStamp||Z.now(),void(this[Z.expando]=!0)):new Z.Event(e,t)},Z.Event.prototype={isDefaultPrevented:c,isPropagationStopped:c,isImmediatePropagationStopped:c,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=l,e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=l,e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=l,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},Z.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){Z.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!Z.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),Q.focusinBubbles||Z.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){Z.event.simulate(t,e.target,Z.event.fix(e),!0)};Z.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=ve.access(r,t);i||r.addEventListener(e,n,!0),ve.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=ve.access(r,t)-1;i?ve.access(r,t,i):(r.removeEventListener(e,n,!0),ve.remove(r,t))}}}),Z.fn.extend({on:function(e,t,n,r,i){var o,s;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=void 0);for(s in e)this.on(s,t,n,e[s],i);return this}if(null==n&&null==r?(r=t,n=t=void 0):null==r&&("string"==typeof t?(r=n,n=void 0):(r=n,n=t,t=void 0)),r===!1)r=c;else if(!r)return this;return 1===i&&(o=r,r=function(e){return Z().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=Z.guid++)),this.each(function(){Z.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,Z(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=c),this.each(function(){Z.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){Z.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?Z.event.trigger(e,t,n,!0):void 0}});var Ae=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Le=/<([\w:]+)/,qe=/<|&#?\w+;/,He=/<(?:script|style|link)/i,Oe=/checked\s*(?:[^=]|=\s*.checked.)/i,Fe=/^$|\/(?:java|ecma)script/i,Pe=/^true\/(.*)/,Re=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Me.optgroup=Me.option,Me.tbody=Me.tfoot=Me.colgroup=Me.caption=Me.thead,Me.th=Me.td,Z.extend({clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),u=Z.contains(e.ownerDocument,e);if(!(Q.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||Z.isXMLDoc(e)))for(s=v(a),o=v(e),r=0,i=o.length;i>r;r++)y(o[r],s[r]);if(t)if(n)for(o=o||v(e),s=s||v(a),r=0,i=o.length;i>r;r++)m(o[r],s[r]);else m(e,a);return s=v(a,"script"),s.length>0&&g(s,!u&&v(e,"script")),a},buildFragment:function(e,t,n,r){for(var i,o,s,a,u,l,c=t.createDocumentFragment(),f=[],p=0,d=e.length;d>p;p++)if(i=e[p],i||0===i)if("object"===Z.type(i))Z.merge(f,i.nodeType?[i]:i);else if(qe.test(i)){for(o=o||c.appendChild(t.createElement("div")),s=(Le.exec(i)||["",""])[1].toLowerCase(),a=Me[s]||Me._default,o.innerHTML=a[1]+i.replace(Ae,"<$1></$2>")+a[2],l=a[0];l--;)o=o.lastChild;Z.merge(f,o.childNodes),o=c.firstChild,o.textContent=""}else f.push(t.createTextNode(i));for(c.textContent="",p=0;i=f[p++];)if((!r||-1===Z.inArray(i,r))&&(u=Z.contains(i.ownerDocument,i),o=v(c.appendChild(i),"script"),u&&g(o),n))for(l=0;i=o[l++];)Fe.test(i.type||"")&&n.push(i);return c},cleanData:function(e){for(var t,n,r,i,o=Z.event.special,s=0;void 0!==(n=e[s]);s++){if(Z.acceptData(n)&&(i=n[ve.expando],i&&(t=ve.cache[i]))){if(t.events)for(r in t.events)o[r]?Z.event.remove(n,r):Z.removeEvent(n,r,t.handle);ve.cache[i]&&delete ve.cache[i]}delete ye.cache[n[ye.expando]]}}}),Z.fn.extend({text:function(e){return me(this,function(e){return void 0===e?Z.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=e)})},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=p(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=p(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,r=e?Z.filter(e,this):this,i=0;null!=(n=r[i]);i++)t||1!==n.nodeType||Z.cleanData(v(n)),n.parentNode&&(t&&Z.contains(n.ownerDocument,n)&&g(v(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(Z.cleanData(v(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return Z.clone(this,e,t)})},html:function(e){return me(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!He.test(e)&&!Me[(Le.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(Ae,"<$1></$2>");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(Z.cleanData(v(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,Z.cleanData(v(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t){e=z.apply([],e);var n,r,i,o,s,a,u=0,l=this.length,c=this,f=l-1,p=e[0],g=Z.isFunction(p);if(g||l>1&&"string"==typeof p&&!Q.checkClone&&Oe.test(p))return this.each(function(n){var r=c.eq(n);g&&(e[0]=p.call(this,n,r.html())),r.domManip(e,t)});if(l&&(n=Z.buildFragment(e,this[0].ownerDocument,!1,this),r=n.firstChild,1===n.childNodes.length&&(n=r),r)){for(i=Z.map(v(n,"script"),d),o=i.length;l>u;u++)s=n,u!==f&&(s=Z.clone(s,!0,!0),o&&Z.merge(i,v(s,"script"))),t.call(this[u],s,u);if(o)for(a=i[i.length-1].ownerDocument,Z.map(i,h),u=0;o>u;u++)s=i[u],Fe.test(s.type||"")&&!ve.access(s,"globalEval")&&Z.contains(a,s)&&(s.src?Z._evalUrl&&Z._evalUrl(s.src):Z.globalEval(s.textContent.replace(Re,"")))}return this}}),Z.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){Z.fn[e]=function(e){for(var n,r=[],i=Z(e),o=i.length-1,s=0;o>=s;s++)n=s===o?this:this.clone(!0),Z(i[s])[t](n),X.apply(r,n.get());return this.pushStack(r)}});var We,$e={},Ie=/^margin/,Be=new RegExp("^("+we+")(?!px)[a-z%]+$","i"),_e=function(t){return t.ownerDocument.defaultView.opener?t.ownerDocument.defaultView.getComputedStyle(t,null):e.getComputedStyle(t,null)};!function(){function t(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",s.innerHTML="",i.appendChild(o);var t=e.getComputedStyle(s,null);n="1%"!==t.top,r="4px"===t.width,i.removeChild(o)}var n,r,i=J.documentElement,o=J.createElement("div"),s=J.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",Q.clearCloneStyle="content-box"===s.style.backgroundClip,o.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",o.appendChild(s),e.getComputedStyle&&Z.extend(Q,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==r&&t(),r},reliableMarginRight:function(){var t,n=s.appendChild(J.createElement("div"));return n.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",s.style.width="1px",i.appendChild(o),t=!parseFloat(e.getComputedStyle(n,null).marginRight),i.removeChild(o),s.removeChild(n),t}}))}(),Z.swap=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i};var ze=/^(none|table(?!-c[ea]).+)/,Xe=new RegExp("^("+we+")(.*)$","i"),Ue=new RegExp("^([+-])=("+we+")","i"),Ve={position:"absolute",visibility:"hidden",display:"block"},Ye={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","O","Moz","ms"];Z.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=w(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=Z.camelCase(t),u=e.style;return t=Z.cssProps[a]||(Z.cssProps[a]=C(u,a)),s=Z.cssHooks[t]||Z.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t]:(o=typeof n,"string"===o&&(i=Ue.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(Z.css(e,t)),o="number"),null!=n&&n===n&&("number"!==o||Z.cssNumber[a]||(n+="px"),Q.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(u[t]=n)),void 0)}},css:function(e,t,n,r){var i,o,s,a=Z.camelCase(t);return t=Z.cssProps[a]||(Z.cssProps[a]=C(e.style,a)),s=Z.cssHooks[t]||Z.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=w(e,t,r)),"normal"===i&&t in Ye&&(i=Ye[t]),""===n||n?(o=parseFloat(i),n===!0||Z.isNumeric(o)?o||0:i):i}}),Z.each(["height","width"],function(e,t){Z.cssHooks[t]={get:function(e,n,r){return n?ze.test(Z.css(e,"display"))&&0===e.offsetWidth?Z.swap(e,Ve,function(){return E(e,t,r)}):E(e,t,r):void 0},set:function(e,n,r){var i=r&&_e(e);return N(e,n,r?k(e,t,r,"border-box"===Z.css(e,"boxSizing",!1,i),i):0)}}}),Z.cssHooks.marginRight=T(Q.reliableMarginRight,function(e,t){return t?Z.swap(e,{display:"inline-block"},w,[e,"marginRight"]):void 0}),Z.each({margin:"",padding:"",border:"Width"},function(e,t){Z.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+Te[r]+t]=o[r]||o[r-2]||o[0];return i}},Ie.test(e)||(Z.cssHooks[e+t].set=N)}),Z.fn.extend({css:function(e,t){return me(this,function(e,t,n){var r,i,o={},s=0;if(Z.isArray(t)){for(r=_e(e),i=t.length;i>s;s++)o[t[s]]=Z.css(e,t[s],!1,r);return o}return void 0!==n?Z.style(e,t,n):Z.css(e,t)},e,t,arguments.length>1)},show:function(){return S(this,!0)},hide:function(){return S(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ce(this)?Z(this).show():Z(this).hide()})}}),Z.Tween=D,D.prototype={constructor:D,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(Z.cssNumber[n]?"":"px")},cur:function(){var e=D.propHooks[this.prop];return e&&e.get?e.get(this):D.propHooks._default.get(this)},run:function(e){var t,n=D.propHooks[this.prop];return this.options.duration?this.pos=t=Z.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):D.propHooks._default.set(this),this}},D.prototype.init.prototype=D.prototype,D.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=Z.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){Z.fx.step[e.prop]?Z.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[Z.cssProps[e.prop]]||Z.cssHooks[e.prop])?Z.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},D.propHooks.scrollTop=D.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},Z.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},Z.fx=D.prototype.init,Z.fx.step={};var Qe,Je,Ke=/^(?:toggle|show|hide)$/,Ze=new RegExp("^(?:([+-])=|)("+we+")([a-z%]*)$","i"),et=/queueHooks$/,tt=[q],nt={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=Ze.exec(t),o=i&&i[3]||(Z.cssNumber[e]?"":"px"),s=(Z.cssNumber[e]||"px"!==o&&+r)&&Ze.exec(Z.css(n.elem,e)),a=1,u=20;if(s&&s[3]!==o){o=o||s[3],i=i||[],s=+r||1;do a=a||".5",s/=a,Z.style(n.elem,e,s+o);while(a!==(a=n.cur()/r)&&1!==a&&--u)}return i&&(s=n.start=+s||+r||0,n.unit=o,n.end=i[1]?s+(i[1]+1)*i[2]:+i[2]),n}]};Z.Animation=Z.extend(O,{tweener:function(e,t){Z.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,r=0,i=e.length;i>r;r++)n=e[r],nt[n]=nt[n]||[],nt[n].unshift(t)},prefilter:function(e,t){t?tt.unshift(e):tt.push(e)}}),Z.speed=function(e,t,n){var r=e&&"object"==typeof e?Z.extend({},e):{complete:n||!n&&t||Z.isFunction(e)&&e,duration:e,easing:n&&t||t&&!Z.isFunction(t)&&t};return r.duration=Z.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in Z.fx.speeds?Z.fx.speeds[r.duration]:Z.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){Z.isFunction(r.old)&&r.old.call(this),r.queue&&Z.dequeue(this,r.queue)},r},Z.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Ce).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=Z.isEmptyObject(e),o=Z.speed(t,n,r),s=function(){var t=O(this,Z.extend({},e),o);(i||ve.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=Z.timers,s=ve.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&et.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&Z.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=ve.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=Z.timers,s=r?r.length:0;for(n.finish=!0,Z.queue(this,e,[]),
i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),Z.each(["toggle","show","hide"],function(e,t){var n=Z.fn[t];Z.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(A(t,!0),e,r,i)}}),Z.each({slideDown:A("show"),slideUp:A("hide"),slideToggle:A("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){Z.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),Z.timers=[],Z.fx.tick=function(){var e,t=0,n=Z.timers;for(Qe=Z.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||Z.fx.stop(),Qe=void 0},Z.fx.timer=function(e){Z.timers.push(e),e()?Z.fx.start():Z.timers.pop()},Z.fx.interval=13,Z.fx.start=function(){Je||(Je=setInterval(Z.fx.tick,Z.fx.interval))},Z.fx.stop=function(){clearInterval(Je),Je=null},Z.fx.speeds={slow:600,fast:200,_default:400},Z.fn.delay=function(e,t){return e=Z.fx?Z.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},function(){var e=J.createElement("input"),t=J.createElement("select"),n=t.appendChild(J.createElement("option"));e.type="checkbox",Q.checkOn=""!==e.value,Q.optSelected=n.selected,t.disabled=!0,Q.optDisabled=!n.disabled,e=J.createElement("input"),e.value="t",e.type="radio",Q.radioValue="t"===e.value}();var rt,it,ot=Z.expr.attrHandle;Z.fn.extend({attr:function(e,t){return me(this,Z.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){Z.removeAttr(this,e)})}}),Z.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(e&&3!==o&&8!==o&&2!==o)return typeof e.getAttribute===ke?Z.prop(e,t,n):(1===o&&Z.isXMLDoc(e)||(t=t.toLowerCase(),r=Z.attrHooks[t]||(Z.expr.match.bool.test(t)?it:rt)),void 0===n?r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=Z.find.attr(e,t),null==i?void 0:i):null!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):void Z.removeAttr(e,t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(de);if(o&&1===e.nodeType)for(;n=o[i++];)r=Z.propFix[n]||n,Z.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)},attrHooks:{type:{set:function(e,t){if(!Q.radioValue&&"radio"===t&&Z.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),it={set:function(e,t,n){return t===!1?Z.removeAttr(e,n):e.setAttribute(n,n),n}},Z.each(Z.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ot[t]||Z.find.attr;ot[t]=function(e,t,r){var i,o;return r||(o=ot[t],ot[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,ot[t]=o),i}});var st=/^(?:input|select|textarea|button)$/i;Z.fn.extend({prop:function(e,t){return me(this,Z.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[Z.propFix[e]||e]})}}),Z.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var r,i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return o=1!==s||!Z.isXMLDoc(e),o&&(t=Z.propFix[t]||t,i=Z.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){return e.hasAttribute("tabindex")||st.test(e.nodeName)||e.href?e.tabIndex:-1}}}}),Q.optSelected||(Z.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),Z.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){Z.propFix[this.toLowerCase()]=this});var at=/[\t\r\n\f]/g;Z.fn.extend({addClass:function(e){var t,n,r,i,o,s,a="string"==typeof e&&e,u=0,l=this.length;if(Z.isFunction(e))return this.each(function(t){Z(this).addClass(e.call(this,t,this.className))});if(a)for(t=(e||"").match(de)||[];l>u;u++)if(n=this[u],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(at," "):" ")){for(o=0;i=t[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");s=Z.trim(r),n.className!==s&&(n.className=s)}return this},removeClass:function(e){var t,n,r,i,o,s,a=0===arguments.length||"string"==typeof e&&e,u=0,l=this.length;if(Z.isFunction(e))return this.each(function(t){Z(this).removeClass(e.call(this,t,this.className))});if(a)for(t=(e||"").match(de)||[];l>u;u++)if(n=this[u],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(at," "):"")){for(o=0;i=t[o++];)for(;r.indexOf(" "+i+" ")>=0;)r=r.replace(" "+i+" "," ");s=e?Z.trim(r):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):Z.isFunction(e)?this.each(function(n){Z(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n)for(var t,r=0,i=Z(this),o=e.match(de)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else(n===ke||"boolean"===n)&&(this.className&&ve.set(this,"__className__",this.className),this.className=this.className||e===!1?"":ve.get(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,r=this.length;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(at," ").indexOf(t)>=0)return!0;return!1}});var ut=/\r/g;Z.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=Z.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,Z(this).val()):e,null==i?i="":"number"==typeof i?i+="":Z.isArray(i)&&(i=Z.map(i,function(e){return null==e?"":e+""})),t=Z.valHooks[this.type]||Z.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=Z.valHooks[i.type]||Z.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(ut,""):null==n?"":n)}}}),Z.extend({valHooks:{option:{get:function(e){var t=Z.find.attr(e,"value");return null!=t?t:Z.trim(Z.text(e))}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,s=o?null:[],a=o?i+1:r.length,u=0>i?a:o?i:0;a>u;u++)if(n=r[u],(n.selected||u===i)&&(Q.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!Z.nodeName(n.parentNode,"optgroup"))){if(t=Z(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=Z.makeArray(t),s=i.length;s--;)r=i[s],(r.selected=Z.inArray(r.value,o)>=0)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),Z.each(["radio","checkbox"],function(){Z.valHooks[this]={set:function(e,t){return Z.isArray(t)?e.checked=Z.inArray(Z(e).val(),t)>=0:void 0}},Q.checkOn||(Z.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),Z.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){Z.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),Z.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var lt=Z.now(),ct=/\?/;Z.parseJSON=function(e){return JSON.parse(e+"")},Z.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,"text/xml")}catch(r){t=void 0}return(!t||t.getElementsByTagName("parsererror").length)&&Z.error("Invalid XML: "+e),t};var ft=/#.*$/,pt=/([?&])_=[^&]*/,dt=/^(.*?):[ \t]*([^\r\n]*)$/gm,ht=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,gt=/^(?:GET|HEAD)$/,mt=/^\/\//,vt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,yt={},xt={},bt="*/".concat("*"),wt=e.location.href,Tt=vt.exec(wt.toLowerCase())||[];Z.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt,type:"GET",isLocal:ht.test(Tt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":Z.parseJSON,"text xml":Z.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?R(R(e,Z.ajaxSettings),t):R(Z.ajaxSettings,e)},ajaxPrefilter:F(yt),ajaxTransport:F(xt),ajax:function(e,t){function n(e,t,n,s){var u,c,v,y,b,T=t;2!==x&&(x=2,a&&clearTimeout(a),r=void 0,o=s||"",w.readyState=e>0?4:0,u=e>=200&&300>e||304===e,n&&(y=M(f,w,n)),y=W(f,y,w,u),u?(f.ifModified&&(b=w.getResponseHeader("Last-Modified"),b&&(Z.lastModified[i]=b),b=w.getResponseHeader("etag"),b&&(Z.etag[i]=b)),204===e||"HEAD"===f.type?T="nocontent":304===e?T="notmodified":(T=y.state,c=y.data,v=y.error,u=!v)):(v=T,(e||!T)&&(T="error",0>e&&(e=0))),w.status=e,w.statusText=(t||T)+"",u?h.resolveWith(p,[c,T,w]):h.rejectWith(p,[w,T,v]),w.statusCode(m),m=void 0,l&&d.trigger(u?"ajaxSuccess":"ajaxError",[w,f,u?c:v]),g.fireWith(p,[w,T]),l&&(d.trigger("ajaxComplete",[w,f]),--Z.active||Z.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,s,a,u,l,c,f=Z.ajaxSetup({},t),p=f.context||f,d=f.context&&(p.nodeType||p.jquery)?Z(p):Z.event,h=Z.Deferred(),g=Z.Callbacks("once memory"),m=f.statusCode||{},v={},y={},x=0,b="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!s)for(s={};t=dt.exec(o);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?o:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=y[n]=y[n]||e,v[e]=t),this},overrideMimeType:function(e){return x||(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>x)for(t in e)m[t]=[m[t],e[t]];else w.always(e[w.status]);return this},abort:function(e){var t=e||b;return r&&r.abort(t),n(0,t),this}};if(h.promise(w).complete=g.add,w.success=w.done,w.error=w.fail,f.url=((e||f.url||wt)+"").replace(ft,"").replace(mt,Tt[1]+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=Z.trim(f.dataType||"*").toLowerCase().match(de)||[""],null==f.crossDomain&&(u=vt.exec(f.url.toLowerCase()),f.crossDomain=!(!u||u[1]===Tt[1]&&u[2]===Tt[2]&&(u[3]||("http:"===u[1]?"80":"443"))===(Tt[3]||("http:"===Tt[1]?"80":"443")))),f.data&&f.processData&&"string"!=typeof f.data&&(f.data=Z.param(f.data,f.traditional)),P(yt,f,t,w),2===x)return w;l=Z.event&&f.global,l&&0===Z.active++&&Z.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!gt.test(f.type),i=f.url,f.hasContent||(f.data&&(i=f.url+=(ct.test(i)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=pt.test(i)?i.replace(pt,"$1_="+lt++):i+(ct.test(i)?"&":"?")+"_="+lt++)),f.ifModified&&(Z.lastModified[i]&&w.setRequestHeader("If-Modified-Since",Z.lastModified[i]),Z.etag[i]&&w.setRequestHeader("If-None-Match",Z.etag[i])),(f.data&&f.hasContent&&f.contentType!==!1||t.contentType)&&w.setRequestHeader("Content-Type",f.contentType),w.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+bt+"; q=0.01":""):f.accepts["*"]);for(c in f.headers)w.setRequestHeader(c,f.headers[c]);if(f.beforeSend&&(f.beforeSend.call(p,w,f)===!1||2===x))return w.abort();b="abort";for(c in{success:1,error:1,complete:1})w[c](f[c]);if(r=P(xt,f,t,w)){w.readyState=1,l&&d.trigger("ajaxSend",[w,f]),f.async&&f.timeout>0&&(a=setTimeout(function(){w.abort("timeout")},f.timeout));try{x=1,r.send(v,n)}catch(T){if(!(2>x))throw T;n(-1,T)}}else n(-1,"No Transport");return w},getJSON:function(e,t,n){return Z.get(e,t,n,"json")},getScript:function(e,t){return Z.get(e,void 0,t,"script")}}),Z.each(["get","post"],function(e,t){Z[t]=function(e,n,r,i){return Z.isFunction(n)&&(i=i||r,r=n,n=void 0),Z.ajax({url:e,type:t,dataType:i,data:n,success:r})}}),Z._evalUrl=function(e){return Z.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},Z.fn.extend({wrapAll:function(e){var t;return Z.isFunction(e)?this.each(function(t){Z(this).wrapAll(e.call(this,t))}):(this[0]&&(t=Z(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return Z.isFunction(e)?this.each(function(t){Z(this).wrapInner(e.call(this,t))}):this.each(function(){var t=Z(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=Z.isFunction(e);return this.each(function(n){Z(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){Z.nodeName(this,"body")||Z(this).replaceWith(this.childNodes)}).end()}}),Z.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0},Z.expr.filters.visible=function(e){return!Z.expr.filters.hidden(e)};var Ct=/%20/g,Nt=/\[\]$/,kt=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,St=/^(?:input|select|textarea|keygen)/i;Z.param=function(e,t){var n,r=[],i=function(e,t){t=Z.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=Z.ajaxSettings&&Z.ajaxSettings.traditional),Z.isArray(e)||e.jquery&&!Z.isPlainObject(e))Z.each(e,function(){i(this.name,this.value)});else for(n in e)$(n,e[n],t,i);return r.join("&").replace(Ct,"+")},Z.fn.extend({serialize:function(){return Z.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=Z.prop(this,"elements");return e?Z.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!Z(this).is(":disabled")&&St.test(this.nodeName)&&!Et.test(e)&&(this.checked||!Ne.test(e))}).map(function(e,t){var n=Z(this).val();return null==n?null:Z.isArray(n)?Z.map(n,function(e){return{name:t.name,value:e.replace(kt,"\r\n")}}):{name:t.name,value:n.replace(kt,"\r\n")}}).get()}}),Z.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(e){}};var Dt=0,jt={},At={0:200,1223:204},Lt=Z.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in jt)jt[e]()}),Q.cors=!!Lt&&"withCredentials"in Lt,Q.ajax=Lt=!!Lt,Z.ajaxTransport(function(e){var t;return Q.cors||Lt&&!e.crossDomain?{send:function(n,r){var i,o=e.xhr(),s=++Dt;if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)o[i]=e.xhrFields[i];e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(i in n)o.setRequestHeader(i,n[i]);t=function(e){return function(){t&&(delete jt[s],t=o.onload=o.onerror=null,"abort"===e?o.abort():"error"===e?r(o.status,o.statusText):r(At[o.status]||o.status,o.statusText,"string"==typeof o.responseText?{text:o.responseText}:void 0,o.getAllResponseHeaders()))}},o.onload=t(),o.onerror=t("error"),t=jt[s]=t("abort");try{o.send(e.hasContent&&e.data||null)}catch(a){if(t)throw a}},abort:function(){t&&t()}}:void 0}),Z.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return Z.globalEval(e),e}}}),Z.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),Z.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=Z("<script>").prop({async:!0,charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),J.head.appendChild(t[0])},abort:function(){n&&n()}}}});var qt=[],Ht=/(=)\?(?=&|$)|\?\?/;Z.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=qt.pop()||Z.expando+"_"+lt++;return this[e]=!0,e}}),Z.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(Ht.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ht.test(t.data)&&"data");return a||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=Z.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ht,"$1"+i):t.jsonp!==!1&&(t.url+=(ct.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||Z.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,qt.push(i)),s&&Z.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),Z.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||J;var r=se.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=Z.buildFragment([e],t,i),i&&i.length&&Z(i).remove(),Z.merge([],r.childNodes))};var Ot=Z.fn.load;Z.fn.load=function(e,t,n){if("string"!=typeof e&&Ot)return Ot.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>=0&&(r=Z.trim(e.slice(a)),e=e.slice(0,a)),Z.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&Z.ajax({url:e,type:i,dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?Z("<div>").append(Z.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){s.each(n,o||[e.responseText,t,e])}),this},Z.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){Z.fn[t]=function(e){return this.on(t,e)}}),Z.expr.filters.animated=function(e){return Z.grep(Z.timers,function(t){return e===t.elem}).length};var Ft=e.document.documentElement;Z.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l,c=Z.css(e,"position"),f=Z(e),p={};"static"===c&&(e.style.position="relative"),a=f.offset(),o=Z.css(e,"top"),u=Z.css(e,"left"),l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1,l?(r=f.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),Z.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+i),"using"in t?t.using.call(e,p):f.css(p)}},Z.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){Z.offset.setOffset(this,e,t)});var t,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;if(o)return t=o.documentElement,Z.contains(t,r)?(typeof r.getBoundingClientRect!==ke&&(i=r.getBoundingClientRect()),n=I(o),{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}):i},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===Z.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),Z.nodeName(e[0],"html")||(r=e.offset()),r.top+=Z.css(e[0],"borderTopWidth",!0),r.left+=Z.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-Z.css(n,"marginTop",!0),left:t.left-r.left-Z.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||Ft;e&&!Z.nodeName(e,"html")&&"static"===Z.css(e,"position");)e=e.offsetParent;return e||Ft})}}),Z.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,n){var r="pageYOffset"===n;Z.fn[t]=function(i){return me(this,function(t,i,o){var s=I(t);return void 0===o?s?s[n]:t[i]:void(s?s.scrollTo(r?e.pageXOffset:o,r?o:e.pageYOffset):t[i]=o)},t,i,arguments.length,null)}}),Z.each(["top","left"],function(e,t){Z.cssHooks[t]=T(Q.pixelPosition,function(e,n){return n?(n=w(e,t),Be.test(n)?Z(e).position()[t]+"px":n):void 0})}),Z.each({Height:"height",Width:"width"},function(e,t){Z.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){Z.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return me(this,function(t,n,r){var i;return Z.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?Z.css(t,n,s):Z.style(t,n,r,s)},t,o?r:void 0,o,null)}})}),Z.fn.size=function(){return this.length},Z.fn.andSelf=Z.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return Z});var Pt=e.jQuery,Rt=e.$;return Z.noConflict=function(t){return e.$===Z&&(e.$=Rt),t&&e.jQuery===Z&&(e.jQuery=Pt),Z},typeof t===ke&&(e.jQuery=e.$=Z),Z});
(function(){"use strict";function e(e){return"function"==typeof e||"object"==typeof e&&null!==e}function t(e){return"function"==typeof e}function r(e){return"object"==typeof e&&null!==e}function n(){}function o(e,t){for(var r=0,n=e.length;n>r;r++)if(e[r]===t)return r;return-1}function i(e){var t=e._promiseCallbacks;return t||(t=e._promiseCallbacks={}),t}function s(e,t){return"onerror"===e?void Pe.on("error",t):2!==arguments.length?Pe[e]:void(Pe[e]=t)}function a(){setTimeout(function(){for(var e,t=0;t<Be.length;t++){e=Be[t];var r=e.payload;r.guid=r.key+r.id,r.childGuid=r.key+r.childId,r.error&&(r.stack=r.error.stack),Pe.trigger(e.name,e.payload)}Be.length=0},50)}function c(e,t,r){1===Be.push({name:e,payload:{key:t._guidKey,id:t._id,eventName:e,detail:t._result,childId:r&&r._id,label:t._label,timeStamp:ve(),error:Pe["instrument-with-stack"]?new Error(t._label):null}})&&a()}function h(){return new TypeError("A promises callback cannot return that same promise.")}function p(){}function u(e){try{return e.then}catch(t){return xe.error=t,xe}}function l(e,t,r,n){try{e.call(t,r,n)}catch(o){return o}}function d(e,t,r){Pe.async(function(e){var n=!1,o=l(r,t,function(r){n||(n=!0,t!==r?m(e,r):v(e,r))},function(t){n||(n=!0,E(e,t))},"Settle: "+(e._label||" unknown promise"));!n&&o&&(n=!0,E(e,o))},e)}function f(e,t){t._state===Je?v(e,t._result):t._state===we?(t._onError=null,E(e,t._result)):S(t,void 0,function(r){t!==r?m(e,r):v(e,r)},function(t){E(e,t)})}function g(e,r){if(r.constructor===e.constructor)f(e,r);else{var n=u(r);n===xe?E(e,xe.error):void 0===n?v(e,r):t(n)?d(e,r,n):v(e,r)}}function m(t,r){t===r?v(t,r):e(r)?g(t,r):v(t,r)}function y(e){e._onError&&e._onError(e._result),P(e)}function v(e,t){e._state===be&&(e._result=t,e._state=Je,0===e._subscribers.length?Pe.instrument&&Ue("fulfilled",e):Pe.async(P,e))}function E(e,t){e._state===be&&(e._state=we,e._result=t,Pe.async(y,e))}function S(e,t,r,n){var o=e._subscribers,i=o.length;e._onError=null,o[i]=t,o[i+Je]=r,o[i+we]=n,0===i&&e._state&&Pe.async(P,e)}function P(e){var t=e._subscribers,r=e._state;if(Pe.instrument&&Ue(r===Je?"fulfilled":"rejected",e),0!==t.length){for(var n,o,i=e._result,s=0;s<t.length;s+=3)n=t[s],o=t[s+r],n?b(r,n,o,i):o(i);e._subscribers.length=0}}function B(){this.error=null}function U(e,t){try{return e(t)}catch(r){return Re.error=r,Re}}function b(e,r,n,o){var i,s,a,c,p=t(n);if(p){if(i=U(n,o),i===Re?(c=!0,s=i.error,i=null):a=!0,r===i)return void E(r,h())}else i=o,a=!0;r._state!==be||(p&&a?m(r,i):c?E(r,s):e===Je?v(r,i):e===we&&E(r,i))}function J(e,t){var r=!1;try{t(function(t){r||(r=!0,m(e,t))},function(t){r||(r=!0,E(e,t))})}catch(n){E(e,n)}}function w(e,t,r){return e===Je?{state:"fulfilled",value:r}:{state:"rejected",reason:r}}function x(e,t,r,n){var o=this;o._instanceConstructor=e,o.promise=new e(p,n),o._abortOnReject=r,o._validateInput(t)?(o._input=t,o.length=t.length,o._remaining=t.length,o._init(),0===o.length?v(o.promise,o._result):(o.length=o.length||0,o._enumerate(),0===o._remaining&&v(o.promise,o._result))):E(o.promise,o._validationError())}function R(e,t){return new Ce(this,e,!0,t).promise}function C(e,t){function r(e){m(i,e)}function n(e){E(i,e)}var o=this,i=new o(p,t);if(!ye(e))return E(i,new TypeError("You must pass an array to race.")),i;for(var s=e.length,a=0;i._state===be&&s>a;a++)S(o.resolve(e[a]),void 0,r,n);return i}function k(e,t){var r=this;if(e&&"object"==typeof e&&e.constructor===r)return e;var n=new r(p,t);return m(n,e),n}function _(e,t){var r=this,n=new r(p,t);return E(n,e),n}function L(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function T(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function N(e,r){var n=this;n._id=Ie++,n._label=r,n._state=void 0,n._result=void 0,n._subscribers=[],Pe.instrument&&Ue("created",n),p!==e&&(t(e)||L(),n instanceof N||T(),J(n,e))}function I(e,t,r){this._superConstructor(e,t,!1,r)}function F(e,t){return new I(Fe,e,t).promise}function O(e,t){return Fe.all(e,t)}function A(e,t){Ke[je]=e,Ke[je+1]=t,je+=2,2===je&&Ae()}function M(){var e=process.nextTick,t=process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);return Array.isArray(t)&&"0"===t[1]&&"10"===t[2]&&(e=setImmediate),function(){e(V)}}function q(){return function(){Oe(V)}}function j(){var e=0,t=new ze(V),r=document.createTextNode("");return t.observe(r,{characterData:!0}),function(){r.data=e=++e%2}}function W(){var e=new MessageChannel;return e.port1.onmessage=V,function(){e.port2.postMessage(0)}}function D(){return function(){setTimeout(V,1)}}function V(){for(var e=0;je>e;e+=2){var t=Ke[e],r=Ke[e+1];t(r),Ke[e]=void 0,Ke[e+1]=void 0}je=0}function z(){try{var e=require,t=e("vertx");return Oe=t.runOnLoop||t.runOnContext,q()}catch(r){return D()}}function H(e){var t={};return t.promise=new Fe(function(e,r){t.resolve=e,t.reject=r},e),t}function X(e,r,n){return Fe.all(e,n).then(function(e){if(!t(r))throw new TypeError("You must pass a function as filter's second argument.");for(var o=e.length,i=new Array(o),s=0;o>s;s++)i[s]=r(e[s]);return Fe.all(i,n).then(function(t){for(var r=new Array(o),n=0,i=0;o>i;i++)t[i]&&(r[n]=e[i],n++);return r.length=n,r})})}function K(e,t,r){this._superConstructor(e,t,!0,r)}function Q(e,t,r){this._superConstructor(e,t,!1,r)}function G(e,t){return new Q(Fe,e,t).promise}function Y(e,t){return new Ye(Fe,e,t).promise}function $(e,r,n){return Fe.all(e,n).then(function(e){if(!t(r))throw new TypeError("You must pass a function as map's second argument.");for(var o=e.length,i=new Array(o),s=0;o>s;s++)i[s]=r(e[s]);return Fe.all(i,n)})}function Z(){this.value=void 0}function ee(e){try{return e.then}catch(t){return rt.value=t,rt}}function te(e,t,r){try{e.apply(t,r)}catch(n){return rt.value=n,rt}}function re(e,t){for(var r,n,o={},i=e.length,s=new Array(i),a=0;i>a;a++)s[a]=e[a];for(n=0;n<t.length;n++)r=t[n],o[r]=s[n+1];return o}function ne(e){for(var t=e.length,r=new Array(t-1),n=1;t>n;n++)r[n-1]=e[n];return r}function oe(e,t){return{then:function(r,n){return e.call(t,r,n)}}}function ie(e,t){var r=function(){for(var r,n=this,o=arguments.length,i=new Array(o+1),s=!1,a=0;o>a;++a){if(r=arguments[a],!s){if(s=ce(r),s===nt){var c=new Fe(p);return E(c,nt.value),c}s&&s!==!0&&(r=oe(s,r))}i[a]=r}var h=new Fe(p);return i[o]=function(e,r){e?E(h,e):void 0===t?m(h,r):t===!0?m(h,ne(arguments)):ye(t)?m(h,re(arguments,t)):m(h,r)},s?ae(h,i,e,n):se(h,i,e,n)};return r.__proto__=e,r}function se(e,t,r,n){var o=te(r,n,t);return o===rt&&E(e,o.value),e}function ae(e,t,r,n){return Fe.all(t).then(function(t){var o=te(r,n,t);return o===rt&&E(e,o.value),e})}function ce(e){return e&&"object"==typeof e?e.constructor===Fe?!0:ee(e):!1}function he(e,t){return Fe.race(e,t)}function pe(e,t){return Fe.reject(e,t)}function ue(e,t){return Fe.resolve(e,t)}function le(e){throw setTimeout(function(){throw e}),e}function de(e,t){Pe.async(e,t)}function fe(){Pe.on.apply(Pe,arguments)}function ge(){Pe.off.apply(Pe,arguments)}var me;me=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)};var ye=me,ve=Date.now||function(){return(new Date).getTime()},Ee=Object.create||function(e){if(arguments.length>1)throw new Error("Second argument not supported");if("object"!=typeof e)throw new TypeError("Argument must be an object");return n.prototype=e,new n},Se={mixin:function(e){return e.on=this.on,e.off=this.off,e.trigger=this.trigger,e._promiseCallbacks=void 0,e},on:function(e,t){if("function"!=typeof t)throw new TypeError("Callback must be a function");var r,n=i(this);r=n[e],r||(r=n[e]=[]),-1===o(r,t)&&r.push(t)},off:function(e,t){var r,n,s=i(this);return t?(r=s[e],n=o(r,t),void(-1!==n&&r.splice(n,1))):void(s[e]=[])},trigger:function(e,t,r){var n,o,s=i(this);if(n=s[e])for(var a=0;a<n.length;a++)(o=n[a])(t,r)}},Pe={instrument:!1};Se.mixin(Pe);var Be=[],Ue=c,be=void 0,Je=1,we=2,xe=new B,Re=new B,Ce=x;x.prototype._validateInput=function(e){return ye(e)},x.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")},x.prototype._init=function(){this._result=new Array(this.length)},x.prototype._enumerate=function(){for(var e=this,t=e.length,r=e.promise,n=e._input,o=0;r._state===be&&t>o;o++)e._eachEntry(n[o],o)},x.prototype._eachEntry=function(e,t){var n=this,o=n._instanceConstructor;r(e)?e.constructor===o&&e._state!==be?(e._onError=null,n._settledAt(e._state,t,e._result)):n._willSettleAt(o.resolve(e),t):(n._remaining--,n._result[t]=n._makeResult(Je,t,e))},x.prototype._settledAt=function(e,t,r){var n=this,o=n.promise;o._state===be&&(n._remaining--,n._abortOnReject&&e===we?E(o,r):n._result[t]=n._makeResult(e,t,r)),0===n._remaining&&v(o,n._result)},x.prototype._makeResult=function(e,t,r){return r},x.prototype._willSettleAt=function(e,t){var r=this;S(e,void 0,function(e){r._settledAt(Je,t,e)},function(e){r._settledAt(we,t,e)})};var ke=R,_e=C,Le=k,Te=_,Ne="rsvp_"+ve()+"-",Ie=0,Fe=N;N.cast=Le,N.all=ke,N.race=_e,N.resolve=Le,N.reject=Te,N.prototype={constructor:N,_guidKey:Ne,_onError:function(e){var t=this;Pe.after(function(){t._onError&&Pe.trigger("error",e,t._label)})},then:function(e,t,r){var n=this,o=n._state;if(o===Je&&!e||o===we&&!t)return Pe.instrument&&Ue("chained",n,n),n;n._onError=null;var i=new n.constructor(p,r),s=n._result;if(Pe.instrument&&Ue("chained",n,i),o){var a=arguments[o-1];Pe.async(function(){b(o,i,a,s)})}else S(n,i,e,t);return i},"catch":function(e,t){return this.then(void 0,e,t)},"finally":function(e,t){var r=this,n=r.constructor;return r.then(function(t){return n.resolve(e()).then(function(){return t})},function(t){return n.resolve(e()).then(function(){throw t})},t)}},I.prototype=Ee(Ce.prototype),I.prototype._superConstructor=Ce,I.prototype._makeResult=w,I.prototype._validationError=function(){return new Error("allSettled must be called with an array")};var Oe,Ae,Me=F,qe=O,je=0,We=({}.toString,A),De="undefined"!=typeof window?window:void 0,Ve=De||{},ze=Ve.MutationObserver||Ve.WebKitMutationObserver,He="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),Xe="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,Ke=new Array(1e3);Ae=He?M():ze?j():Xe?W():void 0===De&&"function"==typeof require?z():D();var Qe=H,Ge=X,Ye=K;K.prototype=Ee(Ce.prototype),K.prototype._superConstructor=Ce,K.prototype._init=function(){this._result={}},K.prototype._validateInput=function(e){return e&&"object"==typeof e},K.prototype._validationError=function(){return new Error("Promise.hash must be called with an object")},K.prototype._enumerate=function(){var e=this,t=e.promise,r=e._input,n=[];for(var o in r)t._state===be&&Object.prototype.hasOwnProperty.call(r,o)&&n.push({position:o,entry:r[o]});var i=n.length;e._remaining=i;for(var s,a=0;t._state===be&&i>a;a++)s=n[a],e._eachEntry(s.entry,s.position)},Q.prototype=Ee(Ye.prototype),Q.prototype._superConstructor=Ce,Q.prototype._makeResult=w,Q.prototype._validationError=function(){return new Error("hashSettled must be called with an object")};var $e,Ze=G,et=Y,tt=$,rt=new Z,nt=new Z,ot=ie;if("object"==typeof self)$e=self;else{if("object"!=typeof global)throw new Error("no global: `self` or `global` found");$e=global}var it=$e,st=he,at=pe,ct=ue,ht=le;Pe.async=We,Pe.after=function(e){setTimeout(e,0)};if("undefined"!=typeof window&&"object"==typeof window.__PROMISE_INSTRUMENTATION__){var pt=window.__PROMISE_INSTRUMENTATION__;s("instrument",!0);for(var ut in pt)pt.hasOwnProperty(ut)&&fe(ut,pt[ut])}var lt={race:st,Promise:Fe,allSettled:Me,hash:et,hashSettled:Ze,denodeify:ot,on:fe,off:ge,map:tt,filter:Ge,resolve:ct,reject:at,all:qe,rethrow:ht,defer:Qe,EventTarget:Se,configure:s,async:de};"function"==typeof define&&define.amd?define(function(){return lt}):"undefined"!=typeof module&&module.exports?module.exports=lt:"undefined"!=typeof it&&(it.RSVP=lt)}).call(this);var EPUBJS=EPUBJS||{};EPUBJS.VERSION="0.2.13",EPUBJS.plugins=EPUBJS.plugins||{},EPUBJS.filePath=EPUBJS.filePath||"/epubjs/",EPUBJS.Render={},function(e){var t=(e.ePub||{},e.ePub=function(){var e,t;return"undefined"!=typeof arguments[0]&&("string"==typeof arguments[0]||arguments[0]instanceof ArrayBuffer)&&(e=arguments[0],arguments[1]&&"object"==typeof arguments[1]?(t=arguments[1],t.bookPath=e):t={bookPath:e}),!arguments[0]||"object"!=typeof arguments[0]||arguments[0]instanceof ArrayBuffer||(t=arguments[0]),new EPUBJS.Book(t)});"function"==typeof define&&define.amd?define(["rsvp"],function(){return t}):"undefined"!=typeof module&&module.exports&&(module.exports=t)}(window),EPUBJS.Book=function(e){this.settings=EPUBJS.core.defaults(e||{},{bookPath:void 0,bookKey:void 0,packageUrl:void 0,storage:!1,fromStorage:!1,saved:!1,online:!0,contained:!1,width:void 0,height:void 0,layoutOveride:void 0,orientation:void 0,minSpreadWidth:768,gap:"auto",version:1,restore:!1,reload:!1,"goto":!1,styles:{},headTags:{},withCredentials:!1,render_method:"Iframe"}),this.settings.EPUBJSVERSION=EPUBJS.VERSION,this.spinePos=0,this.stored=!1,this.online=this.settings.online||navigator.onLine,this.networkListeners(),this.ready={manifest:new RSVP.defer,spine:new RSVP.defer,metadata:new RSVP.defer,cover:new RSVP.defer,toc:new RSVP.defer,pageList:new RSVP.defer},this.readyPromises=[this.ready.manifest.promise,this.ready.spine.promise,this.ready.metadata.promise,this.ready.cover.promise,this.ready.toc.promise],this.pageList=[],this.pagination=new EPUBJS.Pagination,this.pageListReady=this.ready.pageList.promise,this.ready.all=RSVP.all(this.readyPromises),this.ready.all.then(this._ready.bind(this)),this.isRendered=!1,this._q=EPUBJS.core.queue(this),this._rendering=!1,this._displayQ=EPUBJS.core.queue(this),this._moving=!1,this._gotoQ=EPUBJS.core.queue(this),this.renderer=new EPUBJS.Renderer(this.settings.render_method),this.renderer.setMinSpreadWidth(this.settings.minSpreadWidth),this.renderer.setGap(this.settings.gap),this.listenToRenderer(this.renderer),this.defer_opened=new RSVP.defer,this.opened=this.defer_opened.promise,this.store=!1,this.settings.storage!==!1&&this.fromStorage(!0),("string"==typeof this.settings.bookPath||this.settings.bookPath instanceof ArrayBuffer)&&this.open(this.settings.bookPath,this.settings.reload),window.addEventListener("beforeunload",this.unload.bind(this),!1)},EPUBJS.Book.prototype.open=function(e,t){var r,n=this,o=new RSVP.defer;return this.settings.bookPath=e,this.settings.contained||this.isContained(e)?(this.settings.contained=this.contained=!0,this.bookUrl="",r=this.unarchive(e).then(function(){return n.loadPackage()})):(this.bookUrl=this.urlFrom(e),r=this.loadPackage()),this.settings.restore&&!t&&localStorage?r.then(function(e){var t=n.packageIdentifier(e),r=n.restore(t);r||n.unpack(e),o.resolve(),n.defer_opened.resolve()}):r.then(function(e){n.unpack(e),o.resolve(),n.defer_opened.resolve()}),this._registerReplacements(this.renderer),o.promise},EPUBJS.Book.prototype.loadPackage=function(e){var t,r=this,n=new EPUBJS.Parser,o=e||"META-INF/container.xml";return t=this.settings.packageUrl?r.loadXml(r.settings.packageUrl):r.loadXml(r.bookUrl+o).then(function(e){return n.container(e)}).then(function(e){return r.settings.contentsPath=r.bookUrl+e.basePath,r.settings.packageUrl=r.bookUrl+e.packagePath,r.settings.encoding=e.encoding,r.loadXml(r.settings.packageUrl)}),t["catch"](function(e){console.error("Could not load book at: "+o),r.trigger("book:loadFailed",o)}),t},EPUBJS.Book.prototype.packageIdentifier=function(e){var t=new EPUBJS.Parser;return t.identifier(e)},EPUBJS.Book.prototype.unpack=function(e){var t=this,r=new EPUBJS.Parser;t.contents=r.packageContents(e,t.settings.contentsPath),t.manifest=t.contents.manifest,t.spine=t.contents.spine,t.spineIndexByURL=t.contents.spineIndexByURL,t.metadata=t.contents.metadata,t.settings.bookKey||(t.settings.bookKey=t.generateBookKey(t.metadata.identifier)),t.globalLayoutProperties=t.parseLayoutProperties(t.metadata),t.contents.coverPath&&(t.cover=t.contents.cover=t.settings.contentsPath+t.contents.coverPath),t.spineNodeIndex=t.contents.spineNodeIndex,t.ready.manifest.resolve(t.contents.manifest),t.ready.spine.resolve(t.contents.spine),t.ready.metadata.resolve(t.contents.metadata),t.ready.cover.resolve(t.contents.cover),t.locations=new EPUBJS.Locations(t.spine,t.store,t.settings.withCredentials),t.contents.navPath?(t.settings.navUrl=t.settings.contentsPath+t.contents.navPath,t.loadXml(t.settings.navUrl).then(function(e){return r.nav(e,t.spineIndexByURL,t.spine)}).then(function(e){t.toc=t.contents.toc=e,t.ready.toc.resolve(t.contents.toc)},function(e){t.ready.toc.resolve(!1)}),t.loadXml(t.settings.navUrl).then(function(e){return r.pageList(e,t.spineIndexByURL,t.spine)}).then(function(e){var r=new EPUBJS.EpubCFI,n=0;0!==e.length&&(t.pageList=t.contents.pageList=e,t.pageList.forEach(function(e){e.cfi||(n+=1,r.generateCfiFromHref(e.href,t).then(function(r){e.cfi=r,e.packageUrl=t.settings.packageUrl,n-=1,0===n&&(t.pagination.process(t.pageList),t.ready.pageList.resolve(t.pageList))}))}),n||(t.pagination.process(t.pageList),t.ready.pageList.resolve(t.pageList)))},function(e){t.ready.pageList.resolve([])})):t.contents.tocPath?(t.settings.tocUrl=t.settings.contentsPath+t.contents.tocPath,t.loadXml(t.settings.tocUrl).then(function(e){return r.toc(e,t.spineIndexByURL,t.spine)},function(e){console.error(e)}).then(function(e){t.toc=t.contents.toc=e,t.ready.toc.resolve(t.contents.toc)},function(e){t.ready.toc.resolve(!1)})):t.ready.toc.resolve(!1)},EPUBJS.Book.prototype.createHiddenRender=function(e,t,r){var n,o,i=this.element.getBoundingClientRect(),s=t||this.settings.width||i.width,a=r||this.settings.height||i.height;return e.setMinSpreadWidth(this.settings.minSpreadWidth),e.setGap(this.settings.gap),this._registerReplacements(e),this.settings.forceSingle&&e.forceSingle(!0),n=document.createElement("div"),n.style.visibility="hidden",n.style.overflow="hidden",n.style.width="0",n.style.height="0",this.element.appendChild(n),o=document.createElement("div"),o.style.visibility="hidden",o.style.overflow="hidden",o.style.width=s+"px",o.style.height=a+"px",n.appendChild(o),e.initialize(o),n},EPUBJS.Book.prototype.generatePageList=function(e,t){var r=[],n=new EPUBJS.Renderer(this.settings.render_method,!1),o=this.createHiddenRender(n,e,t),i=new RSVP.defer,s=-1,a=this.spine.length,c=0,h=function(e){var t,o=s+1,i=e||new RSVP.defer;return o>=a?i.resolve():(s=o,t=new EPUBJS.Chapter(this.spine[s],this.store),n.displayChapter(t,this.globalLayoutProperties).then(function(e){n.pageMap.forEach(function(e){c+=1,r.push({cfi:e.start,page:c})}),n.pageMap.length%2>0&&n.spreads&&(c+=1,r.push({cfi:n.pageMap[n.pageMap.length-1].end,page:c})),setTimeout(function(){h(i)},1)})),i.promise}.bind(this);h().then(function(){n.remove(),this.element.removeChild(o),i.resolve(r)}.bind(this));return i.promise},EPUBJS.Book.prototype.generatePagination=function(e,t){var r=this,n=new RSVP.defer;return this.ready.spine.promise.then(function(){r.generatePageList(e,t).then(function(e){r.pageList=r.contents.pageList=e,r.pagination.process(e),r.ready.pageList.resolve(r.pageList),n.resolve(r.pageList)})}),n.promise},EPUBJS.Book.prototype.loadPagination=function(e){var t=JSON.parse(e);return t&&t.length&&(this.pageList=t,this.pagination.process(this.pageList),this.ready.pageList.resolve(this.pageList)),this.pageList},EPUBJS.Book.prototype.getPageList=function(){return this.ready.pageList.promise},EPUBJS.Book.prototype.getMetadata=function(){return this.ready.metadata.promise},EPUBJS.Book.prototype.getToc=function(){return this.ready.toc.promise},EPUBJS.Book.prototype.networkListeners=function(){var e=this;window.addEventListener("offline",function(t){e.online=!1,e.settings.storage&&e.fromStorage(!0),e.trigger("book:offline")},!1),window.addEventListener("online",function(t){e.online=!0,e.settings.storage&&e.fromStorage(!1),e.trigger("book:online")},!1)},EPUBJS.Book.prototype.listenToRenderer=function(e){var t=this;e.Events.forEach(function(r){e.on(r,function(e){t.trigger(r,e)})}),e.on("renderer:visibleRangeChanged",function(e){var t,r,n,o=[];this.pageList.length>0&&(t=this.pagination.pageFromCfi(e.start),n=this.pagination.percentageFromPage(t),o.push(t),e.end&&(r=this.pagination.pageFromCfi(e.end),o.push(r)),this.trigger("book:pageChanged",{anchorPage:t,percentage:n,pageRange:o}))}.bind(this)),e.on("render:loaded",this.loadChange.bind(this))},EPUBJS.Book.prototype.loadChange=function(e){var t,r,n=EPUBJS.core.uri(e),o=EPUBJS.core.uri(this.currentChapter.absolute);n.path!=o.path?(console.warn("Miss Match",n.path,this.currentChapter.absolute),t=this.spineIndexByURL[n.filename],r=new EPUBJS.Chapter(this.spine[t],this.store),this.currentChapter=r,this.renderer.currentChapter=r,this.renderer.afterLoad(this.renderer.render.docEl),this.renderer.beforeDisplay(function(){this.renderer.afterDisplay()}.bind(this))):this._rendering||this.renderer.reformat()},EPUBJS.Book.prototype.unlistenToRenderer=function(e){e.Events.forEach(function(t){e.off(t)})},EPUBJS.Book.prototype.coverUrl=function(){var e=this.ready.cover.promise.then(function(e){return this.settings.fromStorage?this.store.getUrl(this.contents.cover):this.settings.contained?this.zip.getUrl(this.contents.cover):this.contents.cover}.bind(this));return e.then(function(e){this.cover=e}.bind(this)),e},EPUBJS.Book.prototype.loadXml=function(e){return this.settings.fromStorage?this.store.getXml(e,this.settings.encoding):this.settings.contained?this.zip.getXml(e,this.settings.encoding):EPUBJS.core.request(e,"xml",this.settings.withCredentials)},EPUBJS.Book.prototype.urlFrom=function(e){var t,r=EPUBJS.core.uri(e),n=r.protocol,o="/"==r.path[0],i=window.location,s=i.origin||i.protocol+"//"+i.host,a=document.getElementsByTagName("base");return a.length&&(t=a[0].href),r.protocol?r.origin+r.path:!n&&o?(t||s)+r.path:n||o?void 0:EPUBJS.core.resolveUrl(t||i.pathname,r.path)},EPUBJS.Book.prototype.unarchive=function(e){return this.zip=new EPUBJS.Unarchiver,this.store=this.zip,this.zip.open(e)},EPUBJS.Book.prototype.isContained=function(e){if(e instanceof ArrayBuffer)return!0;var t=EPUBJS.core.uri(e);return!t.extension||"epub"!=t.extension&&"zip"!=t.extension?!1:!0},EPUBJS.Book.prototype.isSaved=function(e){var t;return localStorage?(t=localStorage.getItem(e),localStorage&&null!==t?!0:!1):!1},EPUBJS.Book.prototype.generateBookKey=function(e){return"epubjs:"+EPUBJS.VERSION+":"+window.location.host+":"+e},EPUBJS.Book.prototype.saveContents=function(){return localStorage?void localStorage.setItem(this.settings.bookKey,JSON.stringify(this.contents)):!1},EPUBJS.Book.prototype.removeSavedContents=function(){return localStorage?void localStorage.removeItem(this.settings.bookKey):!1},EPUBJS.Book.prototype.renderTo=function(e){var t,r=this;if(EPUBJS.core.isElement(e))this.element=e;else{if("string"!=typeof e)return void console.error("Not an Element");this.element=EPUBJS.core.getEl(e)}return t=this.opened.then(function(){return r.renderer.initialize(r.element,r.settings.width,r.settings.height),r.metadata.direction&&r.renderer.setDirection(r.metadata.direction),r._rendered(),r.startDisplay()})},EPUBJS.Book.prototype.startDisplay=function(){var e;return e=this.settings["goto"]?this["goto"](this.settings["goto"]):this.settings.previousLocationCfi?this.gotoCfi(this.settings.previousLocationCfi):this.displayChapter(this.spinePos)},EPUBJS.Book.prototype.restore=function(e){var t,r=this,n=["manifest","spine","metadata","cover","toc","spineNodeIndex","spineIndexByURL","globalLayoutProperties"],o=!1,i=this.generateBookKey(e),s=localStorage.getItem(i),a=n.length;if(this.settings.clearSaved&&(o=!0),!o&&"undefined"!=s&&null!==s)for(r.contents=JSON.parse(s),t=0;a>t;t++){var c=n[t];if(!r.contents[c]){o=!0;break}r[c]=r.contents[c]}return!o&&s&&this.contents&&this.settings.contentsPath?(this.settings.bookKey=i,this.ready.manifest.resolve(this.manifest),this.ready.spine.resolve(this.spine),this.ready.metadata.resolve(this.metadata),this.ready.cover.resolve(this.cover),this.ready.toc.resolve(this.toc),!0):!1},EPUBJS.Book.prototype.displayChapter=function(e,t,r){var n,o,i,s,a=this,c=r||new RSVP.defer;return this.isRendered?this._rendering||this._rendering?(this._displayQ.enqueue("displayChapter",[e,t,c]),c.promise):(EPUBJS.core.isNumber(e)?i=e:(o=new EPUBJS.EpubCFI(e),i=o.spinePos),(0>i||i>=this.spine.length)&&(console.warn("Not A Valid Location"),i=0,t=!1,o=!1),s=new EPUBJS.Chapter(this.spine[i],this.store),this._rendering=!0,this._needsAssetReplacement()&&s.registerHook("beforeChapterRender",[EPUBJS.replace.head,EPUBJS.replace.resources,EPUBJS.replace.svg],!0),a.currentChapter=s,n=a.renderer.displayChapter(s,this.globalLayoutProperties),o?a.renderer.gotoCfi(o):t&&a.renderer.lastPage(),n.then(function(e){a.spinePos=i,c.resolve(a.renderer),a.settings.fromStorage===!1&&a.settings.contained===!1&&a.preloadNextChapter(),a._rendering=!1,a._displayQ.dequeue(),0===a._displayQ.length()&&a._gotoQ.dequeue()},function(e){console.error("Could not load Chapter: "+s.absolute,e),a.trigger("book:chapterLoadFailed",s.absolute),a._rendering=!1,c.reject(e)}),c.promise):(this._q.enqueue("displayChapter",arguments),c.reject({message:"Rendering",stack:(new Error).stack}),c.promise)},EPUBJS.Book.prototype.nextPage=function(){var e;return this.isRendered?(e=this.renderer.nextPage(),e?void 0:this.nextChapter()):this._q.enqueue("nextPage",arguments)},EPUBJS.Book.prototype.prevPage=function(){var e;return this.isRendered?(e=this.renderer.prevPage(),e?void 0:this.prevChapter()):this._q.enqueue("prevPage",arguments)},EPUBJS.Book.prototype.nextChapter=function(){var e;if(this.spinePos<this.spine.length-1){for(e=this.spinePos+1;this.spine[e]&&this.spine[e].linear&&"no"==this.spine[e].linear;)e++;if(e<this.spine.length)return this.displayChapter(e);this.trigger("book:atEnd")}else this.trigger("book:atEnd")},EPUBJS.Book.prototype.prevChapter=function(){var e;if(this.spinePos>0){for(e=this.spinePos-1;this.spine[e]&&this.spine[e].linear&&"no"==this.spine[e].linear;)e--;if(e>=0)return this.displayChapter(e,!0);this.trigger("book:atStart")}else this.trigger("book:atStart")},EPUBJS.Book.prototype.getCurrentLocationCfi=function(){return this.isRendered?this.renderer.currentLocationCfi:!1},EPUBJS.Book.prototype["goto"]=function(e){return 0===e.indexOf("epubcfi(")?this.gotoCfi(e):e.indexOf("%")===e.length-1?this.gotoPercentage(parseInt(e.substring(0,e.length-1))/100):"number"==typeof e||isNaN(e)===!1?this.gotoPage(e):this.gotoHref(e)},EPUBJS.Book.prototype.gotoCfi=function(e,t){var r,n,o,i,s,a=t||new RSVP.defer;return this.isRendered?this._moving||this._rendering?(console.warn("Renderer is moving"),this._gotoQ.enqueue("gotoCfi",[e,a]),!1):(r=new EPUBJS.EpubCFI(e),n=r.spinePos,-1==n?!1:(o=this.spine[n],i=a.promise,this._moving=!0,this.currentChapter&&this.spinePos===n?(this.renderer.gotoCfi(r),this._moving=!1,a.resolve(this.renderer.currentLocationCfi)):(o&&-1!=n||(n=0,o=this.spine[n]),s=this.displayChapter(e),s.then(function(e){this._moving=!1,a.resolve(e.currentLocationCfi)}.bind(this))),i.then(function(){this._gotoQ.dequeue()}.bind(this)),i)):(console.warn("Not yet Rendered"),this.settings.previousLocationCfi=e,!1)},EPUBJS.Book.prototype.gotoHref=function(e,t){var r,n,o,i,s,a=t||new RSVP.defer;return this.isRendered?this._moving||this._rendering?(this._gotoQ.enqueue("gotoHref",[e,a]),!1):(r=e.split("#"),n=r[0],o=r[1]||!1,i=-1==n.search("://")?n.replace(EPUBJS.core.uri(this.settings.contentsPath).path,""):n.replace(this.settings.contentsPath,""),s=this.spineIndexByURL[i],n||(s=this.currentChapter?this.currentChapter.spinePos:0),"number"!=typeof s?!1:this.currentChapter&&s==this.currentChapter.spinePos?(o?this.renderer.section(o):this.renderer.firstPage(),a.resolve(this.renderer.currentLocationCfi),a.promise.then(function(){this._gotoQ.dequeue()}.bind(this)),a.promise):this.displayChapter(s).then(function(){o&&this.renderer.section(o),a.resolve(this.renderer.currentLocationCfi)}.bind(this))):(this.settings["goto"]=e,!1)},EPUBJS.Book.prototype.gotoPage=function(e){var t=this.pagination.cfiFromPage(e);return this.gotoCfi(t)},EPUBJS.Book.prototype.gotoPercentage=function(e){var t=this.pagination.pageFromPercentage(e);return this.gotoPage(t)},EPUBJS.Book.prototype.preloadNextChapter=function(){var e,t=this.spinePos+1;return t>=this.spine.length?!1:(e=new EPUBJS.Chapter(this.spine[t]),void(e&&EPUBJS.core.request(e.absolute)))},EPUBJS.Book.prototype.storeOffline=function(){var e=this,t=EPUBJS.core.values(this.manifest);return this.store.put(t).then(function(){e.settings.stored=!0,e.trigger("book:stored")})},EPUBJS.Book.prototype.availableOffline=function(){return this.settings.stored>0?!0:!1},EPUBJS.Book.prototype.toStorage=function(){var e=this.settings.bookKey;this.store.isStored(e).then(function(t){return t===!0?(this.settings.stored=!0,!0):this.storeOffline().then(function(){this.store.token(e,!0)}.bind(this))}.bind(this))},EPUBJS.Book.prototype.fromStorage=function(e){[EPUBJS.replace.head,EPUBJS.replace.resources,EPUBJS.replace.svg];this.contained||this.settings.contained||(this.online&&this.opened.then(this.toStorage.bind(this)),this.store&&this.settings.fromStorage&&e===!1?(this.settings.fromStorage=!1,this.store.off("offline"),this.store=!1):this.settings.fromStorage||(this.store=new EPUBJS.Storage(this.settings.credentials),this.store.on("offline",function(e){e?(this.offline=!0,this.settings.fromStorage=!0,this.trigger("book:offline")):(this.offline=!1,this.settings.fromStorage=!1,this.trigger("book:online"))}.bind(this))))},EPUBJS.Book.prototype.setStyle=function(e,t,r){var n=["color","background","background-color"];return this.isRendered?(this.settings.styles[e]=t,this.renderer.setStyle(e,t,r),void(-1===n.indexOf(e)&&this.renderer.reformat())):this._q.enqueue("setStyle",arguments)},EPUBJS.Book.prototype.removeStyle=function(e){return this.isRendered?(this.renderer.removeStyle(e),this.renderer.reformat(),void delete this.settings.styles[e]):this._q.enqueue("removeStyle",arguments)},EPUBJS.Book.prototype.addHeadTag=function(e,t){return this.isRendered?void(this.settings.headTags[e]=t):this._q.enqueue("addHeadTag",arguments)},EPUBJS.Book.prototype.useSpreads=function(e){console.warn("useSpreads is deprecated, use forceSingle or set a layoutOveride instead"),e===!1?this.forceSingle(!0):this.forceSingle(!1)},EPUBJS.Book.prototype.forceSingle=function(e){var t="undefined"==typeof e?!0:e;this.renderer.forceSingle(t),this.settings.forceSingle=t,this.isRendered&&this.renderer.reformat()},EPUBJS.Book.prototype.setMinSpreadWidth=function(e){this.settings.minSpreadWidth=e,this.isRendered&&(this.renderer.setMinSpreadWidth(this.settings.minSpreadWidth),this.renderer.reformat())},EPUBJS.Book.prototype.setGap=function(e){this.settings.gap=e,this.isRendered&&(this.renderer.setGap(this.settings.gap),this.renderer.reformat())},EPUBJS.Book.prototype.chapter=function(e){var t,r,n=this.spineIndexByURL[e];return n&&(t=this.spine[n],r=new EPUBJS.Chapter(t,this.store,this.settings.withCredentials),r.load()),r},EPUBJS.Book.prototype.unload=function(){this.settings.restore&&localStorage&&this.saveContents(),this.unlistenToRenderer(this.renderer),this.trigger("book:unload")},EPUBJS.Book.prototype.destroy=function(){window.removeEventListener("beforeunload",this.unload),this.currentChapter&&this.currentChapter.unload(),this.unload(),this.renderer&&this.renderer.remove()},EPUBJS.Book.prototype._ready=function(){this.trigger("book:ready")},EPUBJS.Book.prototype._rendered=function(e){this.isRendered=!0,this.trigger("book:rendered"),this._q.flush()},EPUBJS.Book.prototype.applyStyles=function(e,t){e.applyStyles(this.settings.styles),t()},EPUBJS.Book.prototype.applyHeadTags=function(e,t){e.applyHeadTags(this.settings.headTags),t()},EPUBJS.Book.prototype._registerReplacements=function(e){e.registerHook("beforeChapterDisplay",this.applyStyles.bind(this,e),!0),e.registerHook("beforeChapterDisplay",this.applyHeadTags.bind(this,e),!0),
e.registerHook("beforeChapterDisplay",EPUBJS.replace.hrefs.bind(this),!0)},EPUBJS.Book.prototype._needsAssetReplacement=function(){return this.settings.fromStorage?!0:this.settings.contained?!0:!1},EPUBJS.Book.prototype.parseLayoutProperties=function(e){var t=this.settings.layoutOveride&&this.settings.layoutOveride.layout||e.layout||"reflowable",r=this.settings.layoutOveride&&this.settings.layoutOveride.spread||e.spread||"auto",n=this.settings.layoutOveride&&this.settings.layoutOveride.orientation||e.orientation||"auto";return{layout:t,spread:r,orientation:n}},RSVP.EventTarget.mixin(EPUBJS.Book.prototype),RSVP.on("error",function(e){console.error(e)}),EPUBJS.Chapter=function(e,t,r){this.href=e.href,this.absolute=e.url,this.id=e.id,this.spinePos=e.index,this.cfiBase=e.cfiBase,this.properties=e.properties,this.manifestProperties=e.manifestProperties,this.linear=e.linear,this.pages=1,this.store=t,this.credentials=r,this.epubcfi=new EPUBJS.EpubCFI,this.deferred=new RSVP.defer,this.loaded=this.deferred.promise,EPUBJS.Hooks.mixin(this),this.getHooks("beforeChapterRender"),this.caches={}},EPUBJS.Chapter.prototype.load=function(e,t){var r,n=e||this.store,o=t||this.credentials;return r=n?n.getXml(this.absolute):EPUBJS.core.request(this.absolute,!1,o),r.then(function(e){this.setDocument(e),this.deferred.resolve(this)}.bind(this)),r},EPUBJS.Chapter.prototype.render=function(e){return this.load().then(function(e){var t=e.querySelector("head"),r=e.createElement("base");return r.setAttribute("href",this.absolute),t.insertBefore(r,t.firstChild),this.contents=e,new RSVP.Promise(function(t,r){this.triggerHooks("beforeChapterRender",function(){t(e)}.bind(this),this)}.bind(this))}.bind(this)).then(function(e){var t=new XMLSerializer,r=t.serializeToString(e);return r}.bind(this))},EPUBJS.Chapter.prototype.url=function(e){var t,r=new RSVP.defer,n=e||this.store,o=this;return n?this.tempUrl?(t=this.tempUrl,r.resolve(t)):n.getUrl(this.absolute).then(function(e){o.tempUrl=e,r.resolve(e)}):(t=this.absolute,r.resolve(t)),r.promise},EPUBJS.Chapter.prototype.setPages=function(e){this.pages=e},EPUBJS.Chapter.prototype.getPages=function(e){return this.pages},EPUBJS.Chapter.prototype.getID=function(){return this.ID},EPUBJS.Chapter.prototype.unload=function(e){this.document=null,this.tempUrl&&e&&(e.revokeUrl(this.tempUrl),this.tempUrl=!1)},EPUBJS.Chapter.prototype.setDocument=function(e){var t=e.namespaceURI;e.doctype;this.document=e.implementation.createDocument(t,null,null),this.contents=this.document.importNode(e.documentElement,!0),this.document.appendChild(this.contents),!this.document.evaluate&&document.evaluate&&(this.document.evaluate=document.evaluate)},EPUBJS.Chapter.prototype.cfiFromRange=function(e){var t,r,n,o,i,s;if(this.document){if("undefined"!=typeof document.evaluate){if(r=EPUBJS.core.getElementXPath(e.startContainer),n=EPUBJS.core.getElementXPath(e.endContainer),o=this.document.evaluate(r,this.document,EPUBJS.core.nsResolver,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue,e.collapsed||(i=this.document.evaluate(n,this.document,EPUBJS.core.nsResolver,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue),t=this.document.createRange(),o)try{t.setStart(o,e.startOffset),!e.collapsed&&i&&t.setEnd(i,e.endOffset)}catch(a){console.log("missed"),o=!1}o||(console.log("not found, try fuzzy match"),cleanStartTextContent=EPUBJS.core.cleanStringForXpath(e.startContainer.textContent),r="//text()[contains(.,"+cleanStartTextContent+")]",o=this.document.evaluate(r,this.document,EPUBJS.core.nsResolver,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue,o&&(t.setStart(o,e.startOffset),e.collapsed||(s=EPUBJS.core.cleanStringForXpath(e.endContainer.textContent),n="//text()[contains(.,"+s+")]",i=this.document.evaluate(n,this.document,EPUBJS.core.nsResolver,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue,i&&t.setEnd(i,e.endOffset))))}else t=e;return this.epubcfi.generateCfiFromRange(t,this.cfiBase)}},EPUBJS.Chapter.prototype.find=function(e){var t=this,r=[],n=e.toLowerCase(),o=function(e){for(var o,i,s,a=e.textContent.toLowerCase(),c=t.document.createRange(),h=-1,p=150;-1!=i;)i=a.indexOf(n,h+1),-1!=i&&(c=t.document.createRange(),c.setStart(e,i),c.setEnd(e,i+n.length),o=t.cfiFromRange(c),e.textContent.length<p?s=e.textContent:(s=e.textContent.substring(i-p/2,i+p/2),s="..."+s+"..."),r.push({cfi:o,excerpt:s})),h=i};return this.textSprint(this.document,function(e){o(e)}),r},EPUBJS.Chapter.prototype.textSprint=function(e,t){for(var r,n=document.createTreeWalker(e,NodeFilter.SHOW_TEXT,{acceptNode:function(e){return e.data&&!/^\s*$/.test(e.data)?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_REJECT}},!1);r=n.nextNode();)t(r)},EPUBJS.Chapter.prototype.replace=function(e,t,r,n){var o=this.contents.querySelectorAll(e),i=Array.prototype.slice.call(o),s=i.length;return 0===s?void r(!1):void i.forEach(function(e){var o=!1,i=function(e,t){o===!1&&(s--,n&&n(e,t,s),0>=s&&r&&r(!0),o=!0)};t(e,i)}.bind(this))},EPUBJS.Chapter.prototype.replaceWithStored=function(e,t,r,n){var o,i={},s=this.store,a=this.caches[e],c=EPUBJS.core.uri(this.absolute),h=c.base,p=t,u=5,l=function(e,t,r){i[t]=e},d=function(e){n&&n(),EPUBJS.core.values(o).forEach(function(e){s.revokeUrl(e)}),a=i};s&&(a||(a={}),o=EPUBJS.core.clone(a),this.replace(e,function(t,n){var a=t.getAttribute(p),c=EPUBJS.core.resolveUrl(h,a),l=function(r){var o;t.onload=function(){clearTimeout(o),n(r,c)},t.onerror=function(e){clearTimeout(o),n(r,c),console.error(e)},"svg image"==e&&t.setAttribute("externalResourcesRequired","true"),"link[href]"==e&&"stylesheet"!==t.getAttribute("rel")?n(r,c):o=setTimeout(function(){n(r,c)},u),r&&t.setAttribute(p,r)};c in o?(l(o[c]),i[c]=o[c],delete o[c]):r(s,c,l,t)},d,l))};var EPUBJS=EPUBJS||{};EPUBJS.core={},EPUBJS.core.getEl=function(e){return document.getElementById(e)},EPUBJS.core.getEls=function(e){return document.getElementsByClassName(e)},EPUBJS.core.request=function(e,t,r){var n,o=window.URL,i=o?"blob":"arraybuffer",s=new RSVP.defer,a=new XMLHttpRequest,c=XMLHttpRequest.prototype,h=function(){var e;this.readyState==this.DONE&&(200===this.status||0===this.status&&this.response?(e="xml"==t?this.responseXML?this.responseXML:(new DOMParser).parseFromString(this.response,"application/xml"):"xhtml"==t?this.responseXML?this.responseXML:(new DOMParser).parseFromString(this.response,"application/xhtml+xml"):"html"==t?this.responseXML?this.responseXML:(new DOMParser).parseFromString(this.response,"text/html"):"json"==t?JSON.parse(this.response):"blob"==t?o?this.response:new Blob([this.response]):this.response,s.resolve(e)):s.reject({message:this.response,stack:(new Error).stack}))};return"overrideMimeType"in c||Object.defineProperty(c,"overrideMimeType",{value:function(e){}}),a.open("GET",e,!0),a.onreadystatechange=h,r&&(a.withCredentials=!0),t||(n=EPUBJS.core.uri(e),t=n.extension,t={htm:"html"}[t]||t),"blob"==t&&(a.responseType=i),"json"==t&&a.setRequestHeader("Accept","application/json"),"xml"==t&&(a.responseType="document",a.overrideMimeType("text/xml")),"xhtml"==t&&(a.responseType="document"),"html"==t&&(a.responseType="document"),"binary"==t&&(a.responseType="arraybuffer"),a.send(),s.promise},EPUBJS.core.toArray=function(e){var t=[];for(var r in e){var n;e.hasOwnProperty(r)&&(n=e[r],n.ident=r,t.push(n))}return t},EPUBJS.core.uri=function(e){var t,r,n,o={protocol:"",host:"",path:"",origin:"",directory:"",base:"",filename:"",extension:"",fragment:"",href:e},i=e.indexOf("blob:"),s=e.indexOf("://"),a=e.indexOf("?"),c=e.indexOf("#");return 0===i?(o.protocol="blob",o.base=e.indexOf(0,c),o):(-1!=c&&(o.fragment=e.slice(c+1),e=e.slice(0,c)),-1!=a&&(o.search=e.slice(a+1),e=e.slice(0,a),href=e),-1!=s?(o.protocol=e.slice(0,s),t=e.slice(s+3),n=t.indexOf("/"),-1===n?(o.host=o.path,o.path=""):(o.host=t.slice(0,n),o.path=t.slice(n)),o.origin=o.protocol+"://"+o.host,o.directory=EPUBJS.core.folder(o.path),o.base=o.origin+o.directory):(o.path=e,o.directory=EPUBJS.core.folder(e),o.base=o.directory),o.filename=e.replace(o.base,""),r=o.filename.lastIndexOf("."),-1!=r&&(o.extension=o.filename.slice(r+1)),o)},EPUBJS.core.folder=function(e){var t=e.lastIndexOf("/");if(-1==t)var r="";return r=e.slice(0,t+1)},EPUBJS.core.dataURLToBlob=function(e){var t,r,n,o,i,s=";base64,";if(-1==e.indexOf(s))return t=e.split(","),r=t[0].split(":")[1],n=t[1],new Blob([n],{type:r});t=e.split(s),r=t[0].split(":")[1],n=window.atob(t[1]),o=n.length,i=new Uint8Array(o);for(var a=0;o>a;++a)i[a]=n.charCodeAt(a);return new Blob([i],{type:r})},EPUBJS.core.addScript=function(e,t,r){var n,o;o=!1,n=document.createElement("script"),n.type="text/javascript",n.async=!1,n.src=e,n.onload=n.onreadystatechange=function(){o||this.readyState&&"complete"!=this.readyState||(o=!0,t&&t())},r=r||document.body,r.appendChild(n)},EPUBJS.core.addScripts=function(e,t,r){var n=e.length,o=0,i=function(){o++,n==o?t&&t():EPUBJS.core.addScript(e[o],i,r)};EPUBJS.core.addScript(e[o],i,r)},EPUBJS.core.addCss=function(e,t,r){var n,o;o=!1,n=document.createElement("link"),n.type="text/css",n.rel="stylesheet",n.href=e,n.onload=n.onreadystatechange=function(){o||this.readyState&&"complete"!=this.readyState||(o=!0,t&&t())},r=r||document.body,r.appendChild(n)},EPUBJS.core.prefixed=function(e){var t=["Webkit","Moz","O","ms"],r=e[0].toUpperCase()+e.slice(1),n=t.length;if("undefined"!=typeof document.documentElement.style[e])return e;for(var o=0;n>o;o++)if("undefined"!=typeof document.documentElement.style[t[o]+r])return t[o]+r;return e},EPUBJS.core.resolveUrl=function(e,t){var r,n,o=[],i=EPUBJS.core.uri(t),s=e.split("/");return i.host?t:(s.pop(),n=t.split("/"),n.forEach(function(e){".."===e?s.pop():o.push(e)}),r=s.concat(o),r.join("/"))},EPUBJS.core.uuid=function(){var e=(new Date).getTime(),t="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var r=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"==t?r:7&r|8).toString(16)});return t},EPUBJS.core.insert=function(e,t,r){var n=EPUBJS.core.locationOf(e,t,r);return t.splice(n,0,e),n},EPUBJS.core.locationOf=function(e,t,r,n,o){var i,s=n||0,a=o||t.length,c=parseInt(s+(a-s)/2);return r||(r=function(e,t){return e>t?1:t>e?-1:(e=t)?0:void 0}),0>=a-s?c:(i=r(t[c],e),a-s===1?i>0?c:c+1:0===i?c:-1===i?EPUBJS.core.locationOf(e,t,r,c,a):EPUBJS.core.locationOf(e,t,r,s,c))},EPUBJS.core.indexOfSorted=function(e,t,r,n,o){var i,s=n||0,a=o||t.length,c=parseInt(s+(a-s)/2);return r||(r=function(e,t){return e>t?1:t>e?-1:(e=t)?0:void 0}),0>=a-s?-1:(i=r(t[c],e),a-s===1?0===i?c:-1:0===i?c:-1===i?EPUBJS.core.indexOfSorted(e,t,r,c,a):EPUBJS.core.indexOfSorted(e,t,r,s,c))},EPUBJS.core.queue=function(e){var t=[],r=e,n=function(e,r,n){return t.push({funcName:e,args:r,context:n}),t},o=function(){var e;t.length&&(e=t.shift(),r[e.funcName].apply(e.context||r,e.args))},i=function(){for(;t.length;)o()},s=function(){t=[]},a=function(){return t.length};return{enqueue:n,dequeue:o,flush:i,clear:s,length:a}},EPUBJS.core.getElementXPath=function(e){return e&&e.id?'//*[@id="'+e.id+'"]':EPUBJS.core.getElementTreeXPath(e)},EPUBJS.core.getElementTreeXPath=function(e){var t,r,n,o,i=[],s="http://www.w3.org/1999/xhtml"===e.ownerDocument.documentElement.getAttribute("xmlns");for(e.nodeType===Node.TEXT_NODE&&(t=EPUBJS.core.indexOfTextNode(e)+1,i.push("text()["+t+"]"),e=e.parentNode);e&&1==e.nodeType;e=e.parentNode){t=0;for(var a=e.previousSibling;a;a=a.previousSibling)a.nodeType!=Node.DOCUMENT_TYPE_NODE&&a.nodeName==e.nodeName&&++t;r=e.nodeName.toLowerCase(),n=s?"xhtml:"+r:r,o=t?"["+(t+1)+"]":"",i.splice(0,0,n+o)}return i.length?"./"+i.join("/"):null},EPUBJS.core.nsResolver=function(e){var t={xhtml:"http://www.w3.org/1999/xhtml",epub:"http://www.idpf.org/2007/ops"};return t[e]||null},EPUBJS.core.cleanStringForXpath=function(e){var t=e.match(/[^'"]+|['"]/g);return t=t.map(function(e){return"'"===e?'"\'"':'"'===e?"'\"'":"'"+e+"'"}),"concat('',"+t.join(",")+")"},EPUBJS.core.indexOfTextNode=function(e){for(var t,r=e.parentNode,n=r.childNodes,o=-1,i=0;i<n.length&&(t=n[i],t.nodeType===Node.TEXT_NODE&&o++,t!=e);i++);return o},EPUBJS.core.defaults=function(e){for(var t=1,r=arguments.length;r>t;t++){var n=arguments[t];for(var o in n)void 0===e[o]&&(e[o]=n[o])}return e},EPUBJS.core.extend=function(e){var t=[].slice.call(arguments,1);return t.forEach(function(t){t&&Object.getOwnPropertyNames(t).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}),e},EPUBJS.core.clone=function(e){return EPUBJS.core.isArray(e)?e.slice():EPUBJS.core.extend({},e)},EPUBJS.core.isElement=function(e){return!(!e||1!=e.nodeType)},EPUBJS.core.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},EPUBJS.core.isString=function(e){return"string"==typeof e||e instanceof String},EPUBJS.core.isArray=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},EPUBJS.core.values=function(e){var t,r,n,o=-1;if(!e)return[];for(t=Object.keys(e),r=t.length,n=Array(r);++o<r;)n[o]=e[t[o]];return n},EPUBJS.EpubCFI=function(e){return e?this.parse(e):void 0},EPUBJS.EpubCFI.prototype.generateChapterComponent=function(e,t,r){var n=parseInt(t),o=e+1,i="/"+o+"/";return i+=2*(n+1),r&&(i+="["+r+"]"),i},EPUBJS.EpubCFI.prototype.generatePathComponent=function(e){var t=[];return e.forEach(function(e){var r="";r+=2*(e.index+1),e.id&&(r+="["+e.id+"]"),t.push(r)}),t.join("/")},EPUBJS.EpubCFI.prototype.generateCfiFromElement=function(e,t){var r=this.pathTo(e),n=this.generatePathComponent(r);return n.length?"epubcfi("+t+"!"+n+"/1:0)":"epubcfi("+t+"!/4/)"},EPUBJS.EpubCFI.prototype.pathTo=function(e){for(var t,r=[];e&&null!==e.parentNode&&9!=e.parentNode.nodeType;)t=e.parentNode.children,r.unshift({id:e.id,tagName:e.tagName,index:t?Array.prototype.indexOf.call(t,e):0}),e=e.parentNode;return r},EPUBJS.EpubCFI.prototype.getChapterComponent=function(e){var t=e.split("!");return t[0]},EPUBJS.EpubCFI.prototype.getPathComponent=function(e){var t=e.split("!"),r=t[1]?t[1].split(":"):"";return r[0]},EPUBJS.EpubCFI.prototype.getCharecterOffsetComponent=function(e){var t=e.split(":");return t[1]||""},EPUBJS.EpubCFI.prototype.parse=function(e){var t,r,n,o,i,s,a,c,h,p={},u=function(e){var t,r,n,o;return t="element",r=parseInt(e)/2-1,n=e.match(/\[(.*)\]/),n&&n[1]&&(o=n[1]),{type:t,index:r,id:o||!1}};return"string"!=typeof e?{spinePos:-1}:(p.str=e,0===e.indexOf("epubcfi(")&&")"===e[e.length-1]&&(e=e.slice(8,e.length-1)),r=this.getChapterComponent(e),n=this.getPathComponent(e)||"",o=this.getCharecterOffsetComponent(e),r&&(t=r.split("/")[2]||"")?(p.spinePos=parseInt(t)/2-1||0,s=t.match(/\[(.*)\]/),p.spineId=s?s[1]:!1,-1!=n.indexOf(",")&&console.warn("CFI Ranges are not supported"),a=n.split("/"),c=a.pop(),p.steps=[],a.forEach(function(e){var t;e&&(t=u(e),p.steps.push(t))}),h=parseInt(c),isNaN(h)||(h%2===0?p.steps.push(u(c)):p.steps.push({type:"text",index:(h-1)/2})),i=o.match(/\[(.*)\]/),i&&i[1]?(p.characterOffset=parseInt(o.split("[")[0]),p.textLocationAssertion=i[1]):p.characterOffset=parseInt(o),p):{spinePos:-1})},EPUBJS.EpubCFI.prototype.addMarker=function(e,t,r){var n,o,i,s,a=t||document,c=r||this.createMarker(a);return"string"==typeof e&&(e=this.parse(e)),o=e.steps[e.steps.length-1],-1===e.spinePos?!1:(n=this.findParent(e,a))?(o&&"text"===o.type?(i=n.childNodes[o.index],e.characterOffset?(s=i.splitText(e.characterOffset),c.classList.add("EPUBJS-CFI-SPLIT"),n.insertBefore(c,s)):n.insertBefore(c,i)):n.insertBefore(c,n.firstChild),c):!1},EPUBJS.EpubCFI.prototype.createMarker=function(e){var t=e||document,r=t.createElement("span");return r.id="EPUBJS-CFI-MARKER:"+EPUBJS.core.uuid(),r.classList.add("EPUBJS-CFI-MARKER"),r},EPUBJS.EpubCFI.prototype.removeMarker=function(e,t){t||document;e.classList.contains("EPUBJS-CFI-SPLIT")?(nextSib=e.nextSibling,prevSib=e.previousSibling,nextSib&&prevSib&&3===nextSib.nodeType&&3===prevSib.nodeType&&(prevSib.textContent+=nextSib.textContent,e.parentNode.removeChild(nextSib)),e.parentNode.removeChild(e)):e.classList.contains("EPUBJS-CFI-MARKER")&&e.parentNode.removeChild(e)},EPUBJS.EpubCFI.prototype.findParent=function(e,t){var r,n,o,i=t||document,s=i.getElementsByTagName("html")[0],a=Array.prototype.slice.call(s.children);if("string"==typeof e&&(e=this.parse(e)),n=e.steps.slice(0),!n.length)return i.getElementsByTagName("body")[0];for(;n&&n.length>0;){if(r=n.shift(),"text"===r.type?(o=s.childNodes[r.index],s=o.parentNode||s):s=r.id?i.getElementById(r.id):a[r.index],!s||"undefined"==typeof s)return console.error("No Element For",r,e.str),!1;a=Array.prototype.slice.call(s.children)}return s},EPUBJS.EpubCFI.prototype.compare=function(e,t){if("string"==typeof e&&(e=new EPUBJS.EpubCFI(e)),"string"==typeof t&&(t=new EPUBJS.EpubCFI(t)),e.spinePos>t.spinePos)return 1;if(e.spinePos<t.spinePos)return-1;for(var r=0;r<e.steps.length;r++){if(!t.steps[r])return 1;if(e.steps[r].index>t.steps[r].index)return 1;if(e.steps[r].index<t.steps[r].index)return-1}return e.steps.length<t.steps.length?-1:e.characterOffset>t.characterOffset?1:e.characterOffset<t.characterOffset?-1:0},EPUBJS.EpubCFI.prototype.generateCfiFromHref=function(e,t){var r,n,o=EPUBJS.core.uri(e),i=o.path,s=o.fragment,a=t.spineIndexByURL[i],c=new RSVP.defer,h=new EPUBJS.EpubCFI;return"undefined"!=typeof a&&(n=t.spine[a],r=t.loadXml(n.url),r.then(function(e){var t,r=e.getElementById(s);t=h.generateCfiFromElement(r,n.cfiBase),c.resolve(t)})),c.promise},EPUBJS.EpubCFI.prototype.generateCfiFromTextNode=function(e,t,r){var n=e.parentNode,o=this.pathTo(n),i=this.generatePathComponent(o),s=1+2*Array.prototype.indexOf.call(n.childNodes,e);return"epubcfi("+r+"!"+i+"/"+s+":"+(t||0)+")"},EPUBJS.EpubCFI.prototype.generateCfiFromRangeAnchor=function(e,t){var r=e.anchorNode,n=e.anchorOffset;return this.generateCfiFromTextNode(r,n,t)},EPUBJS.EpubCFI.prototype.generateCfiFromRange=function(e,t){var r,n,o,i,s,a,c,h,p,u,l,d;if(r=e.startContainer,3===r.nodeType)n=r.parentNode,a=1+2*EPUBJS.core.indexOfTextNode(r),o=this.pathTo(n);else{if(e.collapsed)return this.generateCfiFromElement(r,t);o=this.pathTo(r)}return i=this.generatePathComponent(o),s=e.startOffset,e.collapsed?"epubcfi("+t+"!"+i+"/"+a+":"+s+")":(c=e.endContainer,3===c.nodeType?(h=c.parentNode,d=1+2*EPUBJS.core.indexOfTextNode(c),p=this.pathTo(h)):p=this.pathTo(c),u=this.generatePathComponent(p),l=e.endOffset,u=u.replace(i,""),u.length&&(u+="/"),"epubcfi("+t+"!"+i+"/"+a+":"+s+","+u+d+":"+l+")")},EPUBJS.EpubCFI.prototype.generateXpathFromSteps=function(e){var t=[".","*"];return e.forEach(function(e){var r=e.index+1;e.id?t.push("*[position()="+r+" and @id='"+e.id+"']"):"text"===e.type?t.push("text()["+r+"]"):t.push("*["+r+"]")}),t.join("/")},EPUBJS.EpubCFI.prototype.generateQueryFromSteps=function(e){var t=["html"];return e.forEach(function(e){var r=e.index+1;e.id?t.push("#"+e.id):"text"===e.type||t.push("*:nth-child("+r+")")}),t.join(">")},EPUBJS.EpubCFI.prototype.generateRangeFromCfi=function(e,t){var r,n,o,i,s,a,c=t||document,h=c.createRange();return"string"==typeof e&&(e=this.parse(e)),-1===e.spinePos?!1:(r=e.steps[e.steps.length-1],"undefined"!=typeof document.evaluate?(n=this.generateXpathFromSteps(e.steps),o=c.evaluate(n,c,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue):(s=this.generateQueryFromSteps(e.steps),a=c.querySelector(s),a&&"text"==r.type&&(o=a.childNodes[r.index])),o?(o&&e.characterOffset>=0?(i=o.length,e.characterOffset<i?(h.setStart(o,e.characterOffset),h.setEnd(o,i)):(console.debug("offset greater than length:",e.characterOffset,i),h.setStart(o,i-1),h.setEnd(o,i))):o&&h.selectNode(o),h):null)},EPUBJS.EpubCFI.prototype.isCfiString=function(e){return"string"==typeof e&&0===e.indexOf("epubcfi(")?!0:!1},EPUBJS.Events=function(e,t){return this.events={},t?this.el=t:this.el=document.createElement("div"),e.createEvent=this.createEvent,e.tell=this.tell,e.listen=this.listen,e.deafen=this.deafen,e.listenUntil=this.listenUntil,this},EPUBJS.Events.prototype.createEvent=function(e){var t=new CustomEvent(e);return this.events[e]=t,t},EPUBJS.Events.prototype.tell=function(e,t){var r;this.events[e]?r=this.events[e]:(console.warn("No event:",e,"defined yet, creating."),r=this.createEvent(e)),t&&(r.msg=t),this.el.dispatchEvent(r)},EPUBJS.Events.prototype.listen=function(e,t,r){return this.events[e]?void(r?this.el.addEventListener(e,t.bind(r),!1):this.el.addEventListener(e,t,!1)):(console.warn("No event:",e,"defined yet, creating."),void this.createEvent(e))},EPUBJS.Events.prototype.deafen=function(e,t){this.el.removeEventListener(e,t,!1)},EPUBJS.Events.prototype.listenUntil=function(e,t,r,n){function o(){this.deafen(e,r),this.deafen(t,o)}this.listen(e,r,n),this.listen(t,o,this)},EPUBJS.hooks={},EPUBJS.Hooks=function(){function e(){}return e.prototype.getHooks=function(){var e;this.hooks={},Array.prototype.slice.call(arguments).forEach(function(e){this.hooks[e]=[]},this);for(var t in this.hooks)e=EPUBJS.core.values(EPUBJS.hooks[t]),e.forEach(function(e){this.registerHook(t,e)},this)},e.prototype.registerHook=function(e,t,r){"undefined"!=typeof this.hooks[e]?"function"==typeof t?r?this.hooks[e].unshift(t):this.hooks[e].push(t):Array.isArray(t)&&t.forEach(function(t){r?this.hooks[e].unshift(t):this.hooks[e].push(t)},this):(this.hooks[e]=[t],"function"==typeof t?this.hooks[e]=[t]:Array.isArray(t)&&(this.hooks[e]=[],t.forEach(function(t){this.hooks[e].push(t)},this)))},e.prototype.removeHook=function(e,t){var r;"undefined"!=typeof this.hooks[e]&&("function"==typeof t?(r=this.hooks[e].indexOf(t),r>-1&&this.hooks[e].splice(r,1)):Array.isArray(t)&&t.forEach(function(t){r=this.hooks[e].indexOf(t),r>-1&&this.hooks[e].splice(r,1)},this))},e.prototype.triggerHooks=function(e,t,r){function n(){i--,0>=i&&t&&t()}var o,i;return"undefined"==typeof this.hooks[e]?!1:(o=this.hooks[e],i=o.length,0===i&&t&&t(),void o.forEach(function(e){e(n,r)}))},{register:function(e){if(void 0===EPUBJS.hooks[e]&&(EPUBJS.hooks[e]={}),"object"!=typeof EPUBJS.hooks[e])throw"Already registered: "+e;return EPUBJS.hooks[e]},mixin:function(t){for(var r in e.prototype)t[r]=e.prototype[r]}}}(),EPUBJS.Layout=EPUBJS.Layout||{},EPUBJS.Layout.Reflowable=function(){this.documentElement=null,this.spreadWidth=null},EPUBJS.Layout.Reflowable.prototype.format=function(e,t,r,n){var o=EPUBJS.core.prefixed("columnAxis"),i=EPUBJS.core.prefixed("columnGap"),s=EPUBJS.core.prefixed("columnWidth"),a=EPUBJS.core.prefixed("columnFill"),c=Math.floor(t),h=Math.floor(c/8),p=n>=0?n:h%2===0?h:h-1;return this.documentElement=e,this.spreadWidth=c+p,e.style.overflow="hidden",e.style.width=c+"px",e.style.height=r+"px",e.style[o]="horizontal",e.style[a]="auto",e.style[s]=c+"px",e.style[i]=p+"px",this.colWidth=c,this.gap=p,{pageWidth:this.spreadWidth,pageHeight:r}},EPUBJS.Layout.Reflowable.prototype.calculatePages=function(){var e,t;return this.documentElement.style.width="auto",e=this.documentElement.scrollWidth,t=Math.ceil(e/this.spreadWidth),{displayedPages:t,pageCount:t}},EPUBJS.Layout.ReflowableSpreads=function(){this.documentElement=null,this.spreadWidth=null},EPUBJS.Layout.ReflowableSpreads.prototype.format=function(e,t,r,n){var o=EPUBJS.core.prefixed("columnAxis"),i=EPUBJS.core.prefixed("columnGap"),s=EPUBJS.core.prefixed("columnWidth"),a=EPUBJS.core.prefixed("columnFill"),c=2,h=Math.floor(t),p=h%2===0?h:h-1,u=Math.floor(p/8),l=n>=0?n:u%2===0?u:u-1,d=Math.floor((p-l)/c);return this.documentElement=e,this.spreadWidth=(d+l)*c,e.style.overflow="hidden",e.style.width=p+"px",e.style.height=r+"px",e.style[o]="horizontal",e.style[a]="auto",e.style[i]=l+"px",e.style[s]=d+"px",this.colWidth=d,this.gap=l,{pageWidth:this.spreadWidth,pageHeight:r}},EPUBJS.Layout.ReflowableSpreads.prototype.calculatePages=function(){var e=this.documentElement.scrollWidth,t=Math.ceil(e/this.spreadWidth);return this.documentElement.style.width=t*this.spreadWidth-this.gap+"px",{displayedPages:t,pageCount:2*t}},EPUBJS.Layout.Fixed=function(){this.documentElement=null},EPUBJS.Layout.Fixed.prototype.format=function(e,t,r,n){var o,i,s,a,c=EPUBJS.core.prefixed("columnWidth"),h=e.querySelector("[name=viewport]");return this.documentElement=e,h&&h.hasAttribute("content")&&(o=h.getAttribute("content"),i=o.split(","),i[0]&&(s=i[0].replace("width=","")),i[1]&&(a=i[1].replace("height=",""))),e.style.width=s+"px"||"auto",e.style.height=a+"px"||"auto",e.style[c]="auto",e.style.overflow="auto",this.colWidth=s,this.gap=0,{pageWidth:s,pageHeight:a}},EPUBJS.Layout.Fixed.prototype.calculatePages=function(){return{displayedPages:1,pageCount:1}},EPUBJS.Locations=function(e,t,r){this.spine=e,this.store=t,this.credentials=r,this.epubcfi=new EPUBJS.EpubCFI,this._locations=[],this.total=0,this["break"]=150,this._current=0},EPUBJS.Locations.prototype.generate=function(e){var t,r=new RSVP.defer,n=-1,o=this.spine.length,i=function(e){var t,r=n+1,s=e||new RSVP.defer;return r>=o?s.resolve():(n=r,t=new EPUBJS.Chapter(this.spine[n],this.store,this.credentials),this.process(t).then(function(){setTimeout(function(){i(s)},1)})),s.promise}.bind(this);return"number"==typeof e&&(this["break"]=e),t=i().then(function(){this.total=this._locations.length-1,this._currentCfi&&(this.currentLocation=this._currentCfi),r.resolve(this._locations)}.bind(this)),r.promise},EPUBJS.Locations.prototype.process=function(e){return e.load().then(function(t){var r,n,o,i=t,s=i.documentElement.querySelector("body"),a=0;this.sprint(s,function(t){var s,c=t.length,h=0;for(0===a&&(r=i.createRange(),r.setStart(t,0)),s=this["break"]-a,s>c&&(a+=c,h=c);c>h;)a=this["break"],h+=this["break"],h>=c?a=c-(h-this["break"]):(r.setEnd(t,h),o=e.cfiFromRange(r),this._locations.push(o),a=0,h+=1,r=i.createRange(),r.setStart(t,h));n=t}.bind(this)),r&&(r.setEnd(n,n.length),o=e.cfiFromRange(r),this._locations.push(o),a=0)}.bind(this))},EPUBJS.Locations.prototype.sprint=function(e,t){for(var r,n=document.createTreeWalker(e,NodeFilter.SHOW_TEXT,null,!1);r=n.nextNode();)t(r)},EPUBJS.Locations.prototype.locationFromCfi=function(e){return 0===this._locations.length?-1:EPUBJS.core.locationOf(e,this._locations,this.epubcfi.compare)},EPUBJS.Locations.prototype.percentageFromCfi=function(e){var t=this.locationFromCfi(e);return this.percentageFromLocation(t)},EPUBJS.Locations.prototype.percentageFromLocation=function(e){return e&&this.total?e/this.total:0},EPUBJS.Locations.prototype.cfiFromLocation=function(e){var t=-1;return"number"!=typeof e&&(e=parseInt(e)),e>=0&&e<this._locations.length&&(t=this._locations[e]),t},EPUBJS.Locations.prototype.cfiFromPercentage=function(e){var t=e>1?e/100:e,r=Math.ceil(this.total*t);return this.cfiFromLocation(r)},EPUBJS.Locations.prototype.load=function(e){return this._locations=JSON.parse(e),this.total=this._locations.length-1,this._locations},EPUBJS.Locations.prototype.save=function(e){return JSON.stringify(this._locations)},EPUBJS.Locations.prototype.getCurrent=function(e){return this._current},EPUBJS.Locations.prototype.setCurrent=function(e){var t;if("string"==typeof e)this._currentCfi=e;else{if("number"!=typeof e)return;this._current=e}0!==this._locations.length&&("string"==typeof e?(t=this.locationFromCfi(e),this._current=t):t=e,this.trigger("changed",{percentage:this.percentageFromLocation(t)}))},Object.defineProperty(EPUBJS.Locations.prototype,"currentLocation",{get:function(){return this._current},set:function(e){this.setCurrent(e)}}),RSVP.EventTarget.mixin(EPUBJS.Locations.prototype),EPUBJS.Pagination=function(e){this.pages=[],this.locations=[],this.epubcfi=new EPUBJS.EpubCFI,e&&e.length&&this.process(e)},EPUBJS.Pagination.prototype.process=function(e){e.forEach(function(e){this.pages.push(e.page),this.locations.push(e.cfi)},this),this.pageList=e,this.firstPage=parseInt(this.pages[0]),this.lastPage=parseInt(this.pages[this.pages.length-1]),this.totalPages=this.lastPage-this.firstPage},EPUBJS.Pagination.prototype.pageFromCfi=function(e){var t=-1;if(0===this.locations.length)return-1;var r=EPUBJS.core.indexOfSorted(e,this.locations,this.epubcfi.compare);return-1!=r&&r<this.pages.length-1?t=this.pages[r]:(r=EPUBJS.core.locationOf(e,this.locations,this.epubcfi.compare),t=r-1>=0?this.pages[r-1]:this.pages[0],void 0!==t||(t=-1)),t},EPUBJS.Pagination.prototype.cfiFromPage=function(e){var t=-1;"number"!=typeof e&&(e=parseInt(e));var r=this.pages.indexOf(e);return-1!=r&&(t=this.locations[r]),t},EPUBJS.Pagination.prototype.pageFromPercentage=function(e){var t=Math.round(this.totalPages*e);return t},EPUBJS.Pagination.prototype.percentageFromPage=function(e){var t=(e-this.firstPage)/this.totalPages;return Math.round(1e3*t)/1e3},EPUBJS.Pagination.prototype.percentageFromCfi=function(e){var t=this.pageFromCfi(e),r=this.percentageFromPage(t);return r},EPUBJS.Parser=function(e){this.baseUrl=e||""},EPUBJS.Parser.prototype.container=function(e){var t,r,n,o;return e?(t=e.querySelector("rootfile"))?(r=t.getAttribute("full-path"),n=EPUBJS.core.uri(r).directory,o=e.xmlEncoding,{packagePath:r,basePath:n,encoding:o}):void console.error("No RootFile Found"):void console.error("Container File Not Found")},EPUBJS.Parser.prototype.identifier=function(e){var t;return e?(t=e.querySelector("metadata"),t?this.getElementText(t,"identifier"):void console.error("No Metadata Found")):void console.error("Package File Not Found")},EPUBJS.Parser.prototype.packageContents=function(e,t){var r,n,o,i,s,a,c,h,p,u,l,d=this;return t&&(this.baseUrl=t),e?(r=e.querySelector("metadata"))?(n=e.querySelector("manifest"))?(o=e.querySelector("spine"))?(i=d.manifest(n),s=d.findNavPath(n),a=d.findTocPath(n,o),c=d.findCoverPath(e),h=Array.prototype.indexOf.call(o.parentNode.childNodes,o),p=d.spine(o,i),u={},p.forEach(function(e){u[e.href]=e.index}),l=d.metadata(r),l.direction=o.getAttribute("page-progression-direction"),{metadata:l,spine:p,manifest:i,navPath:s,tocPath:a,coverPath:c,spineNodeIndex:h,spineIndexByURL:u}):void console.error("No Spine Found"):void console.error("No Manifest Found"):void console.error("No Metadata Found"):void console.error("Package File Not Found")},EPUBJS.Parser.prototype.findNavPath=function(e){var t=e.querySelector("item[properties$='nav'], item[properties^='nav '], item[properties*=' nav ']");return t?t.getAttribute("href"):!1},EPUBJS.Parser.prototype.findTocPath=function(e,t){var r,n=e.querySelector("item[media-type='application/x-dtbncx+xml']");return n||(r=t.getAttribute("toc"),r&&(n=e.querySelector("item[id='"+r+"']"))),n?n.getAttribute("href"):!1},EPUBJS.Parser.prototype.metadata=function(e){var t={},r=this;return t.bookTitle=r.getElementText(e,"title"),t.creator=r.getElementText(e,"creator"),t.description=r.getElementText(e,"description"),t.pubdate=r.getElementText(e,"date"),t.publisher=r.getElementText(e,"publisher"),t.identifier=r.getElementText(e,"identifier"),t.language=r.getElementText(e,"language"),t.rights=r.getElementText(e,"rights"),t.modified_date=r.querySelectorText(e,"meta[property='dcterms:modified']"),t.layout=r.querySelectorText(e,"meta[property='rendition:layout']"),t.orientation=r.querySelectorText(e,"meta[property='rendition:orientation']"),t.spread=r.querySelectorText(e,"meta[property='rendition:spread']"),t},EPUBJS.Parser.prototype.findCoverPath=function(e){var t=e.querySelector("package").getAttribute("version");if("2.0"===t){var r=e.querySelector('meta[name="cover"]');if(r){var n=r.getAttribute("content"),o=e.querySelector("item[id='"+n+"']");return o?o.getAttribute("href"):!1}return!1}var i=e.querySelector("item[properties='cover-image']");return i?i.getAttribute("href"):!1},EPUBJS.Parser.prototype.getElementText=function(e,t){var r,n=e.getElementsByTagNameNS("http://purl.org/dc/elements/1.1/",t);return n&&0!==n.length?(r=n[0],r.childNodes.length?r.childNodes[0].nodeValue:""):""},EPUBJS.Parser.prototype.querySelectorText=function(e,t){var r=e.querySelector(t);return r&&r.childNodes.length?r.childNodes[0].nodeValue:""},EPUBJS.Parser.prototype.manifest=function(e){var t=this.baseUrl,r={},n=e.querySelectorAll("item"),o=Array.prototype.slice.call(n);return o.forEach(function(e){var n=e.getAttribute("id"),o=e.getAttribute("href")||"",i=e.getAttribute("media-type")||"",s=e.getAttribute("properties")||"";r[n]={href:o,url:t+o,type:i,
properties:s}}),r},EPUBJS.Parser.prototype.spine=function(e,t){var r=[],n=e.getElementsByTagName("itemref"),o=Array.prototype.slice.call(n),i=Array.prototype.indexOf.call(e.parentNode.childNodes,e),s=new EPUBJS.EpubCFI;return o.forEach(function(e,n){var o=e.getAttribute("idref"),a=s.generateChapterComponent(i,n,o),c=e.getAttribute("properties")||"",h=c.length?c.split(" "):[],p=t[o].properties,u=p.length?p.split(" "):[],l={id:o,linear:e.getAttribute("linear")||"",properties:h,manifestProperties:u,href:t[o].href,url:t[o].url,index:n,cfiBase:a,cfi:"epubcfi("+a+")"};r.push(l)}),r},EPUBJS.Parser.prototype.querySelectorByType=function(e,t,r){var n=e.querySelector(t+'[*|type="'+r+'"]');if(null!==n&&0!==n.length)return n;n=e.querySelectorAll(t);for(var o=0;o<n.length;o++)if(n[o].getAttributeNS("http://www.idpf.org/2007/ops","type")===r)return n[o]},EPUBJS.Parser.prototype.nav=function(e,t,r){var n,o,i,s=this.querySelectorByType(e,"nav","toc"),a=s?s.querySelectorAll("ol li"):[],c=a.length,h={},p=[];if(!a||0===c)return p;for(n=0;c>n;++n)o=this.navItem(a[n],t,r),h[o.id]=o,o.parent?(i=h[o.parent],i.subitems.push(o)):p.push(o);return p},EPUBJS.Parser.prototype.navItem=function(e,t,r){var n,o=e.getAttribute("id")||!1,i=e.querySelector("a, span"),s=i.getAttribute("href")||"",a=i.textContent||"",c=s.split("#"),h=c[0],p=t[h],u=r[p],l=[],d=e.parentNode,f=u?u.cfi:"";return d&&"navPoint"===d.nodeName&&(n=d.getAttribute("id")),o||(p?(u=r[p],o=u.id,f=u.cfi):(o="epubjs-autogen-toc-id-"+EPUBJS.core.uuid(),e.setAttribute("id",o))),{id:o,href:s,label:a,spinePos:p,subitems:l,parent:n,cfi:f}},EPUBJS.Parser.prototype.toc=function(e,t,r){var n,o,i,s=e.querySelectorAll("navMap navPoint"),a=s.length,c={},h=[];if(!s||0===a)return h;for(n=0;a>n;++n)o=this.tocItem(s[n],t,r),c[o.id]=o,o.parent?(i=c[o.parent],i.subitems.push(o)):h.push(o);return h},EPUBJS.Parser.prototype.tocItem=function(e,t,r){var n,o=e.getAttribute("id")||!1,i=e.querySelector("content"),s=i.getAttribute("src"),a=e.querySelector("navLabel"),c=a.textContent?a.textContent:"",h=s.split("#"),p=h[0],u=t[p],l=r[u],d=[],f=e.parentNode,g=l?l.cfi:"";return f&&"navPoint"===f.nodeName&&(n=f.getAttribute("id")),o||(u?(l=r[u],o=l.id,g=l.cfi):(o="epubjs-autogen-toc-id-"+EPUBJS.core.uuid(),e.setAttribute("id",o))),{id:o,href:s,label:c,spinePos:u,subitems:d,parent:n,cfi:g}},EPUBJS.Parser.prototype.pageList=function(e,t,r){var n,o,i=this.querySelectorByType(e,"nav","page-list"),s=i?i.querySelectorAll("ol li"):[],a=s.length,c=[];if(!s||0===a)return c;for(n=0;a>n;++n)o=this.pageListItem(s[n],t,r),c.push(o);return c},EPUBJS.Parser.prototype.pageListItem=function(e,t,r){var n,o,i,s=(e.getAttribute("id")||!1,e.querySelector("a")),a=s.getAttribute("href")||"",c=s.textContent||"",h=parseInt(c),p=a.indexOf("epubcfi");return-1!=p?(n=a.split("#"),o=n[0],i=n.length>1?n[1]:!1,{cfi:i,href:a,packageUrl:o,page:h}):{href:a,page:h}},EPUBJS.Render.Iframe=function(){this.iframe=null,this.document=null,this.window=null,this.docEl=null,this.bodyEl=null,this.leftPos=0,this.pageWidth=0},EPUBJS.Render.Iframe.prototype.create=function(){return this.iframe=document.createElement("iframe"),this.iframe.id="epubjs-iframe:"+EPUBJS.core.uuid(),this.iframe.scrolling="no",this.iframe.seamless="seamless",this.iframe.style.border="none",this.iframe.addEventListener("load",this.loaded.bind(this),!1),this.isMobile=navigator.userAgent.match(/(iPad|iPhone|iPod|Mobile|Android)/g),this.transform=EPUBJS.core.prefixed("transform"),this.iframe},EPUBJS.Render.Iframe.prototype.load=function(e,t){var r=this,n=new RSVP.defer;return this.window&&this.unload(),this.iframe.onload=function(e){r.document=r.iframe.contentDocument,r.docEl=r.document.documentElement,r.headEl=r.document.head,r.bodyEl=r.document.body||r.document.querySelector("body"),r.window=r.iframe.contentWindow,r.window.addEventListener("resize",r.resized.bind(r),!1),r.leftPos=0,r.setLeft(0),r.bodyEl&&(r.bodyEl.style.margin="0"),"rtl"==r.direction&&"rtl"!=r.docEl.dir&&(r.docEl.dir="rtl",r.docEl.style.position="absolute",r.docEl.style.right="0"),n.resolve(r.docEl)},this.iframe.onerror=function(e){n.reject({message:"Error Loading Contents: "+e,stack:(new Error).stack})},this.document=this.iframe.contentDocument,this.document?(this.document.open(),this.document.write(e),this.document.close(),n.promise):(n.reject(new Error("No Document Available")),n)},EPUBJS.Render.Iframe.prototype.loaded=function(e){var t,r,n=this.iframe.contentWindow.location.href;this.document=this.iframe.contentDocument,this.docEl=this.document.documentElement,this.headEl=this.document.head,this.bodyEl=this.document.body||this.document.querySelector("body"),this.window=this.iframe.contentWindow,"about:blank"!=n&&(t=this.iframe.contentDocument.querySelector("base"),r=t.getAttribute("href"),this.trigger("render:loaded",r))},EPUBJS.Render.Iframe.prototype.resize=function(e,t){this.iframe&&(this.iframe.height=t,isNaN(e)||e%2===0||(e+=1),this.iframe.width=e,this.width=this.iframe.getBoundingClientRect().width||e,this.height=this.iframe.getBoundingClientRect().height||t)},EPUBJS.Render.Iframe.prototype.resized=function(e){this.width=this.iframe.getBoundingClientRect().width,this.height=this.iframe.getBoundingClientRect().height},EPUBJS.Render.Iframe.prototype.totalWidth=function(){return this.docEl.scrollWidth},EPUBJS.Render.Iframe.prototype.totalHeight=function(){return this.docEl.scrollHeight},EPUBJS.Render.Iframe.prototype.setPageDimensions=function(e,t){this.pageWidth=e,this.pageHeight=t},EPUBJS.Render.Iframe.prototype.setDirection=function(e){this.direction=e,this.docEl&&"rtl"==this.docEl.dir&&(this.docEl.dir="rtl",this.docEl.style.position="static",this.docEl.style.right="auto")},EPUBJS.Render.Iframe.prototype.setLeft=function(e){this.isMobile?this.docEl.style[this.transform]="translate("+-e+"px, 0)":this.document.defaultView.scrollTo(e,0)},EPUBJS.Render.Iframe.prototype.setStyle=function(e,t,r){r&&(e=EPUBJS.core.prefixed(e)),this.bodyEl&&(this.bodyEl.style[e]=t)},EPUBJS.Render.Iframe.prototype.removeStyle=function(e){this.bodyEl&&(this.bodyEl.style[e]="")},EPUBJS.Render.Iframe.prototype.addHeadTag=function(e,t,r){var n=r||this.document,o=n.createElement(e),i=n.head;for(var s in t)o.setAttribute(s,t[s]);i&&i.insertBefore(o,i.firstChild)},EPUBJS.Render.Iframe.prototype.page=function(e){this.leftPos=this.pageWidth*(e-1),"rtl"===this.direction&&(this.leftPos=-1*this.leftPos),this.setLeft(this.leftPos)},EPUBJS.Render.Iframe.prototype.getPageNumberByElement=function(e){var t,r;if(e)return t=this.leftPos+e.getBoundingClientRect().left,r=Math.floor(t/this.pageWidth)+1},EPUBJS.Render.Iframe.prototype.getPageNumberByRect=function(e){var t,r;return t=this.leftPos+e.left,r=Math.floor(t/this.pageWidth)+1},EPUBJS.Render.Iframe.prototype.getBaseElement=function(){return this.bodyEl},EPUBJS.Render.Iframe.prototype.getDocumentElement=function(){return this.docEl},EPUBJS.Render.Iframe.prototype.isElementVisible=function(e){var t,r;return e&&"function"==typeof e.getBoundingClientRect&&(t=e.getBoundingClientRect(),r=t.left,0!==t.width&&0!==t.height&&r>=0&&r<this.pageWidth)?!0:!1},EPUBJS.Render.Iframe.prototype.scroll=function(e){e?this.iframe.scrolling="yes":this.iframe.scrolling="no"},EPUBJS.Render.Iframe.prototype.unload=function(){this.window.removeEventListener("resize",this.resized),this.window.location.reload()},RSVP.EventTarget.mixin(EPUBJS.Render.Iframe.prototype),EPUBJS.Renderer=function(e,t){this.listenedEvents=["keydown","keyup","keypressed","mouseup","mousedown","click"],this.upEvent="mouseup",this.downEvent="mousedown","ontouchstart"in document.documentElement&&(this.listenedEvents.push("touchstart","touchend"),this.upEvent="touchend",this.downEvent="touchstart"),e&&"undefined"!=typeof EPUBJS.Render[e]?this.render=new EPUBJS.Render[e]:console.error("Not a Valid Rendering Method"),this.render.on("render:loaded",this.loaded.bind(this)),this.caches={},this.epubcfi=new EPUBJS.EpubCFI,this.spreads=!0,this.isForcedSingle=!1,this.resized=this.onResized.bind(this),this.layoutSettings={},this.hidden=t||!1,EPUBJS.Hooks.mixin(this),this.getHooks("beforeChapterDisplay"),this._q=EPUBJS.core.queue(this),this._moving=!1},EPUBJS.Renderer.prototype.Events=["renderer:keydown","renderer:keyup","renderer:keypressed","renderer:mouseup","renderer:mousedown","renderer:click","renderer:touchstart","renderer:touchend","renderer:selected","renderer:chapterUnload","renderer:chapterUnloaded","renderer:chapterDisplayed","renderer:locationChanged","renderer:visibleLocationChanged","renderer:resized","renderer:spreads"],EPUBJS.Renderer.prototype.initialize=function(e,t,r){this.container=e,this.element=this.render.create(),this.initWidth=t,this.initHeight=r,this.width=t||this.container.clientWidth,this.height=r||this.container.clientHeight,this.container.appendChild(this.element),t&&r?this.render.resize(this.width,this.height):this.render.resize("100%","100%"),document.addEventListener("orientationchange",this.onResized)},EPUBJS.Renderer.prototype.displayChapter=function(e,t){return this._moving?void console.error("Rendering In Progress"):(this._moving=!0,e.render().then(function(r){return this.currentChapter&&(this.trigger("renderer:chapterUnload"),this.currentChapter.unload(),this.render.window&&this.render.window.removeEventListener("resize",this.resized),this.removeEventListeners(),this.removeSelectionListeners(),this.trigger("renderer:chapterUnloaded"),this.contents=null,this.doc=null,this.pageMap=null),this.currentChapter=e,this.chapterPos=1,this.currentChapterCfiBase=e.cfiBase,this.layoutSettings=this.reconcileLayoutSettings(t,e.properties),this.load(r,e.href)}.bind(this)))},EPUBJS.Renderer.prototype.load=function(e,t){var r=new RSVP.defer;return this.layoutMethod=this.determineLayout(this.layoutSettings),this.layout=new EPUBJS.Layout[this.layoutMethod],this.visible(!1),this.render.load(e,t).then(function(e){this.afterLoad(e),this.beforeDisplay(function(){this.afterDisplay(),this.visible(!0),r.resolve(this)}.bind(this))}.bind(this)),r.promise},EPUBJS.Renderer.prototype.afterLoad=function(e){this.currentChapter.setDocument(this.render.document),this.contents=e,this.doc=this.render.document,this.formated=this.layout.format(e,this.render.width,this.render.height,this.gap),this.render.setPageDimensions(this.formated.pageWidth,this.formated.pageHeight),this.initWidth||this.initHeight||this.render.window.addEventListener("resize",this.resized,!1),this.addEventListeners(),this.addSelectionListeners()},EPUBJS.Renderer.prototype.afterDisplay=function(e){var t=this.layout.calculatePages(),r=this.currentChapter,n=this._q.length();this._moving=!1,this.updatePages(t),this.visibleRangeCfi=this.getVisibleRangeCfi(),this.currentLocationCfi=this.visibleRangeCfi.start,0===n&&(this.trigger("renderer:locationChanged",this.currentLocationCfi),this.trigger("renderer:visibleRangeChanged",this.visibleRangeCfi)),r.cfi=this.currentLocationCfi,this.trigger("renderer:chapterDisplayed",r)},EPUBJS.Renderer.prototype.loaded=function(e){this.trigger("render:loaded",e)},EPUBJS.Renderer.prototype.reconcileLayoutSettings=function(e,t){var r={};for(var n in e)e.hasOwnProperty(n)&&(r[n]=e[n]);return t.forEach(function(e){var t,n,o=e.replace("rendition:",""),i=o.indexOf("-");-1!=i&&(t=o.slice(0,i),n=o.slice(i+1),r[t]=n)}),r},EPUBJS.Renderer.prototype.determineLayout=function(e){var t=this.determineSpreads(this.minSpreadWidth),r=t?"ReflowableSpreads":"Reflowable",n=!1;return"pre-paginated"===e.layout&&(r="Fixed",n=!0,t=!1),"reflowable"===e.layout&&"none"===e.spread&&(r="Reflowable",n=!1,t=!1),"reflowable"===e.layout&&"both"===e.spread&&(r="ReflowableSpreads",n=!1,t=!0),this.spreads=t,this.render.scroll(n),this.trigger("renderer:spreads",t),r},EPUBJS.Renderer.prototype.beforeDisplay=function(e,t){this.triggerHooks("beforeChapterDisplay",e,this)},EPUBJS.Renderer.prototype.updatePages=function(e){this.pageMap=this.mapPage(),this.spreads?this.displayedPages=Math.ceil(this.pageMap.length/2):this.displayedPages=this.pageMap.length,this.currentChapter.pages=this.pageMap.length,this._q.flush()},EPUBJS.Renderer.prototype.reformat=function(){var e,t,r=this;this.contents&&(t=this.determineSpreads(this.minSpreadWidth),t!=this.spreads&&(this.spreads=t,this.layoutMethod=this.determineLayout(this.layoutSettings),this.layout=new EPUBJS.Layout[this.layoutMethod]),this.chapterPos=1,this.render.page(this.chapterPos),r.formated=r.layout.format(r.render.docEl,r.render.width,r.render.height,r.gap),r.render.setPageDimensions(r.formated.pageWidth,r.formated.pageHeight),e=r.layout.calculatePages(),r.updatePages(e),r.currentLocationCfi&&r.gotoCfi(r.currentLocationCfi))},EPUBJS.Renderer.prototype.visible=function(e){return"undefined"==typeof e?this.element.style.visibility:void(e!==!0||this.hidden?e===!1&&(this.element.style.visibility="hidden"):this.element.style.visibility="visible")},EPUBJS.Renderer.prototype.remove=function(){this.render.window&&(this.render.unload(),this.render.window.removeEventListener("resize",this.resized),this.removeEventListeners(),this.removeSelectionListeners()),this.container.removeChild(this.element)},EPUBJS.Renderer.prototype.applyStyles=function(e){for(var t in e)this.render.setStyle(t,e[t])},EPUBJS.Renderer.prototype.setStyle=function(e,t,r){this.render.setStyle(e,t,r)},EPUBJS.Renderer.prototype.removeStyle=function(e){this.render.removeStyle(e)},EPUBJS.Renderer.prototype.applyHeadTags=function(e){for(var t in e)this.render.addHeadTag(t,e[t])},EPUBJS.Renderer.prototype.page=function(e){return this.pageMap?e>=1&&e<=this.displayedPages?(this.chapterPos=e,this.render.page(e),this.visibleRangeCfi=this.getVisibleRangeCfi(),this.currentLocationCfi=this.visibleRangeCfi.start,this.trigger("renderer:locationChanged",this.currentLocationCfi),this.trigger("renderer:visibleRangeChanged",this.visibleRangeCfi),!0):!1:(console.warn("pageMap not set, queuing"),this._q.enqueue("page",arguments),!0)},EPUBJS.Renderer.prototype.nextPage=function(){return this.page(this.chapterPos+1)},EPUBJS.Renderer.prototype.prevPage=function(){return this.page(this.chapterPos-1)},EPUBJS.Renderer.prototype.pageByElement=function(e){var t;e&&(t=this.render.getPageNumberByElement(e),this.page(t))},EPUBJS.Renderer.prototype.lastPage=function(){return this._moving?this._q.enqueue("lastPage",arguments):void this.page(this.displayedPages)},EPUBJS.Renderer.prototype.firstPage=function(){return this._moving?this._q.enqueue("firstPage",arguments):void this.page(1)},EPUBJS.Renderer.prototype.section=function(e){var t=this.doc.getElementById(e);t&&this.pageByElement(t)},EPUBJS.Renderer.prototype.firstElementisTextNode=function(e){var t=e.childNodes,r=t.length;return r&&t[0]&&3===t[0].nodeType&&t[0].textContent.trim().length?!0:!1},EPUBJS.Renderer.prototype.isGoodNode=function(e){var t=["audio","canvas","embed","iframe","img","math","object","svg","video"];return-1!==t.indexOf(e.tagName.toLowerCase())?!0:this.firstElementisTextNode(e)},EPUBJS.Renderer.prototype.walk=function(e,t,r){for(var n,o,i,s,a=e,c=[a],h=1e4,p=0;!n&&c.length;){if(e=c.shift(),this.containsPoint(e,t,r)&&this.isGoodNode(e)&&(n=e),!n&&e&&e.childElementCount>0){if(o=e.children,!o||!o.length)return n;i=o.length?o.length:0;for(var u=i-1;u>=0;u--)o[u]!=s&&c.unshift(o[u])}if(!n&&0===c.length&&a&&null!==a.parentNode&&(c.push(a.parentNode),s=a,a=a.parentNode),p++,p>h){console.error("ENDLESS LOOP");break}}return n},EPUBJS.Renderer.prototype.containsPoint=function(e,t,r){var n;return e&&"function"==typeof e.getBoundingClientRect&&(n=e.getBoundingClientRect(),0!==n.width&&0!==n.height&&n.left>=t&&t<=n.left+n.width)?!0:!1},EPUBJS.Renderer.prototype.textSprint=function(e,t){var r,n,o=function(e){return/^\s*$/.test(e.data)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT};try{for(r=document.createTreeWalker(e,NodeFilter.SHOW_TEXT,{acceptNode:o},!1);n=r.nextNode();)t(n)}catch(i){for(r=document.createTreeWalker(e,NodeFilter.SHOW_TEXT,o,!1);n=r.nextNode();)t(n)}},EPUBJS.Renderer.prototype.sprint=function(e,t){for(var r,n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,null,!1);r=n.nextNode();)t(r)},EPUBJS.Renderer.prototype.mapPage=function(){var e,t,r,n,o,i,s,a,c=this,h=[],p=this.render.getBaseElement(),u=1,l=this.layout.colWidth+this.layout.gap,d=this.formated.pageWidth*(this.chapterPos-1),f=l*u-d,g=0,m=function(t){var r,o,i;if(t.nodeType==Node.TEXT_NODE){if(o=document.createRange(),o.selectNodeContents(t),r=o.getBoundingClientRect(),!r||0===r.width&&0===r.height)return;r.left>g&&(i=y(t)),r.right>g&&(i=y(t)),n=t,i&&(e=null)}},y=function(o){var i,s=c.splitTextNodeIntoWordsRanges(o);return s.forEach(function(o){var s=o.getBoundingClientRect();!s||0===s.width&&0===s.height||(s.left+s.width<f?h[u-1]||(o.collapse(!0),r=c.currentChapter.cfiFromRange(o),i=h.push({start:r,end:null})):(!e&&n&&(t=c.splitTextNodeIntoWordsRanges(n),e=t[t.length-1]),e&&(e.collapse(!1),r=c.currentChapter.cfiFromRange(e),h[h.length-1].end=r),o.collapse(!0),r=c.currentChapter.cfiFromRange(o),i=h.push({start:r,end:null}),u+=1,f=l*u-d,g=f),e=o)}),i},v=this.render.getDocumentElement(),E=v.dir;return"rtl"==E&&(v.dir="ltr",v.style.position="static"),this.textSprint(p,m),"rtl"==E&&(v.dir=E,v.style.left="auto",v.style.right="0"),!e&&n&&(t=c.splitTextNodeIntoWordsRanges(n),e=t[t.length-1]),e&&(e.collapse(!1),r=c.currentChapter.cfiFromRange(e),h[h.length-1].end=r),h.length||(o=this.doc.createRange(),o.selectNodeContents(p),o.collapse(!0),s=c.currentChapter.cfiFromRange(o),i=this.doc.createRange(),i.selectNodeContents(p),i.collapse(!1),a=c.currentChapter.cfiFromRange(i),h.push({start:s,end:a})),e=null,t=void 0,o=null,i=null,p=null,h},EPUBJS.Renderer.prototype.indexOfBreakableChar=function(e,t){var r="- 	\r\n\b\f";t||(t=0);for(var n=t;n<e.length;n++)if(-1!=r.indexOf(e.charAt(n)))return n;return-1},EPUBJS.Renderer.prototype.splitTextNodeIntoWordsRanges=function(e){var t,r=[],n=e.textContent.trim(),o=this.indexOfBreakableChar(n);if(-1===o)return t=this.doc.createRange(),t.selectNodeContents(e),[t];for(t=this.doc.createRange(),t.setStart(e,0),t.setEnd(e,o),r.push(t),t=this.doc.createRange(),t.setStart(e,o+1);-1!=o;)o=this.indexOfBreakableChar(n,o+1),o>0&&(t&&(t.setEnd(e,o),r.push(t)),t=this.doc.createRange(),t.setStart(e,o+1));return t&&(t.setEnd(e,n.length),r.push(t)),r},EPUBJS.Renderer.prototype.rangePosition=function(e){var t,r;return r=e.getClientRects(),r.length?t=r[0]:null},EPUBJS.Renderer.prototype.getPageCfi=function(){var e=2*this.chapterPos-1;return this.pageMap[e].start},EPUBJS.Renderer.prototype.getRange=function(e,t,r){var n,o=this.doc.createRange();return r=!0,"undefined"==typeof document.caretPositionFromPoint||r?"undefined"==typeof document.caretRangeFromPoint||r?(this.visibileEl=this.findElementAfter(e,t),o.setStart(this.visibileEl,1)):o=this.doc.caretRangeFromPoint(e,t):(n=this.doc.caretPositionFromPoint(e,t),o.setStart(n.offsetNode,n.offset)),o},EPUBJS.Renderer.prototype.pagesInCurrentChapter=function(){var e,t;return this.pageMap?(t=this.pageMap.length,e=this.spreads?Math.ceil(t/2):t):(console.warn("page map not loaded"),!1)},EPUBJS.Renderer.prototype.currentRenderedPage=function(){var e;return this.pageMap?e=this.spreads&&this.pageMap.length>1?2*this.chapterPos:this.chapterPos:(console.warn("page map not loaded"),!1)},EPUBJS.Renderer.prototype.getRenderedPagesLeft=function(){var e,t,r;return this.pageMap?(t=this.pageMap.length,e=this.spreads?2*this.chapterPos:this.chapterPos,r=t-e):(console.warn("page map not loaded"),!1)},EPUBJS.Renderer.prototype.getVisibleRangeCfi=function(){var e,t,r;return this.pageMap?(this.spreads?(e=2*this.chapterPos,t=this.pageMap[e-2],r=t,this.pageMap.length>1&&this.pageMap.length>e-1&&(r=this.pageMap[e-1])):(e=this.chapterPos,t=this.pageMap[e-1],r=t),t||(console.warn("page range miss:",e,this.pageMap),t=this.pageMap[this.pageMap.length-1],r=t),{start:t.start,end:r.end}):(console.warn("page map not loaded"),!1)},EPUBJS.Renderer.prototype.gotoCfi=function(e){var t,r,n;if(this._moving)return this._q.enqueue("gotoCfi",arguments);if(EPUBJS.core.isString(e)&&(e=this.epubcfi.parse(e)),"undefined"==typeof document.evaluate)r=this.epubcfi.addMarker(e,this.doc),r&&(t=this.render.getPageNumberByElement(r),this.epubcfi.removeMarker(r,this.doc),this.page(t));else if(n=this.epubcfi.generateRangeFromCfi(e,this.doc)){var o=n.getBoundingClientRect();t=o?this.render.getPageNumberByRect(o):1,this.page(t),this.currentLocationCfi=e.str}else this.page(1)},EPUBJS.Renderer.prototype.findFirstVisible=function(e){var t,r=e||this.render.getBaseElement();return t=this.walk(r,0,0),t?t:e},EPUBJS.Renderer.prototype.findElementAfter=function(e,t,r){var n,o=r||this.render.getBaseElement();return n=this.walk(o,e,t),n?n:o},EPUBJS.Renderer.prototype.resize=function(e,t,r){this.width=e,this.height=t,r!==!1&&this.render.resize(this.width,this.height),this.contents&&this.reformat(),this.trigger("renderer:resized",{width:this.width,height:this.height})},EPUBJS.Renderer.prototype.onResized=function(e){var t=this.container.clientWidth,r=this.container.clientHeight;this.resize(t,r,!1)},EPUBJS.Renderer.prototype.addEventListeners=function(){this.render.document&&this.listenedEvents.forEach(function(e){this.render.document.addEventListener(e,this.triggerEvent.bind(this),!1)},this)},EPUBJS.Renderer.prototype.removeEventListeners=function(){this.render.document&&this.listenedEvents.forEach(function(e){this.render.document.removeEventListener(e,this.triggerEvent,!1)},this)},EPUBJS.Renderer.prototype.triggerEvent=function(e){this.trigger("renderer:"+e.type,e)},EPUBJS.Renderer.prototype.addSelectionListeners=function(){this.render.document.addEventListener("selectionchange",this.onSelectionChange.bind(this),!1)},EPUBJS.Renderer.prototype.removeSelectionListeners=function(){this.render.document&&this.doc.removeEventListener("selectionchange",this.onSelectionChange,!1)},EPUBJS.Renderer.prototype.onSelectionChange=function(e){this.selectionEndTimeout&&clearTimeout(this.selectionEndTimeout),this.selectionEndTimeout=setTimeout(function(){this.selectedRange=this.render.window.getSelection(),this.trigger("renderer:selected",this.selectedRange)}.bind(this),500)},EPUBJS.Renderer.prototype.setMinSpreadWidth=function(e){this.minSpreadWidth=e,this.spreads=this.determineSpreads(e)},EPUBJS.Renderer.prototype.determineSpreads=function(e){return this.isForcedSingle||!e||this.width<e?!1:!0},EPUBJS.Renderer.prototype.forceSingle=function(e){e?this.isForcedSingle=!0:this.isForcedSingle=!1},EPUBJS.Renderer.prototype.setGap=function(e){this.gap=e},EPUBJS.Renderer.prototype.setDirection=function(e){this.direction=e,this.render.setDirection(this.direction)},EPUBJS.Renderer.prototype.replace=function(e,t,r,n){var o=this.contents.querySelectorAll(e),i=Array.prototype.slice.call(o),s=i.length;return 0===s?void r(!1):void i.forEach(function(e){var o=!1,i=function(e,t){o===!1&&(s--,n&&n(e,t,s),0>=s&&r&&r(!0),o=!0)};t(e,i)}.bind(this))},RSVP.EventTarget.mixin(EPUBJS.Renderer.prototype);var EPUBJS=EPUBJS||{};EPUBJS.replace={},EPUBJS.replace.hrefs=function(e,t){var r=this,n=function(e,n){var o,i,s,a,c,h=e.getAttribute("href"),p=h.search("://");-1!=p?e.setAttribute("target","_blank"):(s=t.render.docEl.querySelector("base"),c=s.getAttribute("href"),a=EPUBJS.core.uri(c),o=a.directory,i=o?"file"===a.protocol?EPUBJS.core.resolveUrl(a.base,h):EPUBJS.core.resolveUrl(o,h):h,e.onclick=function(){return r["goto"](i),!1}),n()};t.replace("a[href]",n,e)},EPUBJS.replace.head=function(e,t){t.replaceWithStored("link[href]","href",EPUBJS.replace.links,e)},EPUBJS.replace.resources=function(e,t){t.replaceWithStored("[src]","src",EPUBJS.replace.srcs,e)},EPUBJS.replace.svg=function(e,t){t.replaceWithStored("svg image","xlink:href",function(e,t,r){e.getUrl(t).then(r)},e)},EPUBJS.replace.srcs=function(e,t,r){e.getUrl(t).then(r)},EPUBJS.replace.links=function(e,t,r,n){"stylesheet"===n.getAttribute("rel")?EPUBJS.replace.stylesheets(e,t).then(function(e,t){r(e,t)},function(e){r(null)}):e.getUrl(t).then(r,function(e){r(null)})},EPUBJS.replace.stylesheets=function(e,t){var r=new RSVP.defer;if(e)return e.getText(t).then(function(n){EPUBJS.replace.cssUrls(e,t,n).then(function(e){var t=window.URL||window.webkitURL||window.mozURL,n=new Blob([e],{type:"text/css"}),o=t.createObjectURL(n);r.resolve(o)},function(e){r.reject(e)})},function(e){r.reject(e)}),r.promise},EPUBJS.replace.cssUrls=function(e,t,r){var n=new RSVP.defer,o=[],i=r.match(/url\(\'?\"?((?!data:)[^\'|^\"^\)]*)\'?\"?\)/g);if(e)return i?(i.forEach(function(i){var s=EPUBJS.core.resolveUrl(t,i.replace(/url\(|[|\)|\'|\"]|\?.*$/g,"")),a=e.getUrl(s).then(function(e){r=r.replace(i,'url("'+e+'")')},function(e){n.reject(e)});o.push(a)}),RSVP.all(o).then(function(){n.resolve(r)}),n.promise):(n.resolve(r),n.promise)},EPUBJS.Storage=function(e){this.checkRequirements(),this.urlCache={},this.withCredentials=e,this.URL=window.URL||window.webkitURL||window.mozURL,this.offline=!1},EPUBJS.Storage.prototype.checkRequirements=function(e){"undefined"==typeof localforage&&console.error("localForage library not loaded")},EPUBJS.Storage.prototype.put=function(e,t){var r=new RSVP.defer,n=e.length,o=0,i=function(t){var r,s,a=t||new RSVP.defer;return o>=n?a.resolve():(r=e[o].url,s=window.encodeURIComponent(r),EPUBJS.core.request(r,"binary").then(function(e){return localforage.setItem(s,e)}).then(function(e){o++,setTimeout(function(){i(a)},1)})),a.promise}.bind(this);return Array.isArray(e)||(e=[e]),i().then(function(){r.resolve()}.bind(this)),r.promise},EPUBJS.Storage.prototype.token=function(e,t){var r=window.encodeURIComponent(e);return localforage.setItem(r,t).then(function(e){return null===e?!1:!0})},EPUBJS.Storage.prototype.isStored=function(e){var t=window.encodeURIComponent(e);return localforage.getItem(t).then(function(e){return null===e?!1:!0})},EPUBJS.Storage.prototype.getText=function(e){var t=window.encodeURIComponent(e);return EPUBJS.core.request(e,"arraybuffer",this.withCredentials).then(function(e){return this.offline&&(this.offline=!1,this.trigger("offline",!1)),localforage.setItem(t,e),e}.bind(this)).then(function(t){var r=new RSVP.defer,n=EPUBJS.core.getMimeType(e),o=new Blob([t],{type:n}),i=new FileReader;return i.addEventListener("loadend",function(){r.resolve(i.result)}),i.readAsText(o,n),r.promise})["catch"](function(){var r=new RSVP.defer,n=localforage.getItem(t);return this.offline||(this.offline=!0,this.trigger("offline",!0)),n?(n.then(function(t){var n=EPUBJS.core.getMimeType(e),o=new Blob([t],{type:n}),i=new FileReader;i.addEventListener("loadend",function(){r.resolve(i.result)}),i.readAsText(o,n)}),r.promise):(r.reject({message:"File not found in the storage: "+e,stack:(new Error).stack}),r.promise)}.bind(this))},EPUBJS.Storage.prototype.getUrl=function(e){var t=window.encodeURIComponent(e);return EPUBJS.core.request(e,"arraybuffer",this.withCredentials).then(function(r){return this.offline&&(this.offline=!1,this.trigger("offline",!1)),localforage.setItem(t,r),e}.bind(this))["catch"](function(){var r,n,o=new RSVP.defer,i=window.URL||window.webkitURL||window.mozURL;return this.offline||(this.offline=!0,this.trigger("offline",!0)),t in this.urlCache?(o.resolve(this.urlCache[t]),o.promise):(r=localforage.getItem(t))?(r.then(function(r){var s=new Blob([r],{type:EPUBJS.core.getMimeType(e)});n=i.createObjectURL(s),o.resolve(n),this.urlCache[t]=n}.bind(this)),o.promise):(o.reject({message:"File not found in the storage: "+e,stack:(new Error).stack}),o.promise)}.bind(this))},EPUBJS.Storage.prototype.getXml=function(e){var t=window.encodeURIComponent(e);return EPUBJS.core.request(e,"arraybuffer",this.withCredentials).then(function(e){return this.offline&&(this.offline=!1,this.trigger("offline",!1)),localforage.setItem(t,e),e}.bind(this)).then(function(t){var r=new RSVP.defer,n=EPUBJS.core.getMimeType(e),o=new Blob([t],{type:n}),i=new FileReader;return i.addEventListener("loadend",function(){var e=new DOMParser,t=e.parseFromString(i.result,"text/xml");r.resolve(t)}),i.readAsText(o,n),r.promise})["catch"](function(){var r=new RSVP.defer,n=localforage.getItem(t);return this.offline||(this.offline=!0,this.trigger("offline",!0)),n?(n.then(function(t){var n=EPUBJS.core.getMimeType(e),o=new Blob([t],{type:n}),i=new FileReader;i.addEventListener("loadend",function(){var e=new DOMParser,t=e.parseFromString(i.result,"text/xml");r.resolve(t)}),i.readAsText(o,n)}),r.promise):(r.reject({message:"File not found in the storage: "+e,stack:(new Error).stack}),r.promise)}.bind(this))},EPUBJS.Storage.prototype.revokeUrl=function(e){var t=window.URL||window.webkitURL||window.mozURL,r=this.urlCache[e];r&&t.revokeObjectURL(r)},EPUBJS.Storage.prototype.failed=function(e){console.error(e)},RSVP.EventTarget.mixin(EPUBJS.Storage.prototype),EPUBJS.Unarchiver=function(e){this.checkRequirements(),this.urlCache={}},EPUBJS.Unarchiver.prototype.checkRequirements=function(e){"undefined"==typeof JSZip&&console.error("JSZip lib not loaded")},EPUBJS.Unarchiver.prototype.open=function(e,t){if(e instanceof ArrayBuffer){this.zip=new JSZip(e);var r=new RSVP.defer;return r.resolve(),r.promise}return EPUBJS.core.request(e,"binary").then(function(e){this.zip=new JSZip(e)}.bind(this))},EPUBJS.Unarchiver.prototype.getXml=function(e,t){var r=window.decodeURIComponent(e);return this.getText(r,t).then(function(t){var r=new DOMParser,n=EPUBJS.core.getMimeType(e);return r.parseFromString(t,n)})},EPUBJS.Unarchiver.prototype.getUrl=function(e,t){var r,n,o=this,i=new RSVP.defer,s=window.decodeURIComponent(e),a=this.zip.file(s),c=window.URL||window.webkitURL||window.mozURL;return a?e in this.urlCache?(i.resolve(this.urlCache[e]),i.promise):(n=new Blob([a.asUint8Array()],{type:EPUBJS.core.getMimeType(a.name)}),r=c.createObjectURL(n),i.resolve(r),o.urlCache[e]=r,i.promise):(i.reject({message:"File not found in the epub: "+e,stack:(new Error).stack}),i.promise)},EPUBJS.Unarchiver.prototype.getText=function(e,t){var r,n=new RSVP.defer,o=window.decodeURIComponent(e),i=this.zip.file(o);return i?(r=i.asText(),n.resolve(r),n.promise):(n.reject({message:"File not found in the epub: "+e,stack:(new Error).stack}),n.promise)},EPUBJS.Unarchiver.prototype.revokeUrl=function(e){var t=window.URL||window.webkitURL||window.mozURL,r=this.urlCache[e];r&&t.revokeObjectURL(r)},EPUBJS.Unarchiver.prototype.failed=function(e){console.error(e)},EPUBJS.Unarchiver.prototype.afterSaved=function(e){this.callback()},EPUBJS.Unarchiver.prototype.toStorage=function(e){function t(){i--,0===i&&o.afterSaved()}var r=0,n=20,o=this,i=e.length;e.forEach(function(e){setTimeout(function(e){o.saveEntryFileToStorage(e,t)},r,e),r+=n}),console.log("time",r)},function(){"use strict";var e={application:{ecmascript:["es","ecma"],javascript:"js",ogg:"ogx",pdf:"pdf",postscript:["ps","ai","eps","epsi","epsf","eps2","eps3"],"rdf+xml":"rdf",smil:["smi","smil"],"xhtml+xml":["xhtml","xht"],xml:["xml","xsl","xsd","opf","ncx"],zip:"zip","x-httpd-eruby":"rhtml","x-latex":"latex","x-maker":["frm","maker","frame","fm","fb","book","fbdoc"],"x-object":"o","x-shockwave-flash":["swf","swfl"],"x-silverlight":"scr","epub+zip":"epub","font-tdpfr":"pfr","inkml+xml":["ink","inkml"],json:"json","jsonml+json":"jsonml","mathml+xml":"mathml","metalink+xml":"metalink",mp4:"mp4s","omdoc+xml":"omdoc",oxps:"oxps","vnd.amazon.ebook":"azw",widget:"wgt","x-dtbook+xml":"dtb","x-dtbresource+xml":"res","x-font-bdf":"bdf","x-font-ghostscript":"gsf","x-font-linux-psf":"psf","x-font-otf":"otf","x-font-pcf":"pcf","x-font-snf":"snf","x-font-ttf":["ttf","ttc"],"x-font-type1":["pfa","pfb","pfm","afm"],"x-font-woff":"woff","x-mobipocket-ebook":["prc","mobi"],"x-mspublisher":"pub","x-nzb":"nzb","x-tgif":"obj","xaml+xml":"xaml","xml-dtd":"dtd","xproc+xml":"xpl","xslt+xml":"xslt","internet-property-stream":"acx","x-compress":"z","x-compressed":"tgz","x-gzip":"gz"},audio:{flac:"flac",midi:["mid","midi","kar","rmi"],mpeg:["mpga","mpega","mp2","mp3","m4a","mp2a","m2a","m3a"],mpegurl:"m3u",ogg:["oga","ogg","spx"],"x-aiff":["aif","aiff","aifc"],"x-ms-wma":"wma","x-wav":"wav",adpcm:"adp",mp4:"mp4a",webm:"weba","x-aac":"aac","x-caf":"caf",
"x-matroska":"mka","x-pn-realaudio-plugin":"rmp",xm:"xm",mid:["mid","rmi"]},image:{gif:"gif",ief:"ief",jpeg:["jpeg","jpg","jpe"],pcx:"pcx",png:"png","svg+xml":["svg","svgz"],tiff:["tiff","tif"],"x-icon":"ico",bmp:"bmp",webp:"webp","x-pict":["pic","pct"],"x-tga":"tga","cis-cod":"cod"},message:{rfc822:["eml","mime","mht","mhtml","nws"]},text:{"cache-manifest":["manifest","appcache"],calendar:["ics","icz","ifb"],css:"css",csv:"csv",h323:"323",html:["html","htm","shtml","stm"],iuls:"uls",mathml:"mml",plain:["txt","text","brf","conf","def","list","log","in","bas"],richtext:"rtx","tab-separated-values":"tsv","x-bibtex":"bib","x-dsrc":"d","x-diff":["diff","patch"],"x-haskell":"hs","x-java":"java","x-literate-haskell":"lhs","x-moc":"moc","x-pascal":["p","pas"],"x-pcs-gcd":"gcd","x-perl":["pl","pm"],"x-python":"py","x-scala":"scala","x-setext":"etx","x-tcl":["tcl","tk"],"x-tex":["tex","ltx","sty","cls"],"x-vcard":"vcf",sgml:["sgml","sgm"],"x-c":["c","cc","cxx","cpp","h","hh","dic"],"x-fortran":["f","for","f77","f90"],"x-opml":"opml","x-nfo":"nfo","x-sfv":"sfv","x-uuencode":"uu",webviewhtml:"htt"},video:{mpeg:["mpeg","mpg","mpe","m1v","m2v","mp2","mpa","mpv2"],mp4:["mp4","mp4v","mpg4"],quicktime:["qt","mov"],ogg:"ogv","vnd.mpegurl":["mxu","m4u"],"x-flv":"flv","x-la-asf":["lsf","lsx"],"x-mng":"mng","x-ms-asf":["asf","asx","asr"],"x-ms-wm":"wm","x-ms-wmv":"wmv","x-ms-wmx":"wmx","x-ms-wvx":"wvx","x-msvideo":"avi","x-sgi-movie":"movie","x-matroska":["mpv","mkv","mk3d","mks"],"3gpp2":"3g2",h261:"h261",h263:"h263",h264:"h264",jpeg:"jpgv",jpm:["jpm","jpgm"],mj2:["mj2","mjp2"],"vnd.ms-playready.media.pyv":"pyv","vnd.uvvu.mp4":["uvu","uvvu"],"vnd.vivo":"viv",webm:"webm","x-f4v":"f4v","x-m4v":"m4v","x-ms-vob":"vob","x-smv":"smv"}},t=function(){var t,r,n,o,i={};for(t in e)if(e.hasOwnProperty(t))for(r in e[t])if(e[t].hasOwnProperty(r))if(n=e[t][r],"string"==typeof n)i[n]=t+"/"+r;else for(o=0;o<n.length;o++)i[n[o]]=t+"/"+r;return i}();EPUBJS.core.getMimeType=function(e){var r="text/plain";return e&&t[e.split(".").pop().toLowerCase()]||r}}();
"use strict";(function(){function e(e){return"function"==typeof e||"object"==typeof e&&null!==e}function t(e){return"function"==typeof e}function r(e){return"object"==typeof e&&null!==e}function n(){}function o(e,t){for(var r=0,n=e.length;n>r;r++)if(e[r]===t)return r;return-1}function i(e){var t=e._promiseCallbacks;return t||(t=e._promiseCallbacks={}),t}function s(e,t){return"onerror"===e?void Pe.on("error",t):2!==arguments.length?Pe[e]:void(Pe[e]=t)}function a(){setTimeout(function(){for(var e,t=0;t<Be.length;t++){e=Be[t];var r=e.payload;r.guid=r.key+r.id,r.childGuid=r.key+r.childId,r.error&&(r.stack=r.error.stack),Pe.trigger(e.name,e.payload)}Be.length=0},50)}function c(e,t,r){1===Be.push({name:e,payload:{key:t._guidKey,id:t._id,eventName:e,detail:t._result,childId:r&&r._id,label:t._label,timeStamp:ve(),error:Pe["instrument-with-stack"]?new Error(t._label):null}})&&a()}function h(){return new TypeError("A promises callback cannot return that same promise.")}function p(){}function u(e){try{return e.then}catch(t){return xe.error=t,xe}}function l(e,t,r,n){try{e.call(t,r,n)}catch(o){return o}}function d(e,t,r){Pe.async(function(e){var n=!1,o=l(r,t,function(r){n||(n=!0,t!==r?m(e,r):v(e,r))},function(t){n||(n=!0,E(e,t))},"Settle: "+(e._label||" unknown promise"));!n&&o&&(n=!0,E(e,o))},e)}function f(e,t){t._state===Je?v(e,t._result):t._state===we?(t._onError=null,E(e,t._result)):S(t,void 0,function(r){t!==r?m(e,r):v(e,r)},function(t){E(e,t)})}function g(e,r){if(r.constructor===e.constructor)f(e,r);else{var n=u(r);n===xe?E(e,xe.error):void 0===n?v(e,r):t(n)?d(e,r,n):v(e,r)}}function m(t,r){t===r?v(t,r):e(r)?g(t,r):v(t,r)}function y(e){e._onError&&e._onError(e._result),P(e)}function v(e,t){e._state===be&&(e._result=t,e._state=Je,0===e._subscribers.length?Pe.instrument&&Ue("fulfilled",e):Pe.async(P,e))}function E(e,t){e._state===be&&(e._state=we,e._result=t,Pe.async(y,e))}function S(e,t,r,n){var o=e._subscribers,i=o.length;e._onError=null,o[i]=t,o[i+Je]=r,o[i+we]=n,0===i&&e._state&&Pe.async(P,e)}function P(e){var t=e._subscribers,r=e._state;if(Pe.instrument&&Ue(r===Je?"fulfilled":"rejected",e),0!==t.length){for(var n,o,i=e._result,s=0;s<t.length;s+=3)n=t[s],o=t[s+r],n?b(r,n,o,i):o(i);e._subscribers.length=0}}function B(){this.error=null}function U(e,t){try{return e(t)}catch(r){return Re.error=r,Re}}function b(e,r,n,o){var i,s,a,c,p=t(n);if(p){if(i=U(n,o),i===Re?(c=!0,s=i.error,i=null):a=!0,r===i)return void E(r,h())}else i=o,a=!0;r._state!==be||(p&&a?m(r,i):c?E(r,s):e===Je?v(r,i):e===we&&E(r,i))}function J(e,t){var r=!1;try{t(function(t){r||(r=!0,m(e,t))},function(t){r||(r=!0,E(e,t))})}catch(n){E(e,n)}}function w(e,t,r){return e===Je?{state:"fulfilled",value:r}:{state:"rejected",reason:r}}function x(e,t,r,n){var o=this;o._instanceConstructor=e,o.promise=new e(p,n),o._abortOnReject=r,o._validateInput(t)?(o._input=t,o.length=t.length,o._remaining=t.length,o._init(),0===o.length?v(o.promise,o._result):(o.length=o.length||0,o._enumerate(),0===o._remaining&&v(o.promise,o._result))):E(o.promise,o._validationError())}function R(e,t){return new Ce(this,e,!0,t).promise}function C(e,t){function r(e){m(i,e)}function n(e){E(i,e)}var o=this,i=new o(p,t);if(!ye(e))return E(i,new TypeError("You must pass an array to race.")),i;for(var s=e.length,a=0;i._state===be&&s>a;a++)S(o.resolve(e[a]),void 0,r,n);return i}function k(e,t){var r=this;if(e&&"object"==typeof e&&e.constructor===r)return e;var n=new r(p,t);return m(n,e),n}function _(e,t){var r=this,n=new r(p,t);return E(n,e),n}function L(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function T(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function N(e,r){var n=this;n._id=Ie++,n._label=r,n._state=void 0,n._result=void 0,n._subscribers=[],Pe.instrument&&Ue("created",n),p!==e&&(t(e)||L(),n instanceof N||T(),J(n,e))}function I(e,t,r){this._superConstructor(e,t,!1,r)}function F(e,t){return new I(Fe,e,t).promise}function O(e,t){return Fe.all(e,t)}function A(e,t){Ke[je]=e,Ke[je+1]=t,je+=2,2===je&&Ae()}function M(){var e=process.nextTick,t=process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);return Array.isArray(t)&&"0"===t[1]&&"10"===t[2]&&(e=setImmediate),function(){e(V)}}function q(){return function(){Oe(V)}}function j(){var e=0,t=new ze(V),r=document.createTextNode("");return t.observe(r,{characterData:!0}),function(){r.data=e=++e%2}}function W(){var e=new MessageChannel;return e.port1.onmessage=V,function(){e.port2.postMessage(0)}}function D(){return function(){setTimeout(V,1)}}function V(){for(var e=0;je>e;e+=2){var t=Ke[e],r=Ke[e+1];t(r),Ke[e]=void 0,Ke[e+1]=void 0}je=0}function z(){try{var e=require,t=e("vertx");return Oe=t.runOnLoop||t.runOnContext,q()}catch(r){return D()}}function H(e){var t={};return t.promise=new Fe(function(e,r){t.resolve=e,t.reject=r},e),t}function X(e,r,n){return Fe.all(e,n).then(function(e){if(!t(r))throw new TypeError("You must pass a function as filter's second argument.");for(var o=e.length,i=new Array(o),s=0;o>s;s++)i[s]=r(e[s]);return Fe.all(i,n).then(function(t){for(var r=new Array(o),n=0,i=0;o>i;i++)t[i]&&(r[n]=e[i],n++);return r.length=n,r})})}function K(e,t,r){this._superConstructor(e,t,!0,r)}function Q(e,t,r){this._superConstructor(e,t,!1,r)}function G(e,t){return new Q(Fe,e,t).promise}function Y(e,t){return new Ye(Fe,e,t).promise}function $(e,r,n){return Fe.all(e,n).then(function(e){if(!t(r))throw new TypeError("You must pass a function as map's second argument.");for(var o=e.length,i=new Array(o),s=0;o>s;s++)i[s]=r(e[s]);return Fe.all(i,n)})}function Z(){this.value=void 0}function ee(e){try{return e.then}catch(t){return rt.value=t,rt}}function te(e,t,r){try{e.apply(t,r)}catch(n){return rt.value=n,rt}}function re(e,t){for(var r,n,o={},i=e.length,s=new Array(i),a=0;i>a;a++)s[a]=e[a];for(n=0;n<t.length;n++)r=t[n],o[r]=s[n+1];return o}function ne(e){for(var t=e.length,r=new Array(t-1),n=1;t>n;n++)r[n-1]=e[n];return r}function oe(e,t){return{then:function(r,n){return e.call(t,r,n)}}}function ie(e,t){var r=function(){for(var r,n=this,o=arguments.length,i=new Array(o+1),s=!1,a=0;o>a;++a){if(r=arguments[a],!s){if(s=ce(r),s===nt){var c=new Fe(p);return E(c,nt.value),c}s&&s!==!0&&(r=oe(s,r))}i[a]=r}var h=new Fe(p);return i[o]=function(e,r){e?E(h,e):void 0===t?m(h,r):t===!0?m(h,ne(arguments)):ye(t)?m(h,re(arguments,t)):m(h,r)},s?ae(h,i,e,n):se(h,i,e,n)};return r.__proto__=e,r}function se(e,t,r,n){var o=te(r,n,t);return o===rt&&E(e,o.value),e}function ae(e,t,r,n){return Fe.all(t).then(function(t){var o=te(r,n,t);return o===rt&&E(e,o.value),e})}function ce(e){return e&&"object"==typeof e?e.constructor===Fe?!0:ee(e):!1}function he(e,t){return Fe.race(e,t)}function pe(e,t){return Fe.reject(e,t)}function ue(e,t){return Fe.resolve(e,t)}function le(e){throw setTimeout(function(){throw e}),e}function de(e,t){Pe.async(e,t)}function fe(){Pe.on.apply(Pe,arguments)}function ge(){Pe.off.apply(Pe,arguments)}var me;me=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)};var ye=me,ve=Date.now||function(){return(new Date).getTime()},Ee=Object.create||function(e){if(arguments.length>1)throw new Error("Second argument not supported");if("object"!=typeof e)throw new TypeError("Argument must be an object");return n.prototype=e,new n},Se={mixin:function(e){return e.on=this.on,e.off=this.off,e.trigger=this.trigger,e._promiseCallbacks=void 0,e},on:function(e,t){if("function"!=typeof t)throw new TypeError("Callback must be a function");var r,n=i(this);r=n[e],r||(r=n[e]=[]),-1===o(r,t)&&r.push(t)},off:function(e,t){var r,n,s=i(this);return t?(r=s[e],n=o(r,t),void(-1!==n&&r.splice(n,1))):void(s[e]=[])},trigger:function(e,t,r){var n,o,s=i(this);if(n=s[e])for(var a=0;a<n.length;a++)(o=n[a])(t,r)}},Pe={instrument:!1};Se.mixin(Pe);var Be=[],Ue=c,be=void 0,Je=1,we=2,xe=new B,Re=new B,Ce=x;x.prototype._validateInput=function(e){return ye(e)},x.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")},x.prototype._init=function(){this._result=new Array(this.length)},x.prototype._enumerate=function(){for(var e=this,t=e.length,r=e.promise,n=e._input,o=0;r._state===be&&t>o;o++)e._eachEntry(n[o],o)},x.prototype._eachEntry=function(e,t){var n=this,o=n._instanceConstructor;r(e)?e.constructor===o&&e._state!==be?(e._onError=null,n._settledAt(e._state,t,e._result)):n._willSettleAt(o.resolve(e),t):(n._remaining--,n._result[t]=n._makeResult(Je,t,e))},x.prototype._settledAt=function(e,t,r){var n=this,o=n.promise;o._state===be&&(n._remaining--,n._abortOnReject&&e===we?E(o,r):n._result[t]=n._makeResult(e,t,r)),0===n._remaining&&v(o,n._result)},x.prototype._makeResult=function(e,t,r){return r},x.prototype._willSettleAt=function(e,t){var r=this;S(e,void 0,function(e){r._settledAt(Je,t,e)},function(e){r._settledAt(we,t,e)})};var ke=R,_e=C,Le=k,Te=_,Ne="rsvp_"+ve()+"-",Ie=0,Fe=N;N.cast=Le,N.all=ke,N.race=_e,N.resolve=Le,N.reject=Te,N.prototype={constructor:N,_guidKey:Ne,_onError:function(e){var t=this;Pe.after(function(){t._onError&&Pe.trigger("error",e,t._label)})},then:function(e,t,r){var n=this,o=n._state;if(o===Je&&!e||o===we&&!t)return Pe.instrument&&Ue("chained",n,n),n;n._onError=null;var i=new n.constructor(p,r),s=n._result;if(Pe.instrument&&Ue("chained",n,i),o){var a=arguments[o-1];Pe.async(function(){b(o,i,a,s)})}else S(n,i,e,t);return i},"catch":function(e,t){return this.then(void 0,e,t)},"finally":function(e,t){var r=this,n=r.constructor;return r.then(function(t){return n.resolve(e()).then(function(){return t})},function(t){return n.resolve(e()).then(function(){throw t})},t)}},I.prototype=Ee(Ce.prototype),I.prototype._superConstructor=Ce,I.prototype._makeResult=w,I.prototype._validationError=function(){return new Error("allSettled must be called with an array")};var Oe,Ae,Me=F,qe=O,je=0,We=({}.toString,A),De="undefined"!=typeof window?window:void 0,Ve=De||{},ze=Ve.MutationObserver||Ve.WebKitMutationObserver,He="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),Xe="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,Ke=new Array(1e3);Ae=He?M():ze?j():Xe?W():void 0===De&&"function"==typeof require?z():D();var Qe=H,Ge=X,Ye=K;K.prototype=Ee(Ce.prototype),K.prototype._superConstructor=Ce,K.prototype._init=function(){this._result={}},K.prototype._validateInput=function(e){return e&&"object"==typeof e},K.prototype._validationError=function(){return new Error("Promise.hash must be called with an object")},K.prototype._enumerate=function(){var e=this,t=e.promise,r=e._input,n=[];for(var o in r)t._state===be&&Object.prototype.hasOwnProperty.call(r,o)&&n.push({position:o,entry:r[o]});var i=n.length;e._remaining=i;for(var s,a=0;t._state===be&&i>a;a++)s=n[a],e._eachEntry(s.entry,s.position)},Q.prototype=Ee(Ye.prototype),Q.prototype._superConstructor=Ce,Q.prototype._makeResult=w,Q.prototype._validationError=function(){return new Error("hashSettled must be called with an object")};var $e,Ze=G,et=Y,tt=$,rt=new Z,nt=new Z,ot=ie;if("object"==typeof self)$e=self;else{if("object"!=typeof global)throw new Error("no global: `self` or `global` found");$e=global}var it=$e,st=he,at=pe,ct=ue,ht=le;if(Pe.async=We,Pe.after=function(e){setTimeout(e,0)},"undefined"!=typeof window&&"object"==typeof window.__PROMISE_INSTRUMENTATION__){var pt=window.__PROMISE_INSTRUMENTATION__;s("instrument",!0);for(var ut in pt)pt.hasOwnProperty(ut)&&fe(ut,pt[ut])}var lt={race:st,Promise:Fe,allSettled:Me,hash:et,hashSettled:Ze,denodeify:ot,on:fe,off:ge,map:tt,filter:Ge,resolve:ct,reject:at,all:qe,rethrow:ht,defer:Qe,EventTarget:Se,configure:s,async:de};"function"==typeof define&&define.amd?define(function(){return lt}):"undefined"!=typeof module&&module.exports?module.exports=lt:"undefined"!=typeof it&&(it.RSVP=lt)}).call(this);var EPUBJS=EPUBJS||{};EPUBJS.VERSION="0.2.13",EPUBJS.plugins=EPUBJS.plugins||{},EPUBJS.filePath=EPUBJS.filePath||"/epubjs/",EPUBJS.Render={},function(e){var t=(e.ePub||{},e.ePub=function(){var e,t;return"undefined"!=typeof arguments[0]&&("string"==typeof arguments[0]||arguments[0]instanceof ArrayBuffer)&&(e=arguments[0],arguments[1]&&"object"==typeof arguments[1]?(t=arguments[1],t.bookPath=e):t={bookPath:e}),!arguments[0]||"object"!=typeof arguments[0]||arguments[0]instanceof ArrayBuffer||(t=arguments[0]),new EPUBJS.Book(t)});"function"==typeof define&&define.amd?define(["rsvp"],function(){return t}):"undefined"!=typeof module&&module.exports&&(module.exports=t)}(window),EPUBJS.Book=function(e){this.settings=EPUBJS.core.defaults(e||{},{bookPath:void 0,bookKey:void 0,packageUrl:void 0,storage:!1,fromStorage:!1,saved:!1,online:!0,contained:!1,width:void 0,height:void 0,layoutOveride:void 0,orientation:void 0,minSpreadWidth:768,gap:"auto",version:1,restore:!1,reload:!1,"goto":!1,styles:{},headTags:{},withCredentials:!1,render_method:"Iframe"}),this.settings.EPUBJSVERSION=EPUBJS.VERSION,this.spinePos=0,this.stored=!1,this.online=this.settings.online||navigator.onLine,this.networkListeners(),this.ready={manifest:new RSVP.defer,spine:new RSVP.defer,metadata:new RSVP.defer,cover:new RSVP.defer,toc:new RSVP.defer,pageList:new RSVP.defer},this.readyPromises=[this.ready.manifest.promise,this.ready.spine.promise,this.ready.metadata.promise,this.ready.cover.promise,this.ready.toc.promise],this.pageList=[],this.pagination=new EPUBJS.Pagination,this.pageListReady=this.ready.pageList.promise,this.ready.all=RSVP.all(this.readyPromises),this.ready.all.then(this._ready.bind(this)),this.isRendered=!1,this._q=EPUBJS.core.queue(this),this._rendering=!1,this._displayQ=EPUBJS.core.queue(this),this._moving=!1,this._gotoQ=EPUBJS.core.queue(this),this.renderer=new EPUBJS.Renderer(this.settings.render_method),this.renderer.setMinSpreadWidth(this.settings.minSpreadWidth),this.renderer.setGap(this.settings.gap),this.listenToRenderer(this.renderer),this.defer_opened=new RSVP.defer,this.opened=this.defer_opened.promise,this.store=!1,this.settings.storage!==!1&&this.fromStorage(!0),("string"==typeof this.settings.bookPath||this.settings.bookPath instanceof ArrayBuffer)&&this.open(this.settings.bookPath,this.settings.reload),window.addEventListener("beforeunload",this.unload.bind(this),!1)},EPUBJS.Book.prototype.open=function(e,t){var r,n=this,o=new RSVP.defer;return this.settings.bookPath=e,this.settings.contained||this.isContained(e)?(this.settings.contained=this.contained=!0,this.bookUrl="",r=this.unarchive(e).then(function(){return n.loadPackage()})):(this.bookUrl=this.urlFrom(e),r=this.loadPackage()),r.then(this.settings.restore&&!t&&localStorage?function(e){var t=n.packageIdentifier(e),r=n.restore(t);r||n.unpack(e),o.resolve(),n.defer_opened.resolve()}:function(e){n.unpack(e),o.resolve(),n.defer_opened.resolve()}),this._registerReplacements(this.renderer),o.promise},EPUBJS.Book.prototype.loadPackage=function(e){var t,r=this,n=new EPUBJS.Parser,o=e||"META-INF/container.xml";return t=this.settings.packageUrl?r.loadXml(r.settings.packageUrl):r.loadXml(r.bookUrl+o).then(function(e){return n.container(e)}).then(function(e){return r.settings.contentsPath=r.bookUrl+e.basePath,r.settings.packageUrl=r.bookUrl+e.packagePath,r.settings.encoding=e.encoding,r.loadXml(r.settings.packageUrl)}),t["catch"](function(){console.error("Could not load book at: "+o),r.trigger("book:loadFailed",o)}),t},EPUBJS.Book.prototype.packageIdentifier=function(e){var t=new EPUBJS.Parser;return t.identifier(e)},EPUBJS.Book.prototype.unpack=function(e){var t=this,r=new EPUBJS.Parser;t.contents=r.packageContents(e,t.settings.contentsPath),t.manifest=t.contents.manifest,t.spine=t.contents.spine,t.spineIndexByURL=t.contents.spineIndexByURL,t.metadata=t.contents.metadata,t.settings.bookKey||(t.settings.bookKey=t.generateBookKey(t.metadata.identifier)),t.globalLayoutProperties=t.parseLayoutProperties(t.metadata),t.contents.coverPath&&(t.cover=t.contents.cover=t.settings.contentsPath+t.contents.coverPath),t.spineNodeIndex=t.contents.spineNodeIndex,t.ready.manifest.resolve(t.contents.manifest),t.ready.spine.resolve(t.contents.spine),t.ready.metadata.resolve(t.contents.metadata),t.ready.cover.resolve(t.contents.cover),t.locations=new EPUBJS.Locations(t.spine,t.store,t.settings.withCredentials),t.contents.navPath?(t.settings.navUrl=t.settings.contentsPath+t.contents.navPath,t.loadXml(t.settings.navUrl).then(function(e){return r.nav(e,t.spineIndexByURL,t.spine)}).then(function(e){t.toc=t.contents.toc=e,t.ready.toc.resolve(t.contents.toc)},function(){t.ready.toc.resolve(!1)}),t.loadXml(t.settings.navUrl).then(function(e){return r.pageList(e,t.spineIndexByURL,t.spine)}).then(function(e){var r=new EPUBJS.EpubCFI,n=0;0!==e.length&&(t.pageList=t.contents.pageList=e,t.pageList.forEach(function(e){e.cfi||(n+=1,r.generateCfiFromHref(e.href,t).then(function(r){e.cfi=r,e.packageUrl=t.settings.packageUrl,n-=1,0===n&&(t.pagination.process(t.pageList),t.ready.pageList.resolve(t.pageList))}))}),n||(t.pagination.process(t.pageList),t.ready.pageList.resolve(t.pageList)))},function(){t.ready.pageList.resolve([])})):t.contents.tocPath?(t.settings.tocUrl=t.settings.contentsPath+t.contents.tocPath,t.loadXml(t.settings.tocUrl).then(function(e){return r.toc(e,t.spineIndexByURL,t.spine)},function(e){console.error(e)}).then(function(e){t.toc=t.contents.toc=e,t.ready.toc.resolve(t.contents.toc)},function(){t.ready.toc.resolve(!1)})):t.ready.toc.resolve(!1)},EPUBJS.Book.prototype.createHiddenRender=function(e,t,r){var n,o,i=this.element.getBoundingClientRect(),s=t||this.settings.width||i.width,a=r||this.settings.height||i.height;return e.setMinSpreadWidth(this.settings.minSpreadWidth),e.setGap(this.settings.gap),this._registerReplacements(e),this.settings.forceSingle&&e.forceSingle(!0),n=document.createElement("div"),n.style.visibility="hidden",n.style.overflow="hidden",n.style.width="0",n.style.height="0",this.element.appendChild(n),o=document.createElement("div"),o.style.visibility="hidden",o.style.overflow="hidden",o.style.width=s+"px",o.style.height=a+"px",n.appendChild(o),e.initialize(o),n},EPUBJS.Book.prototype.generatePageList=function(e,t){var r=[],n=new EPUBJS.Renderer(this.settings.render_method,!1),o=this.createHiddenRender(n,e,t),i=new RSVP.defer,s=-1,a=this.spine.length,c=0,h=function(e){var t,o=s+1,i=e||new RSVP.defer;return o>=a?i.resolve():(s=o,t=new EPUBJS.Chapter(this.spine[s],this.store),n.displayChapter(t,this.globalLayoutProperties).then(function(){n.pageMap.forEach(function(e){c+=1,r.push({cfi:e.start,page:c})}),n.pageMap.length%2>0&&n.spreads&&(c+=1,r.push({cfi:n.pageMap[n.pageMap.length-1].end,page:c})),setTimeout(function(){h(i)},1)})),i.promise}.bind(this);return h().then(function(){n.remove(),this.element.removeChild(o),i.resolve(r)}.bind(this)),i.promise},EPUBJS.Book.prototype.generatePagination=function(e,t){var r=this,n=new RSVP.defer;return this.ready.spine.promise.then(function(){r.generatePageList(e,t).then(function(e){r.pageList=r.contents.pageList=e,r.pagination.process(e),r.ready.pageList.resolve(r.pageList),n.resolve(r.pageList)})}),n.promise},EPUBJS.Book.prototype.loadPagination=function(e){var t=JSON.parse(e);return t&&t.length&&(this.pageList=t,this.pagination.process(this.pageList),this.ready.pageList.resolve(this.pageList)),this.pageList},EPUBJS.Book.prototype.getPageList=function(){return this.ready.pageList.promise},EPUBJS.Book.prototype.getMetadata=function(){return this.ready.metadata.promise},EPUBJS.Book.prototype.getToc=function(){return this.ready.toc.promise},EPUBJS.Book.prototype.networkListeners=function(){var e=this;window.addEventListener("offline",function(){e.online=!1,e.settings.storage&&e.fromStorage(!0),e.trigger("book:offline")},!1),window.addEventListener("online",function(){e.online=!0,e.settings.storage&&e.fromStorage(!1),e.trigger("book:online")},!1)},EPUBJS.Book.prototype.listenToRenderer=function(e){var t=this;e.Events.forEach(function(r){e.on(r,function(e){t.trigger(r,e)})}),e.on("renderer:visibleRangeChanged",function(e){var t,r,n,o=[];this.pageList.length>0&&(t=this.pagination.pageFromCfi(e.start),n=this.pagination.percentageFromPage(t),o.push(t),e.end&&(r=this.pagination.pageFromCfi(e.end),o.push(r)),this.trigger("book:pageChanged",{anchorPage:t,percentage:n,pageRange:o}))}.bind(this)),e.on("render:loaded",this.loadChange.bind(this))},EPUBJS.Book.prototype.loadChange=function(e){var t,r,n=EPUBJS.core.uri(e),o=EPUBJS.core.uri(this.currentChapter.absolute);n.path!=o.path?(console.warn("Miss Match",n.path,this.currentChapter.absolute),t=this.spineIndexByURL[n.filename],r=new EPUBJS.Chapter(this.spine[t],this.store),this.currentChapter=r,this.renderer.currentChapter=r,this.renderer.afterLoad(this.renderer.render.docEl),this.renderer.beforeDisplay(function(){this.renderer.afterDisplay()}.bind(this))):this._rendering||this.renderer.reformat()},EPUBJS.Book.prototype.unlistenToRenderer=function(e){e.Events.forEach(function(t){e.off(t)})},EPUBJS.Book.prototype.coverUrl=function(){var e=this.ready.cover.promise.then(function(){return this.settings.fromStorage?this.store.getUrl(this.contents.cover):this.settings.contained?this.zip.getUrl(this.contents.cover):this.contents.cover}.bind(this));return e.then(function(e){this.cover=e}.bind(this)),e},EPUBJS.Book.prototype.loadXml=function(e){return this.settings.fromStorage?this.store.getXml(e,this.settings.encoding):this.settings.contained?this.zip.getXml(e,this.settings.encoding):EPUBJS.core.request(e,"xml",this.settings.withCredentials)},EPUBJS.Book.prototype.urlFrom=function(e){var t,r=EPUBJS.core.uri(e),n=r.protocol,o="/"==r.path[0],i=window.location,s=i.origin||i.protocol+"//"+i.host,a=document.getElementsByTagName("base");return a.length&&(t=a[0].href),r.protocol?r.origin+r.path:!n&&o?(t||s)+r.path:n||o?void 0:EPUBJS.core.resolveUrl(t||i.pathname,r.path)},EPUBJS.Book.prototype.unarchive=function(e){return this.zip=new EPUBJS.Unarchiver,this.store=this.zip,this.zip.open(e)},EPUBJS.Book.prototype.isContained=function(e){if(e instanceof ArrayBuffer)return!0;var t=EPUBJS.core.uri(e);return!t.extension||"epub"!=t.extension&&"zip"!=t.extension?!1:!0},EPUBJS.Book.prototype.isSaved=function(e){var t;return localStorage?(t=localStorage.getItem(e),localStorage&&null!==t?!0:!1):!1},EPUBJS.Book.prototype.generateBookKey=function(e){return"epubjs:"+EPUBJS.VERSION+":"+window.location.host+":"+e},EPUBJS.Book.prototype.saveContents=function(){return localStorage?void localStorage.setItem(this.settings.bookKey,JSON.stringify(this.contents)):!1},EPUBJS.Book.prototype.removeSavedContents=function(){return localStorage?void localStorage.removeItem(this.settings.bookKey):!1},EPUBJS.Book.prototype.renderTo=function(e){var t,r=this;if(EPUBJS.core.isElement(e))this.element=e;else{if("string"!=typeof e)return void console.error("Not an Element");this.element=EPUBJS.core.getEl(e)}return t=this.opened.then(function(){return r.renderer.initialize(r.element,r.settings.width,r.settings.height),r.metadata.direction&&r.renderer.setDirection(r.metadata.direction),r._rendered(),r.startDisplay()})},EPUBJS.Book.prototype.startDisplay=function(){var e;return e=this.settings["goto"]?this["goto"](this.settings["goto"]):this.settings.previousLocationCfi?this.gotoCfi(this.settings.previousLocationCfi):this.displayChapter(this.spinePos)},EPUBJS.Book.prototype.restore=function(e){var t,r=this,n=["manifest","spine","metadata","cover","toc","spineNodeIndex","spineIndexByURL","globalLayoutProperties"],o=!1,i=this.generateBookKey(e),s=localStorage.getItem(i),a=n.length;if(this.settings.clearSaved&&(o=!0),!o&&"undefined"!=s&&null!==s)for(r.contents=JSON.parse(s),t=0;a>t;t++){var c=n[t];if(!r.contents[c]){o=!0;break}r[c]=r.contents[c]}return!o&&s&&this.contents&&this.settings.contentsPath?(this.settings.bookKey=i,this.ready.manifest.resolve(this.manifest),this.ready.spine.resolve(this.spine),this.ready.metadata.resolve(this.metadata),this.ready.cover.resolve(this.cover),this.ready.toc.resolve(this.toc),!0):!1},EPUBJS.Book.prototype.displayChapter=function(e,t,r){var n,o,i,s,a=this,c=r||new RSVP.defer;return this.isRendered?this._rendering||this._rendering?(this._displayQ.enqueue("displayChapter",[e,t,c]),c.promise):(EPUBJS.core.isNumber(e)?i=e:(o=new EPUBJS.EpubCFI(e),i=o.spinePos),(0>i||i>=this.spine.length)&&(console.warn("Not A Valid Location"),i=0,t=!1,o=!1),s=new EPUBJS.Chapter(this.spine[i],this.store),this._rendering=!0,this._needsAssetReplacement()&&s.registerHook("beforeChapterRender",[EPUBJS.replace.head,EPUBJS.replace.resources,EPUBJS.replace.svg],!0),a.currentChapter=s,n=a.renderer.displayChapter(s,this.globalLayoutProperties),o?a.renderer.gotoCfi(o):t&&a.renderer.lastPage(),n.then(function(){a.spinePos=i,c.resolve(a.renderer),a.settings.fromStorage===!1&&a.settings.contained===!1&&a.preloadNextChapter(),a._rendering=!1,a._displayQ.dequeue(),0===a._displayQ.length()&&a._gotoQ.dequeue()},function(e){console.error("Could not load Chapter: "+s.absolute,e),a.trigger("book:chapterLoadFailed",s.absolute),a._rendering=!1,c.reject(e)}),c.promise):(this._q.enqueue("displayChapter",arguments),c.reject({message:"Rendering",stack:(new Error).stack}),c.promise)},EPUBJS.Book.prototype.nextPage=function(){var e;return this.isRendered?(e=this.renderer.nextPage(),e?void 0:this.nextChapter()):this._q.enqueue("nextPage",arguments)},EPUBJS.Book.prototype.prevPage=function(){var e;return this.isRendered?(e=this.renderer.prevPage(),e?void 0:this.prevChapter()):this._q.enqueue("prevPage",arguments)},EPUBJS.Book.prototype.nextChapter=function(){var e;if(this.spinePos<this.spine.length-1){for(e=this.spinePos+1;this.spine[e]&&this.spine[e].linear&&"no"==this.spine[e].linear;)e++;if(e<this.spine.length)return this.displayChapter(e);this.trigger("book:atEnd")}else this.trigger("book:atEnd")},EPUBJS.Book.prototype.prevChapter=function(){var e;if(this.spinePos>0){for(e=this.spinePos-1;this.spine[e]&&this.spine[e].linear&&"no"==this.spine[e].linear;)e--;if(e>=0)return this.displayChapter(e,!0);this.trigger("book:atStart")}else this.trigger("book:atStart")},EPUBJS.Book.prototype.getCurrentLocationCfi=function(){return this.isRendered?this.renderer.currentLocationCfi:!1},EPUBJS.Book.prototype["goto"]=function(e){return 0===e.indexOf("epubcfi(")?this.gotoCfi(e):e.indexOf("%")===e.length-1?this.gotoPercentage(parseInt(e.substring(0,e.length-1))/100):"number"==typeof e||isNaN(e)===!1?this.gotoPage(e):this.gotoHref(e)},EPUBJS.Book.prototype.gotoCfi=function(e,t){var r,n,o,i,s,a=t||new RSVP.defer;return this.isRendered?this._moving||this._rendering?(console.warn("Renderer is moving"),this._gotoQ.enqueue("gotoCfi",[e,a]),!1):(r=new EPUBJS.EpubCFI(e),n=r.spinePos,-1==n?!1:(o=this.spine[n],i=a.promise,this._moving=!0,this.currentChapter&&this.spinePos===n?(this.renderer.gotoCfi(r),this._moving=!1,a.resolve(this.renderer.currentLocationCfi)):(o&&-1!=n||(n=0,o=this.spine[n]),s=this.displayChapter(e),s.then(function(e){this._moving=!1,a.resolve(e.currentLocationCfi)}.bind(this))),i.then(function(){this._gotoQ.dequeue()}.bind(this)),i)):(console.warn("Not yet Rendered"),this.settings.previousLocationCfi=e,!1)},EPUBJS.Book.prototype.gotoHref=function(e,t){var r,n,o,i,s,a=t||new RSVP.defer;return this.isRendered?this._moving||this._rendering?(this._gotoQ.enqueue("gotoHref",[e,a]),!1):(r=e.split("#"),n=r[0],o=r[1]||!1,i=-1==n.search("://")?n.replace(EPUBJS.core.uri(this.settings.contentsPath).path,""):n.replace(this.settings.contentsPath,""),s=this.spineIndexByURL[i],n||(s=this.currentChapter?this.currentChapter.spinePos:0),"number"!=typeof s?!1:this.currentChapter&&s==this.currentChapter.spinePos?(o?this.renderer.section(o):this.renderer.firstPage(),a.resolve(this.renderer.currentLocationCfi),a.promise.then(function(){this._gotoQ.dequeue()}.bind(this)),a.promise):this.displayChapter(s).then(function(){o&&this.renderer.section(o),a.resolve(this.renderer.currentLocationCfi)}.bind(this))):(this.settings["goto"]=e,!1)},EPUBJS.Book.prototype.gotoPage=function(e){var t=this.pagination.cfiFromPage(e);return this.gotoCfi(t)},EPUBJS.Book.prototype.gotoPercentage=function(e){var t=this.pagination.pageFromPercentage(e);return this.gotoPage(t)},EPUBJS.Book.prototype.preloadNextChapter=function(){var e,t=this.spinePos+1;return t>=this.spine.length?!1:(e=new EPUBJS.Chapter(this.spine[t]),void(e&&EPUBJS.core.request(e.absolute)))},EPUBJS.Book.prototype.storeOffline=function(){var e=this,t=EPUBJS.core.values(this.manifest);return this.store.put(t).then(function(){e.settings.stored=!0,e.trigger("book:stored")})},EPUBJS.Book.prototype.availableOffline=function(){return this.settings.stored>0?!0:!1},EPUBJS.Book.prototype.toStorage=function(){var e=this.settings.bookKey;this.store.isStored(e).then(function(t){return t===!0?(this.settings.stored=!0,!0):this.storeOffline().then(function(){this.store.token(e,!0)}.bind(this))}.bind(this))},EPUBJS.Book.prototype.fromStorage=function(e){[EPUBJS.replace.head,EPUBJS.replace.resources,EPUBJS.replace.svg],this.contained||this.settings.contained||(this.online&&this.opened.then(this.toStorage.bind(this)),this.store&&this.settings.fromStorage&&e===!1?(this.settings.fromStorage=!1,this.store.off("offline"),this.store=!1):this.settings.fromStorage||(this.store=new EPUBJS.Storage(this.settings.credentials),this.store.on("offline",function(e){e?(this.offline=!0,this.settings.fromStorage=!0,this.trigger("book:offline")):(this.offline=!1,this.settings.fromStorage=!1,this.trigger("book:online"))}.bind(this))))},EPUBJS.Book.prototype.setStyle=function(e,t,r){var n=["color","background","background-color"];return this.isRendered?(this.settings.styles[e]=t,this.renderer.setStyle(e,t,r),void(-1===n.indexOf(e)&&this.renderer.reformat())):this._q.enqueue("setStyle",arguments)},EPUBJS.Book.prototype.removeStyle=function(e){return this.isRendered?(this.renderer.removeStyle(e),this.renderer.reformat(),void delete this.settings.styles[e]):this._q.enqueue("removeStyle",arguments)},EPUBJS.Book.prototype.addHeadTag=function(e,t){return this.isRendered?void(this.settings.headTags[e]=t):this._q.enqueue("addHeadTag",arguments)},EPUBJS.Book.prototype.useSpreads=function(e){console.warn("useSpreads is deprecated, use forceSingle or set a layoutOveride instead"),this.forceSingle(e===!1?!0:!1)},EPUBJS.Book.prototype.forceSingle=function(e){var t="undefined"==typeof e?!0:e;this.renderer.forceSingle(t),this.settings.forceSingle=t,this.isRendered&&this.renderer.reformat()},EPUBJS.Book.prototype.setMinSpreadWidth=function(e){this.settings.minSpreadWidth=e,this.isRendered&&(this.renderer.setMinSpreadWidth(this.settings.minSpreadWidth),this.renderer.reformat())},EPUBJS.Book.prototype.setGap=function(e){this.settings.gap=e,this.isRendered&&(this.renderer.setGap(this.settings.gap),this.renderer.reformat())},EPUBJS.Book.prototype.chapter=function(e){var t,r,n=this.spineIndexByURL[e];return n&&(t=this.spine[n],r=new EPUBJS.Chapter(t,this.store,this.settings.withCredentials),r.load()),r},EPUBJS.Book.prototype.unload=function(){this.settings.restore&&localStorage&&this.saveContents(),this.unlistenToRenderer(this.renderer),this.trigger("book:unload")},EPUBJS.Book.prototype.destroy=function(){window.removeEventListener("beforeunload",this.unload),this.currentChapter&&this.currentChapter.unload(),this.unload(),this.renderer&&this.renderer.remove()},EPUBJS.Book.prototype._ready=function(){this.trigger("book:ready")},EPUBJS.Book.prototype._rendered=function(){this.isRendered=!0,this.trigger("book:rendered"),this._q.flush()},EPUBJS.Book.prototype.applyStyles=function(e,t){e.applyStyles(this.settings.styles),t()},EPUBJS.Book.prototype.applyHeadTags=function(e,t){e.applyHeadTags(this.settings.headTags),t()},EPUBJS.Book.prototype._registerReplacements=function(e){e.registerHook("beforeChapterDisplay",this.applyStyles.bind(this,e),!0),e.registerHook("beforeChapterDisplay",this.applyHeadTags.bind(this,e),!0),e.registerHook("beforeChapterDisplay",EPUBJS.replace.hrefs.bind(this),!0);
},EPUBJS.Book.prototype._needsAssetReplacement=function(){return this.settings.fromStorage?!0:this.settings.contained?!0:!1},EPUBJS.Book.prototype.parseLayoutProperties=function(e){var t=this.settings.layoutOveride&&this.settings.layoutOveride.layout||e.layout||"reflowable",r=this.settings.layoutOveride&&this.settings.layoutOveride.spread||e.spread||"auto",n=this.settings.layoutOveride&&this.settings.layoutOveride.orientation||e.orientation||"auto";return{layout:t,spread:r,orientation:n}},RSVP.EventTarget.mixin(EPUBJS.Book.prototype),RSVP.on("error",function(e){console.error(e)}),EPUBJS.Chapter=function(e,t,r){this.href=e.href,this.absolute=e.url,this.id=e.id,this.spinePos=e.index,this.cfiBase=e.cfiBase,this.properties=e.properties,this.manifestProperties=e.manifestProperties,this.linear=e.linear,this.pages=1,this.store=t,this.credentials=r,this.epubcfi=new EPUBJS.EpubCFI,this.deferred=new RSVP.defer,this.loaded=this.deferred.promise,EPUBJS.Hooks.mixin(this),this.getHooks("beforeChapterRender"),this.caches={}},EPUBJS.Chapter.prototype.load=function(e,t){var r,n=e||this.store,o=t||this.credentials;return r=n?n.getXml(this.absolute):EPUBJS.core.request(this.absolute,!1,o),r.then(function(e){this.setDocument(e),this.deferred.resolve(this)}.bind(this)),r},EPUBJS.Chapter.prototype.render=function(){return this.load().then(function(e){var t=e.querySelector("head"),r=e.createElement("base");return r.setAttribute("href",this.absolute),t.insertBefore(r,t.firstChild),this.contents=e,new RSVP.Promise(function(t){this.triggerHooks("beforeChapterRender",function(){t(e)}.bind(this),this)}.bind(this))}.bind(this)).then(function(e){var t=new XMLSerializer,r=t.serializeToString(e);return r}.bind(this))},EPUBJS.Chapter.prototype.url=function(e){var t,r=new RSVP.defer,n=e||this.store,o=this;return n?this.tempUrl?(t=this.tempUrl,r.resolve(t)):n.getUrl(this.absolute).then(function(e){o.tempUrl=e,r.resolve(e)}):(t=this.absolute,r.resolve(t)),r.promise},EPUBJS.Chapter.prototype.setPages=function(e){this.pages=e},EPUBJS.Chapter.prototype.getPages=function(){return this.pages},EPUBJS.Chapter.prototype.getID=function(){return this.ID},EPUBJS.Chapter.prototype.unload=function(e){this.document=null,this.tempUrl&&e&&(e.revokeUrl(this.tempUrl),this.tempUrl=!1)},EPUBJS.Chapter.prototype.setDocument=function(e){var t=e.namespaceURI;e.doctype,this.document=e.implementation.createDocument(t,null,null),this.contents=this.document.importNode(e.documentElement,!0),this.document.appendChild(this.contents),!this.document.evaluate&&document.evaluate&&(this.document.evaluate=document.evaluate)},EPUBJS.Chapter.prototype.cfiFromRange=function(e){var t,r,n,o,i,s;if(this.document){if("undefined"!=typeof document.evaluate){if(r=EPUBJS.core.getElementXPath(e.startContainer),n=EPUBJS.core.getElementXPath(e.endContainer),o=this.document.evaluate(r,this.document,EPUBJS.core.nsResolver,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue,e.collapsed||(i=this.document.evaluate(n,this.document,EPUBJS.core.nsResolver,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue),t=this.document.createRange(),o)try{t.setStart(o,e.startOffset),!e.collapsed&&i&&t.setEnd(i,e.endOffset)}catch(a){console.log("missed"),o=!1}o||(console.log("not found, try fuzzy match"),cleanStartTextContent=EPUBJS.core.cleanStringForXpath(e.startContainer.textContent),r="//text()[contains(.,"+cleanStartTextContent+")]",o=this.document.evaluate(r,this.document,EPUBJS.core.nsResolver,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue,o&&(t.setStart(o,e.startOffset),e.collapsed||(s=EPUBJS.core.cleanStringForXpath(e.endContainer.textContent),n="//text()[contains(.,"+s+")]",i=this.document.evaluate(n,this.document,EPUBJS.core.nsResolver,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue,i&&t.setEnd(i,e.endOffset))))}else t=e;return this.epubcfi.generateCfiFromRange(t,this.cfiBase)}},EPUBJS.Chapter.prototype.find=function(e){var t=this,r=[],n=e.toLowerCase(),o=function(e){for(var o,i,s,a=e.textContent.toLowerCase(),c=t.document.createRange(),h=-1,p=150;-1!=i;)i=a.indexOf(n,h+1),-1!=i&&(c=t.document.createRange(),c.setStart(e,i),c.setEnd(e,i+n.length),o=t.cfiFromRange(c),e.textContent.length<p?s=e.textContent:(s=e.textContent.substring(i-p/2,i+p/2),s="..."+s+"..."),r.push({cfi:o,excerpt:s})),h=i};return this.textSprint(this.document,function(e){o(e)}),r},EPUBJS.Chapter.prototype.textSprint=function(e,t){for(var r,n=document.createTreeWalker(e,NodeFilter.SHOW_TEXT,{acceptNode:function(e){return e.data&&!/^\s*$/.test(e.data)?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_REJECT}},!1);r=n.nextNode();)t(r)},EPUBJS.Chapter.prototype.replace=function(e,t,r,n){var o=this.contents.querySelectorAll(e),i=Array.prototype.slice.call(o),s=i.length;return 0===s?void r(!1):void i.forEach(function(e){var o=!1,i=function(e,t){o===!1&&(s--,n&&n(e,t,s),0>=s&&r&&r(!0),o=!0)};t(e,i)}.bind(this))},EPUBJS.Chapter.prototype.replaceWithStored=function(e,t,r,n){var o,i={},s=this.store,a=this.caches[e],c=EPUBJS.core.uri(this.absolute),h=c.base,p=t,u=5,l=function(e,t){i[t]=e},d=function(){n&&n(),EPUBJS.core.values(o).forEach(function(e){s.revokeUrl(e)}),a=i};s&&(a||(a={}),o=EPUBJS.core.clone(a),this.replace(e,function(t,n){var a=t.getAttribute(p),c=EPUBJS.core.resolveUrl(h,a),l=function(r){var o;t.onload=function(){clearTimeout(o),n(r,c)},t.onerror=function(e){clearTimeout(o),n(r,c),console.error(e)},"svg image"==e&&t.setAttribute("externalResourcesRequired","true"),"link[href]"==e&&"stylesheet"!==t.getAttribute("rel")?n(r,c):o=setTimeout(function(){n(r,c)},u),r&&t.setAttribute(p,r)};c in o?(l(o[c]),i[c]=o[c],delete o[c]):r(s,c,l,t)},d,l))};var EPUBJS=EPUBJS||{};EPUBJS.core={},EPUBJS.core.getEl=function(e){return document.getElementById(e)},EPUBJS.core.getEls=function(e){return document.getElementsByClassName(e)},EPUBJS.core.request=function(e,t,r){var n,o=window.URL,i=o?"blob":"arraybuffer",s=new RSVP.defer,a=new XMLHttpRequest,c=XMLHttpRequest.prototype,h=function(){var e;this.readyState==this.DONE&&(200===this.status||0===this.status&&this.response?(e="xml"==t?this.responseXML?this.responseXML:(new DOMParser).parseFromString(this.response,"application/xml"):"xhtml"==t?this.responseXML?this.responseXML:(new DOMParser).parseFromString(this.response,"application/xhtml+xml"):"html"==t?this.responseXML?this.responseXML:(new DOMParser).parseFromString(this.response,"text/html"):"json"==t?JSON.parse(this.response):"blob"==t?o?this.response:new Blob([this.response]):this.response,s.resolve(e)):s.reject({message:this.response,stack:(new Error).stack}))};return"overrideMimeType"in c||Object.defineProperty(c,"overrideMimeType",{value:function(){}}),a.open("GET",e,!0),a.onreadystatechange=h,r&&(a.withCredentials=!0),t||(n=EPUBJS.core.uri(e),t=n.extension,t={htm:"html"}[t]||t),"blob"==t&&(a.responseType=i),"json"==t&&a.setRequestHeader("Accept","application/json"),"xml"==t&&(a.responseType="document",a.overrideMimeType("text/xml")),"xhtml"==t&&(a.responseType="document"),"html"==t&&(a.responseType="document"),"binary"==t&&(a.responseType="arraybuffer"),a.send(),s.promise},EPUBJS.core.toArray=function(e){var t=[];for(var r in e){var n;e.hasOwnProperty(r)&&(n=e[r],n.ident=r,t.push(n))}return t},EPUBJS.core.uri=function(e){var t,r,n,o={protocol:"",host:"",path:"",origin:"",directory:"",base:"",filename:"",extension:"",fragment:"",href:e},i=e.indexOf("blob:"),s=e.indexOf("://"),a=e.indexOf("?"),c=e.indexOf("#");return 0===i?(o.protocol="blob",o.base=e.indexOf(0,c),o):(-1!=c&&(o.fragment=e.slice(c+1),e=e.slice(0,c)),-1!=a&&(o.search=e.slice(a+1),e=e.slice(0,a),href=e),-1!=s?(o.protocol=e.slice(0,s),t=e.slice(s+3),n=t.indexOf("/"),-1===n?(o.host=o.path,o.path=""):(o.host=t.slice(0,n),o.path=t.slice(n)),o.origin=o.protocol+"://"+o.host,o.directory=EPUBJS.core.folder(o.path),o.base=o.origin+o.directory):(o.path=e,o.directory=EPUBJS.core.folder(e),o.base=o.directory),o.filename=e.replace(o.base,""),r=o.filename.lastIndexOf("."),-1!=r&&(o.extension=o.filename.slice(r+1)),o)},EPUBJS.core.folder=function(e){var t=e.lastIndexOf("/");if(-1==t)var r="";return r=e.slice(0,t+1)},EPUBJS.core.dataURLToBlob=function(e){var t,r,n,o,i,s=";base64,";if(-1==e.indexOf(s))return t=e.split(","),r=t[0].split(":")[1],n=t[1],new Blob([n],{type:r});t=e.split(s),r=t[0].split(":")[1],n=window.atob(t[1]),o=n.length,i=new Uint8Array(o);for(var a=0;o>a;++a)i[a]=n.charCodeAt(a);return new Blob([i],{type:r})},EPUBJS.core.addScript=function(e,t,r){var n,o;o=!1,n=document.createElement("script"),n.type="text/javascript",n.async=!1,n.src=e,n.onload=n.onreadystatechange=function(){o||this.readyState&&"complete"!=this.readyState||(o=!0,t&&t())},r=r||document.body,r.appendChild(n)},EPUBJS.core.addScripts=function(e,t,r){var n=e.length,o=0,i=function(){o++,n==o?t&&t():EPUBJS.core.addScript(e[o],i,r)};EPUBJS.core.addScript(e[o],i,r)},EPUBJS.core.addCss=function(e,t,r){var n,o;o=!1,n=document.createElement("link"),n.type="text/css",n.rel="stylesheet",n.href=e,n.onload=n.onreadystatechange=function(){o||this.readyState&&"complete"!=this.readyState||(o=!0,t&&t())},r=r||document.body,r.appendChild(n)},EPUBJS.core.prefixed=function(e){var t=["Webkit","Moz","O","ms"],r=e[0].toUpperCase()+e.slice(1),n=t.length;if("undefined"!=typeof document.documentElement.style[e])return e;for(var o=0;n>o;o++)if("undefined"!=typeof document.documentElement.style[t[o]+r])return t[o]+r;return e},EPUBJS.core.resolveUrl=function(e,t){var r,n,o=[],i=EPUBJS.core.uri(t),s=e.split("/");return i.host?t:(s.pop(),n=t.split("/"),n.forEach(function(e){".."===e?s.pop():o.push(e)}),r=s.concat(o),r.join("/"))},EPUBJS.core.uuid=function(){var e=(new Date).getTime(),t="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var r=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"==t?r:7&r|8).toString(16)});return t},EPUBJS.core.insert=function(e,t,r){var n=EPUBJS.core.locationOf(e,t,r);return t.splice(n,0,e),n},EPUBJS.core.locationOf=function(e,t,r,n,o){var i,s=n||0,a=o||t.length,c=parseInt(s+(a-s)/2);return r||(r=function(e,t){return e>t?1:t>e?-1:(e=t)?0:void 0}),0>=a-s?c:(i=r(t[c],e),a-s===1?i>0?c:c+1:0===i?c:-1===i?EPUBJS.core.locationOf(e,t,r,c,a):EPUBJS.core.locationOf(e,t,r,s,c))},EPUBJS.core.indexOfSorted=function(e,t,r,n,o){var i,s=n||0,a=o||t.length,c=parseInt(s+(a-s)/2);return r||(r=function(e,t){return e>t?1:t>e?-1:(e=t)?0:void 0}),0>=a-s?-1:(i=r(t[c],e),a-s===1?0===i?c:-1:0===i?c:-1===i?EPUBJS.core.indexOfSorted(e,t,r,c,a):EPUBJS.core.indexOfSorted(e,t,r,s,c))},EPUBJS.core.queue=function(e){var t=[],r=e,n=function(e,r,n){return t.push({funcName:e,args:r,context:n}),t},o=function(){var e;t.length&&(e=t.shift(),r[e.funcName].apply(e.context||r,e.args))},i=function(){for(;t.length;)o()},s=function(){t=[]},a=function(){return t.length};return{enqueue:n,dequeue:o,flush:i,clear:s,length:a}},EPUBJS.core.getElementXPath=function(e){return e&&e.id?'//*[@id="'+e.id+'"]':EPUBJS.core.getElementTreeXPath(e)},EPUBJS.core.getElementTreeXPath=function(e){var t,r,n,o,i=[],s="http://www.w3.org/1999/xhtml"===e.ownerDocument.documentElement.getAttribute("xmlns");for(e.nodeType===Node.TEXT_NODE&&(t=EPUBJS.core.indexOfTextNode(e)+1,i.push("text()["+t+"]"),e=e.parentNode);e&&1==e.nodeType;e=e.parentNode){t=0;for(var a=e.previousSibling;a;a=a.previousSibling)a.nodeType!=Node.DOCUMENT_TYPE_NODE&&a.nodeName==e.nodeName&&++t;r=e.nodeName.toLowerCase(),n=s?"xhtml:"+r:r,o=t?"["+(t+1)+"]":"",i.splice(0,0,n+o)}return i.length?"./"+i.join("/"):null},EPUBJS.core.nsResolver=function(e){var t={xhtml:"http://www.w3.org/1999/xhtml",epub:"http://www.idpf.org/2007/ops"};return t[e]||null},EPUBJS.core.cleanStringForXpath=function(e){var t=e.match(/[^'"]+|['"]/g);return t=t.map(function(e){return"'"===e?'"\'"':'"'===e?"'\"'":"'"+e+"'"}),"concat('',"+t.join(",")+")"},EPUBJS.core.indexOfTextNode=function(e){for(var t,r=e.parentNode,n=r.childNodes,o=-1,i=0;i<n.length&&(t=n[i],t.nodeType===Node.TEXT_NODE&&o++,t!=e);i++);return o},EPUBJS.core.defaults=function(e){for(var t=1,r=arguments.length;r>t;t++){var n=arguments[t];for(var o in n)void 0===e[o]&&(e[o]=n[o])}return e},EPUBJS.core.extend=function(e){var t=[].slice.call(arguments,1);return t.forEach(function(t){t&&Object.getOwnPropertyNames(t).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}),e},EPUBJS.core.clone=function(e){return EPUBJS.core.isArray(e)?e.slice():EPUBJS.core.extend({},e)},EPUBJS.core.isElement=function(e){return!(!e||1!=e.nodeType)},EPUBJS.core.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},EPUBJS.core.isString=function(e){return"string"==typeof e||e instanceof String},EPUBJS.core.isArray=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},EPUBJS.core.values=function(e){var t,r,n,o=-1;if(!e)return[];for(t=Object.keys(e),r=t.length,n=Array(r);++o<r;)n[o]=e[t[o]];return n},EPUBJS.EpubCFI=function(e){return e?this.parse(e):void 0},EPUBJS.EpubCFI.prototype.generateChapterComponent=function(e,t,r){var n=parseInt(t),o=e+1,i="/"+o+"/";return i+=2*(n+1),r&&(i+="["+r+"]"),i},EPUBJS.EpubCFI.prototype.generatePathComponent=function(e){var t=[];return e.forEach(function(e){var r="";r+=2*(e.index+1),e.id&&(r+="["+e.id+"]"),t.push(r)}),t.join("/")},EPUBJS.EpubCFI.prototype.generateCfiFromElement=function(e,t){var r=this.pathTo(e),n=this.generatePathComponent(r);return n.length?"epubcfi("+t+"!"+n+"/1:0)":"epubcfi("+t+"!/4/)"},EPUBJS.EpubCFI.prototype.pathTo=function(e){for(var t,r=[];e&&null!==e.parentNode&&9!=e.parentNode.nodeType;)t=e.parentNode.children,r.unshift({id:e.id,tagName:e.tagName,index:t?Array.prototype.indexOf.call(t,e):0}),e=e.parentNode;return r},EPUBJS.EpubCFI.prototype.getChapterComponent=function(e){var t=e.split("!");return t[0]},EPUBJS.EpubCFI.prototype.getPathComponent=function(e){var t=e.split("!"),r=t[1]?t[1].split(":"):"";return r[0]},EPUBJS.EpubCFI.prototype.getCharecterOffsetComponent=function(e){var t=e.split(":");return t[1]||""},EPUBJS.EpubCFI.prototype.parse=function(e){var t,r,n,o,i,s,a,c,h,p={},u=function(e){var t,r,n,o;return t="element",r=parseInt(e)/2-1,n=e.match(/\[(.*)\]/),n&&n[1]&&(o=n[1]),{type:t,index:r,id:o||!1}};return"string"!=typeof e?{spinePos:-1}:(p.str=e,0===e.indexOf("epubcfi(")&&")"===e[e.length-1]&&(e=e.slice(8,e.length-1)),r=this.getChapterComponent(e),n=this.getPathComponent(e)||"",o=this.getCharecterOffsetComponent(e),r&&(t=r.split("/")[2]||"")?(p.spinePos=parseInt(t)/2-1||0,s=t.match(/\[(.*)\]/),p.spineId=s?s[1]:!1,-1!=n.indexOf(",")&&console.warn("CFI Ranges are not supported"),a=n.split("/"),c=a.pop(),p.steps=[],a.forEach(function(e){var t;e&&(t=u(e),p.steps.push(t))}),h=parseInt(c),isNaN(h)||p.steps.push(h%2===0?u(c):{type:"text",index:(h-1)/2}),i=o.match(/\[(.*)\]/),i&&i[1]?(p.characterOffset=parseInt(o.split("[")[0]),p.textLocationAssertion=i[1]):p.characterOffset=parseInt(o),p):{spinePos:-1})},EPUBJS.EpubCFI.prototype.addMarker=function(e,t,r){var n,o,i,s,a=t||document,c=r||this.createMarker(a);return"string"==typeof e&&(e=this.parse(e)),o=e.steps[e.steps.length-1],-1===e.spinePos?!1:(n=this.findParent(e,a))?(o&&"text"===o.type?(i=n.childNodes[o.index],e.characterOffset?(s=i.splitText(e.characterOffset),c.classList.add("EPUBJS-CFI-SPLIT"),n.insertBefore(c,s)):n.insertBefore(c,i)):n.insertBefore(c,n.firstChild),c):!1},EPUBJS.EpubCFI.prototype.createMarker=function(e){var t=e||document,r=t.createElement("span");return r.id="EPUBJS-CFI-MARKER:"+EPUBJS.core.uuid(),r.classList.add("EPUBJS-CFI-MARKER"),r},EPUBJS.EpubCFI.prototype.removeMarker=function(e,t){e.classList.contains("EPUBJS-CFI-SPLIT")?(nextSib=e.nextSibling,prevSib=e.previousSibling,nextSib&&prevSib&&3===nextSib.nodeType&&3===prevSib.nodeType&&(prevSib.textContent+=nextSib.textContent,e.parentNode.removeChild(nextSib)),e.parentNode.removeChild(e)):e.classList.contains("EPUBJS-CFI-MARKER")&&e.parentNode.removeChild(e)},EPUBJS.EpubCFI.prototype.findParent=function(e,t){var r,n,o,i=t||document,s=i.getElementsByTagName("html")[0],a=Array.prototype.slice.call(s.children);if("string"==typeof e&&(e=this.parse(e)),n=e.steps.slice(0),!n.length)return i.getElementsByTagName("body")[0];for(;n&&n.length>0;){if(r=n.shift(),"text"===r.type?(o=s.childNodes[r.index],s=o.parentNode||s):s=r.id?i.getElementById(r.id):a[r.index],!s||"undefined"==typeof s)return console.error("No Element For",r,e.str),!1;a=Array.prototype.slice.call(s.children)}return s},EPUBJS.EpubCFI.prototype.compare=function(e,t){if("string"==typeof e&&(e=new EPUBJS.EpubCFI(e)),"string"==typeof t&&(t=new EPUBJS.EpubCFI(t)),e.spinePos>t.spinePos)return 1;if(e.spinePos<t.spinePos)return-1;for(var r=0;r<e.steps.length;r++){if(!t.steps[r])return 1;if(e.steps[r].index>t.steps[r].index)return 1;if(e.steps[r].index<t.steps[r].index)return-1}return e.steps.length<t.steps.length?-1:e.characterOffset>t.characterOffset?1:e.characterOffset<t.characterOffset?-1:0},EPUBJS.EpubCFI.prototype.generateCfiFromHref=function(e,t){var r,n,o=EPUBJS.core.uri(e),i=o.path,s=o.fragment,a=t.spineIndexByURL[i],c=new RSVP.defer,h=new EPUBJS.EpubCFI;return"undefined"!=typeof a&&(n=t.spine[a],r=t.loadXml(n.url),r.then(function(e){var t,r=e.getElementById(s);t=h.generateCfiFromElement(r,n.cfiBase),c.resolve(t)})),c.promise},EPUBJS.EpubCFI.prototype.generateCfiFromTextNode=function(e,t,r){var n=e.parentNode,o=this.pathTo(n),i=this.generatePathComponent(o),s=1+2*Array.prototype.indexOf.call(n.childNodes,e);return"epubcfi("+r+"!"+i+"/"+s+":"+(t||0)+")"},EPUBJS.EpubCFI.prototype.generateCfiFromRangeAnchor=function(e,t){var r=e.anchorNode,n=e.anchorOffset;return this.generateCfiFromTextNode(r,n,t)},EPUBJS.EpubCFI.prototype.generateCfiFromRange=function(e,t){var r,n,o,i,s,a,c,h,p,u,l,d;if(r=e.startContainer,3===r.nodeType)n=r.parentNode,a=1+2*EPUBJS.core.indexOfTextNode(r),o=this.pathTo(n);else{if(e.collapsed)return this.generateCfiFromElement(r,t);o=this.pathTo(r)}return i=this.generatePathComponent(o),s=e.startOffset,e.collapsed?"epubcfi("+t+"!"+i+"/"+a+":"+s+")":(c=e.endContainer,3===c.nodeType?(h=c.parentNode,d=1+2*EPUBJS.core.indexOfTextNode(c),p=this.pathTo(h)):p=this.pathTo(c),u=this.generatePathComponent(p),l=e.endOffset,u=u.replace(i,""),u.length&&(u+="/"),"epubcfi("+t+"!"+i+"/"+a+":"+s+","+u+d+":"+l+")")},EPUBJS.EpubCFI.prototype.generateXpathFromSteps=function(e){var t=[".","*"];return e.forEach(function(e){var r=e.index+1;t.push(e.id?"*[position()="+r+" and @id='"+e.id+"']":"text"===e.type?"text()["+r+"]":"*["+r+"]")}),t.join("/")},EPUBJS.EpubCFI.prototype.generateQueryFromSteps=function(e){var t=["html"];return e.forEach(function(e){var r=e.index+1;e.id?t.push("#"+e.id):"text"===e.type||t.push("*:nth-child("+r+")")}),t.join(">")},EPUBJS.EpubCFI.prototype.generateRangeFromCfi=function(e,t){var r,n,o,i,s,a,c=t||document,h=c.createRange();return"string"==typeof e&&(e=this.parse(e)),-1===e.spinePos?!1:(r=e.steps[e.steps.length-1],"undefined"!=typeof document.evaluate?(n=this.generateXpathFromSteps(e.steps),o=c.evaluate(n,c,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue):(s=this.generateQueryFromSteps(e.steps),a=c.querySelector(s),a&&"text"==r.type&&(o=a.childNodes[r.index])),o?(o&&e.characterOffset>=0?(i=o.length,e.characterOffset<i?(h.setStart(o,e.characterOffset),h.setEnd(o,i)):(console.debug("offset greater than length:",e.characterOffset,i),h.setStart(o,i-1),h.setEnd(o,i))):o&&h.selectNode(o),h):null)},EPUBJS.EpubCFI.prototype.isCfiString=function(e){return"string"==typeof e&&0===e.indexOf("epubcfi(")?!0:!1},EPUBJS.Events=function(e,t){return this.events={},this.el=t?t:document.createElement("div"),e.createEvent=this.createEvent,e.tell=this.tell,e.listen=this.listen,e.deafen=this.deafen,e.listenUntil=this.listenUntil,this},EPUBJS.Events.prototype.createEvent=function(e){var t=new CustomEvent(e);return this.events[e]=t,t},EPUBJS.Events.prototype.tell=function(e,t){var r;this.events[e]?r=this.events[e]:(console.warn("No event:",e,"defined yet, creating."),r=this.createEvent(e)),t&&(r.msg=t),this.el.dispatchEvent(r)},EPUBJS.Events.prototype.listen=function(e,t,r){return this.events[e]?void(r?this.el.addEventListener(e,t.bind(r),!1):this.el.addEventListener(e,t,!1)):(console.warn("No event:",e,"defined yet, creating."),void this.createEvent(e))},EPUBJS.Events.prototype.deafen=function(e,t){this.el.removeEventListener(e,t,!1)},EPUBJS.Events.prototype.listenUntil=function(e,t,r,n){function o(){this.deafen(e,r),this.deafen(t,o)}this.listen(e,r,n),this.listen(t,o,this)},EPUBJS.hooks={},EPUBJS.Hooks=function(){function e(){}return e.prototype.getHooks=function(){var e;this.hooks={},Array.prototype.slice.call(arguments).forEach(function(e){this.hooks[e]=[]},this);for(var t in this.hooks)e=EPUBJS.core.values(EPUBJS.hooks[t]),e.forEach(function(e){this.registerHook(t,e)},this)},e.prototype.registerHook=function(e,t,r){"undefined"!=typeof this.hooks[e]?"function"==typeof t?r?this.hooks[e].unshift(t):this.hooks[e].push(t):Array.isArray(t)&&t.forEach(function(t){r?this.hooks[e].unshift(t):this.hooks[e].push(t)},this):(this.hooks[e]=[t],"function"==typeof t?this.hooks[e]=[t]:Array.isArray(t)&&(this.hooks[e]=[],t.forEach(function(t){this.hooks[e].push(t)},this)))},e.prototype.removeHook=function(e,t){var r;"undefined"!=typeof this.hooks[e]&&("function"==typeof t?(r=this.hooks[e].indexOf(t),r>-1&&this.hooks[e].splice(r,1)):Array.isArray(t)&&t.forEach(function(t){r=this.hooks[e].indexOf(t),r>-1&&this.hooks[e].splice(r,1)},this))},e.prototype.triggerHooks=function(e,t,r){function n(){i--,0>=i&&t&&t()}var o,i;return"undefined"==typeof this.hooks[e]?!1:(o=this.hooks[e],i=o.length,0===i&&t&&t(),void o.forEach(function(e){e(n,r)}))},{register:function(e){if(void 0===EPUBJS.hooks[e]&&(EPUBJS.hooks[e]={}),"object"!=typeof EPUBJS.hooks[e])throw"Already registered: "+e;return EPUBJS.hooks[e]},mixin:function(t){for(var r in e.prototype)t[r]=e.prototype[r]}}}(),EPUBJS.Layout=EPUBJS.Layout||{},EPUBJS.Layout.Reflowable=function(){this.documentElement=null,this.spreadWidth=null},EPUBJS.Layout.Reflowable.prototype.format=function(e,t,r,n){var o=EPUBJS.core.prefixed("columnAxis"),i=EPUBJS.core.prefixed("columnGap"),s=EPUBJS.core.prefixed("columnWidth"),a=EPUBJS.core.prefixed("columnFill"),c=Math.floor(t),h=Math.floor(c/8),p=n>=0?n:h%2===0?h:h-1;return this.documentElement=e,this.spreadWidth=c+p,e.style.overflow="hidden",e.style.width=c+"px",e.style.height=r+"px",e.style[o]="horizontal",e.style[a]="auto",e.style[s]=c+"px",e.style[i]=p+"px",this.colWidth=c,this.gap=p,{pageWidth:this.spreadWidth,pageHeight:r}},EPUBJS.Layout.Reflowable.prototype.calculatePages=function(){var e,t;return this.documentElement.style.width="auto",e=this.documentElement.scrollWidth,t=Math.ceil(e/this.spreadWidth),{displayedPages:t,pageCount:t}},EPUBJS.Layout.ReflowableSpreads=function(){this.documentElement=null,this.spreadWidth=null},EPUBJS.Layout.ReflowableSpreads.prototype.format=function(e,t,r,n){var o=EPUBJS.core.prefixed("columnAxis"),i=EPUBJS.core.prefixed("columnGap"),s=EPUBJS.core.prefixed("columnWidth"),a=EPUBJS.core.prefixed("columnFill"),c=2,h=Math.floor(t),p=h%2===0?h:h-1,u=Math.floor(p/8),l=n>=0?n:u%2===0?u:u-1,d=Math.floor((p-l)/c);return this.documentElement=e,this.spreadWidth=(d+l)*c,e.style.overflow="hidden",e.style.width=p+"px",e.style.height=r+"px",e.style[o]="horizontal",e.style[a]="auto",e.style[i]=l+"px",e.style[s]=d+"px",this.colWidth=d,this.gap=l,{pageWidth:this.spreadWidth,pageHeight:r}},EPUBJS.Layout.ReflowableSpreads.prototype.calculatePages=function(){var e=this.documentElement.scrollWidth,t=Math.ceil(e/this.spreadWidth);return this.documentElement.style.width=t*this.spreadWidth-this.gap+"px",{displayedPages:t,pageCount:2*t}},EPUBJS.Layout.Fixed=function(){this.documentElement=null},EPUBJS.Layout.Fixed.prototype.format=function(e){var t,r,n,o,i=EPUBJS.core.prefixed("columnWidth"),s=e.querySelector("[name=viewport]");return this.documentElement=e,s&&s.hasAttribute("content")&&(t=s.getAttribute("content"),r=t.split(","),r[0]&&(n=r[0].replace("width=","")),r[1]&&(o=r[1].replace("height=",""))),e.style.width=n+"px"||"auto",e.style.height=o+"px"||"auto",e.style[i]="auto",e.style.overflow="auto",this.colWidth=n,this.gap=0,{pageWidth:n,pageHeight:o}},EPUBJS.Layout.Fixed.prototype.calculatePages=function(){return{displayedPages:1,pageCount:1}},EPUBJS.Locations=function(e,t,r){this.spine=e,this.store=t,this.credentials=r,this.epubcfi=new EPUBJS.EpubCFI,this._locations=[],this.total=0,this["break"]=150,this._current=0},EPUBJS.Locations.prototype.generate=function(e){var t,r=new RSVP.defer,n=-1,o=this.spine.length,i=function(e){var t,r=n+1,s=e||new RSVP.defer;return r>=o?s.resolve():(n=r,t=new EPUBJS.Chapter(this.spine[n],this.store,this.credentials),this.process(t).then(function(){setTimeout(function(){i(s)},1)})),s.promise}.bind(this);return"number"==typeof e&&(this["break"]=e),t=i().then(function(){this.total=this._locations.length-1,this._currentCfi&&(this.currentLocation=this._currentCfi),r.resolve(this._locations)}.bind(this)),r.promise},EPUBJS.Locations.prototype.process=function(e){return e.load().then(function(t){var r,n,o,i=t,s=i.documentElement.querySelector("body"),a=0;this.sprint(s,function(t){var s,c=t.length,h=0;for(0===a&&(r=i.createRange(),r.setStart(t,0)),s=this["break"]-a,s>c&&(a+=c,h=c);c>h;)a=this["break"],h+=this["break"],h>=c?a=c-(h-this["break"]):(r.setEnd(t,h),o=e.cfiFromRange(r),this._locations.push(o),a=0,h+=1,r=i.createRange(),r.setStart(t,h));n=t}.bind(this)),r&&(r.setEnd(n,n.length),o=e.cfiFromRange(r),this._locations.push(o),a=0)}.bind(this))},EPUBJS.Locations.prototype.sprint=function(e,t){for(var r,n=document.createTreeWalker(e,NodeFilter.SHOW_TEXT,null,!1);r=n.nextNode();)t(r)},EPUBJS.Locations.prototype.locationFromCfi=function(e){return 0===this._locations.length?-1:EPUBJS.core.locationOf(e,this._locations,this.epubcfi.compare)},EPUBJS.Locations.prototype.percentageFromCfi=function(e){var t=this.locationFromCfi(e);return this.percentageFromLocation(t)},EPUBJS.Locations.prototype.percentageFromLocation=function(e){return e&&this.total?e/this.total:0},EPUBJS.Locations.prototype.cfiFromLocation=function(e){var t=-1;return"number"!=typeof e&&(e=parseInt(e)),e>=0&&e<this._locations.length&&(t=this._locations[e]),t},EPUBJS.Locations.prototype.cfiFromPercentage=function(e){var t=e>1?e/100:e,r=Math.ceil(this.total*t);return this.cfiFromLocation(r)},EPUBJS.Locations.prototype.load=function(e){return this._locations=JSON.parse(e),this.total=this._locations.length-1,this._locations},EPUBJS.Locations.prototype.save=function(){return JSON.stringify(this._locations)},EPUBJS.Locations.prototype.getCurrent=function(){return this._current},EPUBJS.Locations.prototype.setCurrent=function(e){var t;if("string"==typeof e)this._currentCfi=e;else{if("number"!=typeof e)return;this._current=e}0!==this._locations.length&&("string"==typeof e?(t=this.locationFromCfi(e),this._current=t):t=e,this.trigger("changed",{percentage:this.percentageFromLocation(t)}))},Object.defineProperty(EPUBJS.Locations.prototype,"currentLocation",{get:function(){return this._current},set:function(e){this.setCurrent(e)}}),RSVP.EventTarget.mixin(EPUBJS.Locations.prototype),EPUBJS.Pagination=function(e){this.pages=[],this.locations=[],this.epubcfi=new EPUBJS.EpubCFI,e&&e.length&&this.process(e)},EPUBJS.Pagination.prototype.process=function(e){e.forEach(function(e){this.pages.push(e.page),this.locations.push(e.cfi)},this),this.pageList=e,this.firstPage=parseInt(this.pages[0]),this.lastPage=parseInt(this.pages[this.pages.length-1]),this.totalPages=this.lastPage-this.firstPage},EPUBJS.Pagination.prototype.pageFromCfi=function(e){var t=-1;if(0===this.locations.length)return-1;var r=EPUBJS.core.indexOfSorted(e,this.locations,this.epubcfi.compare);return-1!=r&&r<this.pages.length-1?t=this.pages[r]:(r=EPUBJS.core.locationOf(e,this.locations,this.epubcfi.compare),t=r-1>=0?this.pages[r-1]:this.pages[0],void 0!==t||(t=-1)),t},EPUBJS.Pagination.prototype.cfiFromPage=function(e){var t=-1;"number"!=typeof e&&(e=parseInt(e));var r=this.pages.indexOf(e);return-1!=r&&(t=this.locations[r]),t},EPUBJS.Pagination.prototype.pageFromPercentage=function(e){var t=Math.round(this.totalPages*e);return t},EPUBJS.Pagination.prototype.percentageFromPage=function(e){var t=(e-this.firstPage)/this.totalPages;return Math.round(1e3*t)/1e3},EPUBJS.Pagination.prototype.percentageFromCfi=function(e){var t=this.pageFromCfi(e),r=this.percentageFromPage(t);return r},EPUBJS.Parser=function(e){this.baseUrl=e||""},EPUBJS.Parser.prototype.container=function(e){var t,r,n,o;return e?(t=e.querySelector("rootfile"))?(r=t.getAttribute("full-path"),n=EPUBJS.core.uri(r).directory,o=e.xmlEncoding,{packagePath:r,basePath:n,encoding:o}):void console.error("No RootFile Found"):void console.error("Container File Not Found")},EPUBJS.Parser.prototype.identifier=function(e){var t;return e?(t=e.querySelector("metadata"),t?this.getElementText(t,"identifier"):void console.error("No Metadata Found")):void console.error("Package File Not Found")},EPUBJS.Parser.prototype.packageContents=function(e,t){var r,n,o,i,s,a,c,h,p,u,l,d=this;return t&&(this.baseUrl=t),e?(r=e.querySelector("metadata"))?(n=e.querySelector("manifest"))?(o=e.querySelector("spine"))?(i=d.manifest(n),s=d.findNavPath(n),a=d.findTocPath(n,o),c=d.findCoverPath(e),h=Array.prototype.indexOf.call(o.parentNode.childNodes,o),p=d.spine(o,i),u={},p.forEach(function(e){u[e.href]=e.index}),l=d.metadata(r),l.direction=o.getAttribute("page-progression-direction"),{metadata:l,spine:p,manifest:i,navPath:s,tocPath:a,coverPath:c,spineNodeIndex:h,spineIndexByURL:u}):void console.error("No Spine Found"):void console.error("No Manifest Found"):void console.error("No Metadata Found"):void console.error("Package File Not Found")},EPUBJS.Parser.prototype.findNavPath=function(e){var t=e.querySelector("item[properties$='nav'], item[properties^='nav '], item[properties*=' nav ']");return t?t.getAttribute("href"):!1},EPUBJS.Parser.prototype.findTocPath=function(e,t){var r,n=e.querySelector("item[media-type='application/x-dtbncx+xml']");return n||(r=t.getAttribute("toc"),r&&(n=e.querySelector("item[id='"+r+"']"))),n?n.getAttribute("href"):!1},EPUBJS.Parser.prototype.metadata=function(e){var t={},r=this;return t.bookTitle=r.getElementText(e,"title"),t.creator=r.getElementText(e,"creator"),t.description=r.getElementText(e,"description"),t.pubdate=r.getElementText(e,"date"),t.publisher=r.getElementText(e,"publisher"),t.identifier=r.getElementText(e,"identifier"),t.language=r.getElementText(e,"language"),t.rights=r.getElementText(e,"rights"),t.modified_date=r.querySelectorText(e,"meta[property='dcterms:modified']"),t.layout=r.querySelectorText(e,"meta[property='rendition:layout']"),t.orientation=r.querySelectorText(e,"meta[property='rendition:orientation']"),t.spread=r.querySelectorText(e,"meta[property='rendition:spread']"),t},EPUBJS.Parser.prototype.findCoverPath=function(e){var t=e.querySelector("package").getAttribute("version");if("2.0"===t){var r=e.querySelector('meta[name="cover"]');if(r){var n=r.getAttribute("content"),o=e.querySelector("item[id='"+n+"']");return o?o.getAttribute("href"):!1}return!1}var i=e.querySelector("item[properties='cover-image']");return i?i.getAttribute("href"):!1},EPUBJS.Parser.prototype.getElementText=function(e,t){var r,n=e.getElementsByTagNameNS("http://purl.org/dc/elements/1.1/",t);return n&&0!==n.length?(r=n[0],r.childNodes.length?r.childNodes[0].nodeValue:""):""},EPUBJS.Parser.prototype.querySelectorText=function(e,t){var r=e.querySelector(t);return r&&r.childNodes.length?r.childNodes[0].nodeValue:""},EPUBJS.Parser.prototype.manifest=function(e){var t=this.baseUrl,r={},n=e.querySelectorAll("item"),o=Array.prototype.slice.call(n);return o.forEach(function(e){var n=e.getAttribute("id"),o=e.getAttribute("href")||"",i=e.getAttribute("media-type")||"",s=e.getAttribute("properties")||"";r[n]={href:o,url:t+o,type:i,properties:s}}),r},EPUBJS.Parser.prototype.spine=function(e,t){var r=[],n=e.getElementsByTagName("itemref"),o=Array.prototype.slice.call(n),i=Array.prototype.indexOf.call(e.parentNode.childNodes,e),s=new EPUBJS.EpubCFI;
return o.forEach(function(e,n){var o=e.getAttribute("idref"),a=s.generateChapterComponent(i,n,o),c=e.getAttribute("properties")||"",h=c.length?c.split(" "):[],p=t[o].properties,u=p.length?p.split(" "):[],l={id:o,linear:e.getAttribute("linear")||"",properties:h,manifestProperties:u,href:t[o].href,url:t[o].url,index:n,cfiBase:a,cfi:"epubcfi("+a+")"};r.push(l)}),r},EPUBJS.Parser.prototype.querySelectorByType=function(e,t,r){var n=e.querySelector(t+'[*|type="'+r+'"]');if(null!==n&&0!==n.length)return n;n=e.querySelectorAll(t);for(var o=0;o<n.length;o++)if(n[o].getAttributeNS("http://www.idpf.org/2007/ops","type")===r)return n[o]},EPUBJS.Parser.prototype.nav=function(e,t,r){var n,o,i,s=this.querySelectorByType(e,"nav","toc"),a=s?s.querySelectorAll("ol li"):[],c=a.length,h={},p=[];if(!a||0===c)return p;for(n=0;c>n;++n)o=this.navItem(a[n],t,r),h[o.id]=o,o.parent?(i=h[o.parent],i.subitems.push(o)):p.push(o);return p},EPUBJS.Parser.prototype.navItem=function(e,t,r){var n,o=e.getAttribute("id")||!1,i=e.querySelector("a, span"),s=i.getAttribute("href")||"",a=i.textContent||"",c=s.split("#"),h=c[0],p=t[h],u=r[p],l=[],d=e.parentNode,f=u?u.cfi:"";return d&&"navPoint"===d.nodeName&&(n=d.getAttribute("id")),o||(p?(u=r[p],o=u.id,f=u.cfi):(o="epubjs-autogen-toc-id-"+EPUBJS.core.uuid(),e.setAttribute("id",o))),{id:o,href:s,label:a,spinePos:p,subitems:l,parent:n,cfi:f}},EPUBJS.Parser.prototype.toc=function(e,t,r){var n,o,i,s=e.querySelectorAll("navMap navPoint"),a=s.length,c={},h=[];if(!s||0===a)return h;for(n=0;a>n;++n)o=this.tocItem(s[n],t,r),c[o.id]=o,o.parent?(i=c[o.parent],i.subitems.push(o)):h.push(o);return h},EPUBJS.Parser.prototype.tocItem=function(e,t,r){var n,o=e.getAttribute("id")||!1,i=e.querySelector("content"),s=i.getAttribute("src"),a=e.querySelector("navLabel"),c=a.textContent?a.textContent:"",h=s.split("#"),p=h[0],u=t[p],l=r[u],d=[],f=e.parentNode,g=l?l.cfi:"";return f&&"navPoint"===f.nodeName&&(n=f.getAttribute("id")),o||(u?(l=r[u],o=l.id,g=l.cfi):(o="epubjs-autogen-toc-id-"+EPUBJS.core.uuid(),e.setAttribute("id",o))),{id:o,href:s,label:c,spinePos:u,subitems:d,parent:n,cfi:g}},EPUBJS.Parser.prototype.pageList=function(e,t,r){var n,o,i=this.querySelectorByType(e,"nav","page-list"),s=i?i.querySelectorAll("ol li"):[],a=s.length,c=[];if(!s||0===a)return c;for(n=0;a>n;++n)o=this.pageListItem(s[n],t,r),c.push(o);return c},EPUBJS.Parser.prototype.pageListItem=function(e){var t,r,n,o=(e.getAttribute("id")||!1,e.querySelector("a")),i=o.getAttribute("href")||"",s=o.textContent||"",a=parseInt(s),c=i.indexOf("epubcfi");return-1!=c?(t=i.split("#"),r=t[0],n=t.length>1?t[1]:!1,{cfi:n,href:i,packageUrl:r,page:a}):{href:i,page:a}},EPUBJS.Render.Iframe=function(){this.iframe=null,this.document=null,this.window=null,this.docEl=null,this.bodyEl=null,this.leftPos=0,this.pageWidth=0},EPUBJS.Render.Iframe.prototype.create=function(){return this.iframe=document.createElement("iframe"),this.iframe.id="epubjs-iframe:"+EPUBJS.core.uuid(),this.iframe.scrolling="no",this.iframe.seamless="seamless",this.iframe.style.border="none",this.iframe.addEventListener("load",this.loaded.bind(this),!1),this.isMobile=navigator.userAgent.match(/(iPad|iPhone|iPod|Mobile|Android)/g),this.transform=EPUBJS.core.prefixed("transform"),this.iframe},EPUBJS.Render.Iframe.prototype.load=function(e){var t=this,r=new RSVP.defer;return this.window&&this.unload(),this.iframe.onload=function(){t.document=t.iframe.contentDocument,t.docEl=t.document.documentElement,t.headEl=t.document.head,t.bodyEl=t.document.body||t.document.querySelector("body"),t.window=t.iframe.contentWindow,t.window.addEventListener("resize",t.resized.bind(t),!1),t.leftPos=0,t.setLeft(0),t.bodyEl&&(t.bodyEl.style.margin="0"),"rtl"==t.direction&&"rtl"!=t.docEl.dir&&(t.docEl.dir="rtl",t.docEl.style.position="absolute",t.docEl.style.right="0"),r.resolve(t.docEl)},this.iframe.onerror=function(e){r.reject({message:"Error Loading Contents: "+e,stack:(new Error).stack})},this.document=this.iframe.contentDocument,this.document?(this.document.open(),this.document.write(e),this.document.close(),r.promise):(r.reject(new Error("No Document Available")),r)},EPUBJS.Render.Iframe.prototype.loaded=function(){var e,t,r=this.iframe.contentWindow.location.href;this.document=this.iframe.contentDocument,this.docEl=this.document.documentElement,this.headEl=this.document.head,this.bodyEl=this.document.body||this.document.querySelector("body"),this.window=this.iframe.contentWindow,"about:blank"!=r&&(e=this.iframe.contentDocument.querySelector("base"),t=e.getAttribute("href"),this.trigger("render:loaded",t))},EPUBJS.Render.Iframe.prototype.resize=function(e,t){this.iframe&&(this.iframe.height=t,isNaN(e)||e%2===0||(e+=1),this.iframe.width=e,this.width=this.iframe.getBoundingClientRect().width||e,this.height=this.iframe.getBoundingClientRect().height||t)},EPUBJS.Render.Iframe.prototype.resized=function(){this.width=this.iframe.getBoundingClientRect().width,this.height=this.iframe.getBoundingClientRect().height},EPUBJS.Render.Iframe.prototype.totalWidth=function(){return this.docEl.scrollWidth},EPUBJS.Render.Iframe.prototype.totalHeight=function(){return this.docEl.scrollHeight},EPUBJS.Render.Iframe.prototype.setPageDimensions=function(e,t){this.pageWidth=e,this.pageHeight=t},EPUBJS.Render.Iframe.prototype.setDirection=function(e){this.direction=e,this.docEl&&"rtl"==this.docEl.dir&&(this.docEl.dir="rtl",this.docEl.style.position="static",this.docEl.style.right="auto")},EPUBJS.Render.Iframe.prototype.setLeft=function(e){this.isMobile?this.docEl.style[this.transform]="translate("+-e+"px, 0)":this.document.defaultView.scrollTo(e,0)},EPUBJS.Render.Iframe.prototype.setStyle=function(e,t,r){r&&(e=EPUBJS.core.prefixed(e)),this.bodyEl&&(this.bodyEl.style[e]=t)},EPUBJS.Render.Iframe.prototype.removeStyle=function(e){this.bodyEl&&(this.bodyEl.style[e]="")},EPUBJS.Render.Iframe.prototype.addHeadTag=function(e,t,r){var n=r||this.document,o=n.createElement(e),i=n.head;for(var s in t)o.setAttribute(s,t[s]);i&&i.insertBefore(o,i.firstChild)},EPUBJS.Render.Iframe.prototype.page=function(e){this.leftPos=this.pageWidth*(e-1),"rtl"===this.direction&&(this.leftPos=-1*this.leftPos),this.setLeft(this.leftPos)},EPUBJS.Render.Iframe.prototype.getPageNumberByElement=function(e){var t,r;return e?(t=this.leftPos+e.getBoundingClientRect().left,r=Math.floor(t/this.pageWidth)+1):void 0},EPUBJS.Render.Iframe.prototype.getPageNumberByRect=function(e){var t,r;return t=this.leftPos+e.left,r=Math.floor(t/this.pageWidth)+1},EPUBJS.Render.Iframe.prototype.getBaseElement=function(){return this.bodyEl},EPUBJS.Render.Iframe.prototype.getDocumentElement=function(){return this.docEl},EPUBJS.Render.Iframe.prototype.isElementVisible=function(e){var t,r;return e&&"function"==typeof e.getBoundingClientRect&&(t=e.getBoundingClientRect(),r=t.left,0!==t.width&&0!==t.height&&r>=0&&r<this.pageWidth)?!0:!1},EPUBJS.Render.Iframe.prototype.scroll=function(e){this.iframe.scrolling=e?"yes":"no"},EPUBJS.Render.Iframe.prototype.unload=function(){this.window.removeEventListener("resize",this.resized),this.window.location.reload()},RSVP.EventTarget.mixin(EPUBJS.Render.Iframe.prototype),EPUBJS.Renderer=function(e,t){this.listenedEvents=["keydown","keyup","keypressed","mouseup","mousedown","click"],this.upEvent="mouseup",this.downEvent="mousedown","ontouchstart"in document.documentElement&&(this.listenedEvents.push("touchstart","touchend"),this.upEvent="touchend",this.downEvent="touchstart"),e&&"undefined"!=typeof EPUBJS.Render[e]?this.render=new EPUBJS.Render[e]:console.error("Not a Valid Rendering Method"),this.render.on("render:loaded",this.loaded.bind(this)),this.caches={},this.epubcfi=new EPUBJS.EpubCFI,this.spreads=!0,this.isForcedSingle=!1,this.resized=this.onResized.bind(this),this.layoutSettings={},this.hidden=t||!1,EPUBJS.Hooks.mixin(this),this.getHooks("beforeChapterDisplay"),this._q=EPUBJS.core.queue(this),this._moving=!1},EPUBJS.Renderer.prototype.Events=["renderer:keydown","renderer:keyup","renderer:keypressed","renderer:mouseup","renderer:mousedown","renderer:click","renderer:touchstart","renderer:touchend","renderer:selected","renderer:chapterUnload","renderer:chapterUnloaded","renderer:chapterDisplayed","renderer:locationChanged","renderer:visibleLocationChanged","renderer:resized","renderer:spreads"],EPUBJS.Renderer.prototype.initialize=function(e,t,r){this.container=e,this.element=this.render.create(),this.initWidth=t,this.initHeight=r,this.width=t||this.container.clientWidth,this.height=r||this.container.clientHeight,this.container.appendChild(this.element),t&&r?this.render.resize(this.width,this.height):this.render.resize("100%","100%"),document.addEventListener("orientationchange",this.onResized)},EPUBJS.Renderer.prototype.displayChapter=function(e,t){return this._moving?void console.error("Rendering In Progress"):(this._moving=!0,e.render().then(function(r){return this.currentChapter&&(this.trigger("renderer:chapterUnload"),this.currentChapter.unload(),this.render.window&&this.render.window.removeEventListener("resize",this.resized),this.removeEventListeners(),this.removeSelectionListeners(),this.trigger("renderer:chapterUnloaded"),this.contents=null,this.doc=null,this.pageMap=null),this.currentChapter=e,this.chapterPos=1,this.currentChapterCfiBase=e.cfiBase,this.layoutSettings=this.reconcileLayoutSettings(t,e.properties),this.load(r,e.href)}.bind(this)))},EPUBJS.Renderer.prototype.load=function(e,t){var r=new RSVP.defer;return this.layoutMethod=this.determineLayout(this.layoutSettings),this.layout=new EPUBJS.Layout[this.layoutMethod],this.visible(!1),this.render.load(e,t).then(function(e){this.afterLoad(e),this.beforeDisplay(function(){this.afterDisplay(),this.visible(!0),r.resolve(this)}.bind(this))}.bind(this)),r.promise},EPUBJS.Renderer.prototype.afterLoad=function(e){this.currentChapter.setDocument(this.render.document),this.contents=e,this.doc=this.render.document,this.formated=this.layout.format(e,this.render.width,this.render.height,this.gap),this.render.setPageDimensions(this.formated.pageWidth,this.formated.pageHeight),this.initWidth||this.initHeight||this.render.window.addEventListener("resize",this.resized,!1),this.addEventListeners(),this.addSelectionListeners()},EPUBJS.Renderer.prototype.afterDisplay=function(){var e=this.layout.calculatePages(),t=this.currentChapter,r=this._q.length();this._moving=!1,this.updatePages(e),this.visibleRangeCfi=this.getVisibleRangeCfi(),this.currentLocationCfi=this.visibleRangeCfi.start,0===r&&(this.trigger("renderer:locationChanged",this.currentLocationCfi),this.trigger("renderer:visibleRangeChanged",this.visibleRangeCfi)),t.cfi=this.currentLocationCfi,this.trigger("renderer:chapterDisplayed",t)},EPUBJS.Renderer.prototype.loaded=function(e){this.trigger("render:loaded",e)},EPUBJS.Renderer.prototype.reconcileLayoutSettings=function(e,t){var r={};for(var n in e)e.hasOwnProperty(n)&&(r[n]=e[n]);return t.forEach(function(e){var t,n,o=e.replace("rendition:",""),i=o.indexOf("-");-1!=i&&(t=o.slice(0,i),n=o.slice(i+1),r[t]=n)}),r},EPUBJS.Renderer.prototype.determineLayout=function(e){var t=this.determineSpreads(this.minSpreadWidth),r=t?"ReflowableSpreads":"Reflowable",n=!1;return"pre-paginated"===e.layout&&(r="Fixed",n=!0,t=!1),"reflowable"===e.layout&&"none"===e.spread&&(r="Reflowable",n=!1,t=!1),"reflowable"===e.layout&&"both"===e.spread&&(r="ReflowableSpreads",n=!1,t=!0),this.spreads=t,this.render.scroll(n),this.trigger("renderer:spreads",t),r},EPUBJS.Renderer.prototype.beforeDisplay=function(e){this.triggerHooks("beforeChapterDisplay",e,this)},EPUBJS.Renderer.prototype.updatePages=function(){this.pageMap=this.mapPage(),this.displayedPages=this.spreads?Math.ceil(this.pageMap.length/2):this.pageMap.length,this.currentChapter.pages=this.pageMap.length,this._q.flush()},EPUBJS.Renderer.prototype.reformat=function(){var e,t,r=this;this.contents&&(t=this.determineSpreads(this.minSpreadWidth),t!=this.spreads&&(this.spreads=t,this.layoutMethod=this.determineLayout(this.layoutSettings),this.layout=new EPUBJS.Layout[this.layoutMethod]),this.chapterPos=1,this.render.page(this.chapterPos),r.formated=r.layout.format(r.render.docEl,r.render.width,r.render.height,r.gap),r.render.setPageDimensions(r.formated.pageWidth,r.formated.pageHeight),e=r.layout.calculatePages(),r.updatePages(e),r.currentLocationCfi&&r.gotoCfi(r.currentLocationCfi))},EPUBJS.Renderer.prototype.visible=function(e){return"undefined"==typeof e?this.element.style.visibility:void(e!==!0||this.hidden?e===!1&&(this.element.style.visibility="hidden"):this.element.style.visibility="visible")},EPUBJS.Renderer.prototype.remove=function(){this.render.window&&(this.render.unload(),this.render.window.removeEventListener("resize",this.resized),this.removeEventListeners(),this.removeSelectionListeners()),this.container.removeChild(this.element)},EPUBJS.Renderer.prototype.applyStyles=function(e){for(var t in e)this.render.setStyle(t,e[t])},EPUBJS.Renderer.prototype.setStyle=function(e,t,r){this.render.setStyle(e,t,r)},EPUBJS.Renderer.prototype.removeStyle=function(e){this.render.removeStyle(e)},EPUBJS.Renderer.prototype.applyHeadTags=function(e){for(var t in e)this.render.addHeadTag(t,e[t])},EPUBJS.Renderer.prototype.page=function(e){return this.pageMap?e>=1&&e<=this.displayedPages?(this.chapterPos=e,this.render.page(e),this.visibleRangeCfi=this.getVisibleRangeCfi(),this.currentLocationCfi=this.visibleRangeCfi.start,this.trigger("renderer:locationChanged",this.currentLocationCfi),this.trigger("renderer:visibleRangeChanged",this.visibleRangeCfi),!0):!1:(console.warn("pageMap not set, queuing"),this._q.enqueue("page",arguments),!0)},EPUBJS.Renderer.prototype.nextPage=function(){return this.page(this.chapterPos+1)},EPUBJS.Renderer.prototype.prevPage=function(){return this.page(this.chapterPos-1)},EPUBJS.Renderer.prototype.pageByElement=function(e){var t;e&&(t=this.render.getPageNumberByElement(e),this.page(t))},EPUBJS.Renderer.prototype.lastPage=function(){return this._moving?this._q.enqueue("lastPage",arguments):void this.page(this.displayedPages)},EPUBJS.Renderer.prototype.firstPage=function(){return this._moving?this._q.enqueue("firstPage",arguments):void this.page(1)},EPUBJS.Renderer.prototype.section=function(e){var t=this.doc.getElementById(e);t&&this.pageByElement(t)},EPUBJS.Renderer.prototype.firstElementisTextNode=function(e){var t=e.childNodes,r=t.length;return r&&t[0]&&3===t[0].nodeType&&t[0].textContent.trim().length?!0:!1},EPUBJS.Renderer.prototype.isGoodNode=function(e){var t=["audio","canvas","embed","iframe","img","math","object","svg","video"];return-1!==t.indexOf(e.tagName.toLowerCase())?!0:this.firstElementisTextNode(e)},EPUBJS.Renderer.prototype.walk=function(e,t,r){for(var n,o,i,s,a=e,c=[a],h=1e4,p=0;!n&&c.length;){if(e=c.shift(),this.containsPoint(e,t,r)&&this.isGoodNode(e)&&(n=e),!n&&e&&e.childElementCount>0){if(o=e.children,!o||!o.length)return n;i=o.length?o.length:0;for(var u=i-1;u>=0;u--)o[u]!=s&&c.unshift(o[u])}if(!n&&0===c.length&&a&&null!==a.parentNode&&(c.push(a.parentNode),s=a,a=a.parentNode),p++,p>h){console.error("ENDLESS LOOP");break}}return n},EPUBJS.Renderer.prototype.containsPoint=function(e,t){var r;return e&&"function"==typeof e.getBoundingClientRect&&(r=e.getBoundingClientRect(),0!==r.width&&0!==r.height&&r.left>=t&&t<=r.left+r.width)?!0:!1},EPUBJS.Renderer.prototype.textSprint=function(e,t){var r,n,o=function(e){return/^\s*$/.test(e.data)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT};try{for(r=document.createTreeWalker(e,NodeFilter.SHOW_TEXT,{acceptNode:o},!1);n=r.nextNode();)t(n)}catch(i){for(r=document.createTreeWalker(e,NodeFilter.SHOW_TEXT,o,!1);n=r.nextNode();)t(n)}},EPUBJS.Renderer.prototype.sprint=function(e,t){for(var r,n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,null,!1);r=n.nextNode();)t(r)},EPUBJS.Renderer.prototype.mapPage=function(){var e,t,r,n,o,i,s,a,c=this,h=[],p=this.render.getBaseElement(),u=1,l=this.layout.colWidth+this.layout.gap,d=this.formated.pageWidth*(this.chapterPos-1),f=l*u-d,g=0,m=function(t){var r,o,i;if(t.nodeType==Node.TEXT_NODE){if(o=document.createRange(),o.selectNodeContents(t),r=o.getBoundingClientRect(),!r||0===r.width&&0===r.height)return;r.left>g&&(i=y(t)),r.right>g&&(i=y(t)),n=t,i&&(e=null)}},y=function(o){var i,s=c.splitTextNodeIntoWordsRanges(o);return s.forEach(function(o){var s=o.getBoundingClientRect();!s||0===s.width&&0===s.height||(s.left+s.width<f?h[u-1]||(o.collapse(!0),r=c.currentChapter.cfiFromRange(o),i=h.push({start:r,end:null})):(!e&&n&&(t=c.splitTextNodeIntoWordsRanges(n),e=t[t.length-1]),e&&(e.collapse(!1),r=c.currentChapter.cfiFromRange(e),h[h.length-1].end=r),o.collapse(!0),r=c.currentChapter.cfiFromRange(o),i=h.push({start:r,end:null}),u+=1,f=l*u-d,g=f),e=o)}),i},v=this.render.getDocumentElement(),E=v.dir;return"rtl"==E&&(v.dir="ltr",v.style.position="static"),this.textSprint(p,m),"rtl"==E&&(v.dir=E,v.style.left="auto",v.style.right="0"),!e&&n&&(t=c.splitTextNodeIntoWordsRanges(n),e=t[t.length-1]),e&&(e.collapse(!1),r=c.currentChapter.cfiFromRange(e),h[h.length-1].end=r),h.length||(o=this.doc.createRange(),o.selectNodeContents(p),o.collapse(!0),s=c.currentChapter.cfiFromRange(o),i=this.doc.createRange(),i.selectNodeContents(p),i.collapse(!1),a=c.currentChapter.cfiFromRange(i),h.push({start:s,end:a})),e=null,t=void 0,o=null,i=null,p=null,h},EPUBJS.Renderer.prototype.indexOfBreakableChar=function(e,t){var r="- 	\r\n\b\f";t||(t=0);for(var n=t;n<e.length;n++)if(-1!=r.indexOf(e.charAt(n)))return n;return-1},EPUBJS.Renderer.prototype.splitTextNodeIntoWordsRanges=function(e){var t,r=[],n=e.textContent.trim(),o=this.indexOfBreakableChar(n);if(-1===o)return t=this.doc.createRange(),t.selectNodeContents(e),[t];for(t=this.doc.createRange(),t.setStart(e,0),t.setEnd(e,o),r.push(t),t=this.doc.createRange(),t.setStart(e,o+1);-1!=o;)o=this.indexOfBreakableChar(n,o+1),o>0&&(t&&(t.setEnd(e,o),r.push(t)),t=this.doc.createRange(),t.setStart(e,o+1));return t&&(t.setEnd(e,n.length),r.push(t)),r},EPUBJS.Renderer.prototype.rangePosition=function(e){var t,r;return r=e.getClientRects(),r.length?t=r[0]:null},EPUBJS.Renderer.prototype.getPageCfi=function(){var e=2*this.chapterPos-1;return this.pageMap[e].start},EPUBJS.Renderer.prototype.getRange=function(e,t,r){var n,o=this.doc.createRange();return r=!0,"undefined"==typeof document.caretPositionFromPoint||r?"undefined"==typeof document.caretRangeFromPoint||r?(this.visibileEl=this.findElementAfter(e,t),o.setStart(this.visibileEl,1)):o=this.doc.caretRangeFromPoint(e,t):(n=this.doc.caretPositionFromPoint(e,t),o.setStart(n.offsetNode,n.offset)),o},EPUBJS.Renderer.prototype.pagesInCurrentChapter=function(){var e,t;return this.pageMap?(t=this.pageMap.length,e=this.spreads?Math.ceil(t/2):t):(console.warn("page map not loaded"),!1)},EPUBJS.Renderer.prototype.currentRenderedPage=function(){var e;return this.pageMap?e=this.spreads&&this.pageMap.length>1?2*this.chapterPos:this.chapterPos:(console.warn("page map not loaded"),!1)},EPUBJS.Renderer.prototype.getRenderedPagesLeft=function(){var e,t,r;return this.pageMap?(t=this.pageMap.length,e=this.spreads?2*this.chapterPos:this.chapterPos,r=t-e):(console.warn("page map not loaded"),!1)},EPUBJS.Renderer.prototype.getVisibleRangeCfi=function(){var e,t,r;return this.pageMap?(this.spreads?(e=2*this.chapterPos,t=this.pageMap[e-2],r=t,this.pageMap.length>1&&this.pageMap.length>e-1&&(r=this.pageMap[e-1])):(e=this.chapterPos,t=this.pageMap[e-1],r=t),t||(console.warn("page range miss:",e,this.pageMap),t=this.pageMap[this.pageMap.length-1],r=t),{start:t.start,end:r.end}):(console.warn("page map not loaded"),!1)},EPUBJS.Renderer.prototype.gotoCfi=function(e){var t,r,n;if(this._moving)return this._q.enqueue("gotoCfi",arguments);if(EPUBJS.core.isString(e)&&(e=this.epubcfi.parse(e)),"undefined"==typeof document.evaluate)r=this.epubcfi.addMarker(e,this.doc),r&&(t=this.render.getPageNumberByElement(r),this.epubcfi.removeMarker(r,this.doc),this.page(t));else if(n=this.epubcfi.generateRangeFromCfi(e,this.doc)){var o=n.getBoundingClientRect();t=o?this.render.getPageNumberByRect(o):1,this.page(t),this.currentLocationCfi=e.str}else this.page(1)},EPUBJS.Renderer.prototype.findFirstVisible=function(e){var t,r=e||this.render.getBaseElement();return t=this.walk(r,0,0),t?t:e},EPUBJS.Renderer.prototype.findElementAfter=function(e,t,r){var n,o=r||this.render.getBaseElement();return n=this.walk(o,e,t),n?n:o},EPUBJS.Renderer.prototype.resize=function(e,t,r){this.width=e,this.height=t,r!==!1&&this.render.resize(this.width,this.height),this.contents&&this.reformat(),this.trigger("renderer:resized",{width:this.width,height:this.height})},EPUBJS.Renderer.prototype.onResized=function(){var e=this.container.clientWidth,t=this.container.clientHeight;this.resize(e,t,!1)},EPUBJS.Renderer.prototype.addEventListeners=function(){this.render.document&&this.listenedEvents.forEach(function(e){this.render.document.addEventListener(e,this.triggerEvent.bind(this),!1)},this)},EPUBJS.Renderer.prototype.removeEventListeners=function(){this.render.document&&this.listenedEvents.forEach(function(e){this.render.document.removeEventListener(e,this.triggerEvent,!1)},this)},EPUBJS.Renderer.prototype.triggerEvent=function(e){this.trigger("renderer:"+e.type,e)},EPUBJS.Renderer.prototype.addSelectionListeners=function(){this.render.document.addEventListener("selectionchange",this.onSelectionChange.bind(this),!1)},EPUBJS.Renderer.prototype.removeSelectionListeners=function(){this.render.document&&this.doc.removeEventListener("selectionchange",this.onSelectionChange,!1)},EPUBJS.Renderer.prototype.onSelectionChange=function(){this.selectionEndTimeout&&clearTimeout(this.selectionEndTimeout),this.selectionEndTimeout=setTimeout(function(){this.selectedRange=this.render.window.getSelection(),this.trigger("renderer:selected",this.selectedRange)}.bind(this),500)},EPUBJS.Renderer.prototype.setMinSpreadWidth=function(e){this.minSpreadWidth=e,this.spreads=this.determineSpreads(e)},EPUBJS.Renderer.prototype.determineSpreads=function(e){return this.isForcedSingle||!e||this.width<e?!1:!0},EPUBJS.Renderer.prototype.forceSingle=function(e){this.isForcedSingle=e?!0:!1},EPUBJS.Renderer.prototype.setGap=function(e){this.gap=e},EPUBJS.Renderer.prototype.setDirection=function(e){this.direction=e,this.render.setDirection(this.direction)},EPUBJS.Renderer.prototype.replace=function(e,t,r,n){var o=this.contents.querySelectorAll(e),i=Array.prototype.slice.call(o),s=i.length;return 0===s?void r(!1):void i.forEach(function(e){var o=!1,i=function(e,t){o===!1&&(s--,n&&n(e,t,s),0>=s&&r&&r(!0),o=!0)};t(e,i)}.bind(this))},RSVP.EventTarget.mixin(EPUBJS.Renderer.prototype);var EPUBJS=EPUBJS||{};EPUBJS.replace={},EPUBJS.replace.hrefs=function(e,t){var r=this,n=function(e,n){var o,i,s,a,c,h=e.getAttribute("href"),p=h.search("://");-1!=p?e.setAttribute("target","_blank"):(s=t.render.docEl.querySelector("base"),c=s.getAttribute("href"),a=EPUBJS.core.uri(c),o=a.directory,i=o?"file"===a.protocol?EPUBJS.core.resolveUrl(a.base,h):EPUBJS.core.resolveUrl(o,h):h,e.onclick=function(){return r["goto"](i),!1}),n()};t.replace("a[href]",n,e)},EPUBJS.replace.head=function(e,t){t.replaceWithStored("link[href]","href",EPUBJS.replace.links,e)},EPUBJS.replace.resources=function(e,t){t.replaceWithStored("[src]","src",EPUBJS.replace.srcs,e)},EPUBJS.replace.svg=function(e,t){t.replaceWithStored("svg image","xlink:href",function(e,t,r){e.getUrl(t).then(r)},e)},EPUBJS.replace.srcs=function(e,t,r){e.getUrl(t).then(r)},EPUBJS.replace.links=function(e,t,r,n){"stylesheet"===n.getAttribute("rel")?EPUBJS.replace.stylesheets(e,t).then(function(e,t){r(e,t)},function(){r(null)}):e.getUrl(t).then(r,function(){r(null)})},EPUBJS.replace.stylesheets=function(e,t){var r=new RSVP.defer;return e?(e.getText(t).then(function(n){EPUBJS.replace.cssUrls(e,t,n).then(function(e){var t=window.URL||window.webkitURL||window.mozURL,n=new Blob([e],{type:"text/css"}),o=t.createObjectURL(n);r.resolve(o)},function(e){r.reject(e)})},function(e){r.reject(e)}),r.promise):void 0},EPUBJS.replace.cssUrls=function(e,t,r){var n=new RSVP.defer,o=[],i=r.match(/url\(\'?\"?((?!data:)[^\'|^\"^\)]*)\'?\"?\)/g);return e?i?(i.forEach(function(i){var s=EPUBJS.core.resolveUrl(t,i.replace(/url\(|[|\)|\'|\"]|\?.*$/g,"")),a=e.getUrl(s).then(function(e){r=r.replace(i,'url("'+e+'")')},function(e){n.reject(e)});o.push(a)}),RSVP.all(o).then(function(){n.resolve(r)}),n.promise):(n.resolve(r),n.promise):void 0},EPUBJS.Storage=function(e){this.checkRequirements(),this.urlCache={},this.withCredentials=e,this.URL=window.URL||window.webkitURL||window.mozURL,this.offline=!1},EPUBJS.Storage.prototype.checkRequirements=function(){"undefined"==typeof localforage&&console.error("localForage library not loaded")},EPUBJS.Storage.prototype.put=function(e){var t=new RSVP.defer,r=e.length,n=0,o=function(t){var i,s,a=t||new RSVP.defer;return n>=r?a.resolve():(i=e[n].url,s=window.encodeURIComponent(i),EPUBJS.core.request(i,"binary").then(function(e){return localforage.setItem(s,e)}).then(function(){n++,setTimeout(function(){o(a)},1)})),a.promise}.bind(this);return Array.isArray(e)||(e=[e]),o().then(function(){t.resolve()}.bind(this)),t.promise},EPUBJS.Storage.prototype.token=function(e,t){var r=window.encodeURIComponent(e);return localforage.setItem(r,t).then(function(e){return null===e?!1:!0})},EPUBJS.Storage.prototype.isStored=function(e){var t=window.encodeURIComponent(e);return localforage.getItem(t).then(function(e){return null===e?!1:!0})},EPUBJS.Storage.prototype.getText=function(e){var t=window.encodeURIComponent(e);return EPUBJS.core.request(e,"arraybuffer",this.withCredentials).then(function(e){return this.offline&&(this.offline=!1,this.trigger("offline",!1)),localforage.setItem(t,e),e}.bind(this)).then(function(t){var r=new RSVP.defer,n=EPUBJS.core.getMimeType(e),o=new Blob([t],{type:n}),i=new FileReader;return i.addEventListener("loadend",function(){r.resolve(i.result)}),i.readAsText(o,n),r.promise})["catch"](function(){var r=new RSVP.defer,n=localforage.getItem(t);return this.offline||(this.offline=!0,this.trigger("offline",!0)),n?(n.then(function(t){var n=EPUBJS.core.getMimeType(e),o=new Blob([t],{type:n}),i=new FileReader;i.addEventListener("loadend",function(){r.resolve(i.result)}),i.readAsText(o,n)}),r.promise):(r.reject({message:"File not found in the storage: "+e,stack:(new Error).stack}),r.promise)}.bind(this))},EPUBJS.Storage.prototype.getUrl=function(e){var t=window.encodeURIComponent(e);return EPUBJS.core.request(e,"arraybuffer",this.withCredentials).then(function(r){return this.offline&&(this.offline=!1,this.trigger("offline",!1)),localforage.setItem(t,r),e}.bind(this))["catch"](function(){var r,n,o=new RSVP.defer,i=window.URL||window.webkitURL||window.mozURL;return this.offline||(this.offline=!0,this.trigger("offline",!0)),t in this.urlCache?(o.resolve(this.urlCache[t]),o.promise):(r=localforage.getItem(t))?(r.then(function(r){var s=new Blob([r],{type:EPUBJS.core.getMimeType(e)});n=i.createObjectURL(s),o.resolve(n),this.urlCache[t]=n}.bind(this)),o.promise):(o.reject({message:"File not found in the storage: "+e,stack:(new Error).stack}),o.promise)}.bind(this))},EPUBJS.Storage.prototype.getXml=function(e){var t=window.encodeURIComponent(e);return EPUBJS.core.request(e,"arraybuffer",this.withCredentials).then(function(e){return this.offline&&(this.offline=!1,this.trigger("offline",!1)),localforage.setItem(t,e),e}.bind(this)).then(function(t){var r=new RSVP.defer,n=EPUBJS.core.getMimeType(e),o=new Blob([t],{type:n}),i=new FileReader;return i.addEventListener("loadend",function(){var e=new DOMParser,t=e.parseFromString(i.result,"text/xml");r.resolve(t)}),i.readAsText(o,n),r.promise})["catch"](function(){var r=new RSVP.defer,n=localforage.getItem(t);return this.offline||(this.offline=!0,this.trigger("offline",!0)),n?(n.then(function(t){var n=EPUBJS.core.getMimeType(e),o=new Blob([t],{type:n}),i=new FileReader;i.addEventListener("loadend",function(){var e=new DOMParser,t=e.parseFromString(i.result,"text/xml");r.resolve(t)}),i.readAsText(o,n)}),r.promise):(r.reject({message:"File not found in the storage: "+e,stack:(new Error).stack}),r.promise)}.bind(this))},EPUBJS.Storage.prototype.revokeUrl=function(e){var t=window.URL||window.webkitURL||window.mozURL,r=this.urlCache[e];r&&t.revokeObjectURL(r)},EPUBJS.Storage.prototype.failed=function(e){console.error(e)},RSVP.EventTarget.mixin(EPUBJS.Storage.prototype),EPUBJS.Unarchiver=function(){this.checkRequirements(),this.urlCache={}},EPUBJS.Unarchiver.prototype.checkRequirements=function(){"undefined"==typeof JSZip&&console.error("JSZip lib not loaded")},EPUBJS.Unarchiver.prototype.open=function(e){if(e instanceof ArrayBuffer){this.zip=new JSZip(e);var t=new RSVP.defer;return t.resolve(),t.promise}return EPUBJS.core.request(e,"binary").then(function(e){this.zip=new JSZip(e)}.bind(this))},EPUBJS.Unarchiver.prototype.getXml=function(e,t){var r=window.decodeURIComponent(e);return this.getText(r,t).then(function(t){var r=new DOMParser,n=EPUBJS.core.getMimeType(e);return r.parseFromString(t,n)})},EPUBJS.Unarchiver.prototype.getUrl=function(e){var t,r,n=this,o=new RSVP.defer,i=window.decodeURIComponent(e),s=this.zip.file(i),a=window.URL||window.webkitURL||window.mozURL;return s?e in this.urlCache?(o.resolve(this.urlCache[e]),o.promise):(r=new Blob([s.asUint8Array()],{type:EPUBJS.core.getMimeType(s.name)}),t=a.createObjectURL(r),o.resolve(t),n.urlCache[e]=t,o.promise):(o.reject({message:"File not found in the epub: "+e,stack:(new Error).stack}),o.promise)},EPUBJS.Unarchiver.prototype.getText=function(e){var t,r=new RSVP.defer,n=window.decodeURIComponent(e),o=this.zip.file(n);return o?(t=o.asText(),r.resolve(t),r.promise):(r.reject({message:"File not found in the epub: "+e,stack:(new Error).stack}),r.promise)},EPUBJS.Unarchiver.prototype.revokeUrl=function(e){var t=window.URL||window.webkitURL||window.mozURL,r=this.urlCache[e];r&&t.revokeObjectURL(r)},EPUBJS.Unarchiver.prototype.failed=function(e){console.error(e)},EPUBJS.Unarchiver.prototype.afterSaved=function(){this.callback()},EPUBJS.Unarchiver.prototype.toStorage=function(e){function t(){i--,0===i&&o.afterSaved()}var r=0,n=20,o=this,i=e.length;e.forEach(function(e){setTimeout(function(e){o.saveEntryFileToStorage(e,t)},r,e),r+=n}),console.log("time",r)},function(){var e={application:{ecmascript:["es","ecma"],javascript:"js",ogg:"ogx",pdf:"pdf",postscript:["ps","ai","eps","epsi","epsf","eps2","eps3"],"rdf+xml":"rdf",smil:["smi","smil"],"xhtml+xml":["xhtml","xht"],xml:["xml","xsl","xsd","opf","ncx"],zip:"zip","x-httpd-eruby":"rhtml","x-latex":"latex","x-maker":["frm","maker","frame","fm","fb","book","fbdoc"],"x-object":"o","x-shockwave-flash":["swf","swfl"],"x-silverlight":"scr","epub+zip":"epub","font-tdpfr":"pfr","inkml+xml":["ink","inkml"],json:"json","jsonml+json":"jsonml","mathml+xml":"mathml","metalink+xml":"metalink",mp4:"mp4s","omdoc+xml":"omdoc",oxps:"oxps","vnd.amazon.ebook":"azw",widget:"wgt","x-dtbook+xml":"dtb","x-dtbresource+xml":"res","x-font-bdf":"bdf","x-font-ghostscript":"gsf","x-font-linux-psf":"psf","x-font-otf":"otf","x-font-pcf":"pcf","x-font-snf":"snf","x-font-ttf":["ttf","ttc"],"x-font-type1":["pfa","pfb","pfm","afm"],"x-font-woff":"woff","x-mobipocket-ebook":["prc","mobi"],"x-mspublisher":"pub","x-nzb":"nzb","x-tgif":"obj","xaml+xml":"xaml","xml-dtd":"dtd","xproc+xml":"xpl","xslt+xml":"xslt","internet-property-stream":"acx","x-compress":"z","x-compressed":"tgz","x-gzip":"gz"},audio:{flac:"flac",midi:["mid","midi","kar","rmi"],mpeg:["mpga","mpega","mp2","mp3","m4a","mp2a","m2a","m3a"],mpegurl:"m3u",ogg:["oga","ogg","spx"],"x-aiff":["aif","aiff","aifc"],"x-ms-wma":"wma","x-wav":"wav",adpcm:"adp",mp4:"mp4a",webm:"weba","x-aac":"aac","x-caf":"caf","x-matroska":"mka","x-pn-realaudio-plugin":"rmp",xm:"xm",mid:["mid","rmi"]},image:{gif:"gif",ief:"ief",jpeg:["jpeg","jpg","jpe"],pcx:"pcx",png:"png","svg+xml":["svg","svgz"],tiff:["tiff","tif"],"x-icon":"ico",bmp:"bmp",webp:"webp","x-pict":["pic","pct"],"x-tga":"tga","cis-cod":"cod"},message:{rfc822:["eml","mime","mht","mhtml","nws"]
},text:{"cache-manifest":["manifest","appcache"],calendar:["ics","icz","ifb"],css:"css",csv:"csv",h323:"323",html:["html","htm","shtml","stm"],iuls:"uls",mathml:"mml",plain:["txt","text","brf","conf","def","list","log","in","bas"],richtext:"rtx","tab-separated-values":"tsv","x-bibtex":"bib","x-dsrc":"d","x-diff":["diff","patch"],"x-haskell":"hs","x-java":"java","x-literate-haskell":"lhs","x-moc":"moc","x-pascal":["p","pas"],"x-pcs-gcd":"gcd","x-perl":["pl","pm"],"x-python":"py","x-scala":"scala","x-setext":"etx","x-tcl":["tcl","tk"],"x-tex":["tex","ltx","sty","cls"],"x-vcard":"vcf",sgml:["sgml","sgm"],"x-c":["c","cc","cxx","cpp","h","hh","dic"],"x-fortran":["f","for","f77","f90"],"x-opml":"opml","x-nfo":"nfo","x-sfv":"sfv","x-uuencode":"uu",webviewhtml:"htt"},video:{mpeg:["mpeg","mpg","mpe","m1v","m2v","mp2","mpa","mpv2"],mp4:["mp4","mp4v","mpg4"],quicktime:["qt","mov"],ogg:"ogv","vnd.mpegurl":["mxu","m4u"],"x-flv":"flv","x-la-asf":["lsf","lsx"],"x-mng":"mng","x-ms-asf":["asf","asx","asr"],"x-ms-wm":"wm","x-ms-wmv":"wmv","x-ms-wmx":"wmx","x-ms-wvx":"wvx","x-msvideo":"avi","x-sgi-movie":"movie","x-matroska":["mpv","mkv","mk3d","mks"],"3gpp2":"3g2",h261:"h261",h263:"h263",h264:"h264",jpeg:"jpgv",jpm:["jpm","jpgm"],mj2:["mj2","mjp2"],"vnd.ms-playready.media.pyv":"pyv","vnd.uvvu.mp4":["uvu","uvvu"],"vnd.vivo":"viv",webm:"webm","x-f4v":"f4v","x-m4v":"m4v","x-ms-vob":"vob","x-smv":"smv"}},t=function(){var t,r,n,o,i={};for(t in e)if(e.hasOwnProperty(t))for(r in e[t])if(e[t].hasOwnProperty(r))if(n=e[t][r],"string"==typeof n)i[n]=t+"/"+r;else for(o=0;o<n.length;o++)i[n[o]]=t+"/"+r;return i}();EPUBJS.core.getMimeType=function(e){var r="text/plain";return e&&t[e.split(".").pop().toLowerCase()]||r}}();
EPUBJS.Hooks.register("beforeChapterDisplay").endnotes=function(e,t){var o=t.contents.querySelectorAll("a[href]"),n=Array.prototype.slice.call(o),r="epub:type",a="noteref",i=EPUBJS.core.folder(location.pathname),s=(i+EPUBJS.cssPath||i,{});EPUBJS.core.addCss(EPUBJS.cssPath+"popup.css",!1,t.render.document.head),n.forEach(function(e){function o(){var o,r,a=t.height,c=t.width,g=225;m||(o=p.cloneNode(!0),m=o.querySelector("p")),s[d]||(s[d]=document.createElement("div"),s[d].setAttribute("class","popup"),pop_content=document.createElement("div"),s[d].appendChild(pop_content),pop_content.appendChild(m),pop_content.setAttribute("class","pop_content"),t.render.document.body.appendChild(s[d]),s[d].addEventListener("mouseover",n,!1),s[d].addEventListener("mouseout",i,!1),t.on("renderer:pageChanged",l,this),t.on("renderer:pageChanged",i,this)),o=s[d],r=e.getBoundingClientRect(),h=r.left,u=r.top,o.classList.add("show"),popRect=o.getBoundingClientRect(),o.style.left=h-popRect.width/2+"px",o.style.top=u+"px",g>a/2.5&&(g=a/2.5,pop_content.style.maxHeight=g+"px"),popRect.height+u>=a-25?(o.style.top=u-popRect.height+"px",o.classList.add("above")):o.classList.remove("above"),h-popRect.width<=0?(o.style.left=h+"px",o.classList.add("left")):o.classList.remove("left"),h+popRect.width/2>=c?(o.style.left=h-300+"px",popRect=o.getBoundingClientRect(),o.style.left=h-popRect.width+"px",popRect.height+u>=a-25?(o.style.top=u-popRect.height+"px",o.classList.add("above")):o.classList.remove("above"),o.classList.add("right")):o.classList.remove("right")}function n(){s[d].classList.add("on")}function i(){s[d].classList.remove("on")}function l(){setTimeout(function(){s[d].classList.remove("show")},100)}var c,d,p,h,u,m,g=e.getAttribute(r);g==a&&(c=e.getAttribute("href"),d=c.replace("#",""),p=t.render.document.getElementById(d),e.addEventListener("mouseover",o,!1),e.addEventListener("mouseout",l,!1))}),e&&e()},EPUBJS.Hooks.register("beforeChapterDisplay").mathml=function(e,t){if(-1!==t.currentChapter.manifestProperties.indexOf("mathml")){t.render.iframe.contentWindow.mathmlCallback=e;var o=document.createElement("script");o.type="text/x-mathjax-config",o.innerHTML='        MathJax.Hub.Register.StartupHook("End",function () {           window.mathmlCallback();         });        MathJax.Hub.Config({jax: ["input/TeX","input/MathML","output/SVG"],extensions: ["tex2jax.js","mml2jax.js","MathEvents.js"],TeX: {extensions: ["noErrors.js","noUndefined.js","autoload-all.js"]},MathMenu: {showRenderer: false},menuSettings: {zoom: "Click"},messageStyle: "none"});                 ',t.doc.body.appendChild(o),EPUBJS.core.addScript("http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML",null,t.doc.head)}else e&&e()},EPUBJS.Hooks.register("beforeChapterDisplay").smartimages=function(e,t){var o=t.contents.querySelectorAll("img"),n=Array.prototype.slice.call(o),r=t.height;return"reflowable"!=t.layoutSettings.layout?void e():(n.forEach(function(e){var o=function(){var o,n=e.getBoundingClientRect(),a=n.height,i=n.top,s=e.getAttribute("data-height"),l=s||a,c=Number(getComputedStyle(e,"").fontSize.match(/(\d*(\.\d*)?)px/)[1]),d=c?c/2:0;r=t.contents.clientHeight,0>i&&(i=0),l+i>=r?(r/2>i?(o=r-i-d,e.style.maxHeight=o+"px",e.style.width="auto"):(l>r&&(e.style.maxHeight=r+"px",e.style.width="auto",n=e.getBoundingClientRect(),l=n.height),e.style.display="block",e.style.WebkitColumnBreakBefore="always",e.style.breakBefore="column"),e.setAttribute("data-height",o)):(e.style.removeProperty("max-height"),e.style.removeProperty("margin-top"))},n=function(){t.off("renderer:resized",o),t.off("renderer:chapterUnload",this)};e.addEventListener("load",o,!1),t.on("renderer:resized",o),t.on("renderer:chapterUnload",n),o()}),void(e&&e()))},EPUBJS.Hooks.register("beforeChapterDisplay").transculsions=function(e,t){var o=t.contents.querySelectorAll("[transclusion]"),n=Array.prototype.slice.call(o);n.forEach(function(e){function o(){c=i,d=s,c>chapter.colWidth&&(n=chapter.colWidth/c,c=chapter.colWidth,d*=n),a.width=c,a.height=d}var n,r=e.getAttribute("ref"),a=document.createElement("iframe"),i=e.getAttribute("width"),s=e.getAttribute("height"),l=e.parentNode,c=i,d=s;o(),t.listenUntil("renderer:resized","renderer:chapterUnloaded",o),a.src=r,l.replaceChild(a,e)}),e&&e()};
EPUBJS.Hooks.register("beforeChapterDisplay").endnotes=function(e,t){var o=t.contents.querySelectorAll("a[href]"),n=Array.prototype.slice.call(o),r="epub:type",a="noteref",i=EPUBJS.core.folder(location.pathname),s=(i+EPUBJS.cssPath||i,{});EPUBJS.core.addCss(EPUBJS.cssPath+"popup.css",!1,t.render.document.head),n.forEach(function(e){function o(){var o,r,a=t.height,c=t.width,g=225;m||(o=p.cloneNode(!0),m=o.querySelector("p")),s[d]||(s[d]=document.createElement("div"),s[d].setAttribute("class","popup"),pop_content=document.createElement("div"),s[d].appendChild(pop_content),pop_content.appendChild(m),pop_content.setAttribute("class","pop_content"),t.render.document.body.appendChild(s[d]),s[d].addEventListener("mouseover",n,!1),s[d].addEventListener("mouseout",i,!1),t.on("renderer:pageChanged",l,this),t.on("renderer:pageChanged",i,this)),o=s[d],r=e.getBoundingClientRect(),h=r.left,u=r.top,o.classList.add("show"),popRect=o.getBoundingClientRect(),o.style.left=h-popRect.width/2+"px",o.style.top=u+"px",g>a/2.5&&(g=a/2.5,pop_content.style.maxHeight=g+"px"),popRect.height+u>=a-25?(o.style.top=u-popRect.height+"px",o.classList.add("above")):o.classList.remove("above"),h-popRect.width<=0?(o.style.left=h+"px",o.classList.add("left")):o.classList.remove("left"),h+popRect.width/2>=c?(o.style.left=h-300+"px",popRect=o.getBoundingClientRect(),o.style.left=h-popRect.width+"px",popRect.height+u>=a-25?(o.style.top=u-popRect.height+"px",o.classList.add("above")):o.classList.remove("above"),o.classList.add("right")):o.classList.remove("right")}function n(){s[d].classList.add("on")}function i(){s[d].classList.remove("on")}function l(){setTimeout(function(){s[d].classList.remove("show")},100)}var c,d,p,h,u,m,g=e.getAttribute(r);g==a&&(c=e.getAttribute("href"),d=c.replace("#",""),p=t.render.document.getElementById(d),e.addEventListener("mouseover",o,!1),e.addEventListener("mouseout",l,!1))}),e&&e()},EPUBJS.Hooks.register("beforeChapterDisplay").mathml=function(e,t){if(-1!==t.currentChapter.manifestProperties.indexOf("mathml")){t.render.iframe.contentWindow.mathmlCallback=e;var o=document.createElement("script");o.type="text/x-mathjax-config",o.innerHTML='        MathJax.Hub.Register.StartupHook("End",function () {           window.mathmlCallback();         });        MathJax.Hub.Config({jax: ["input/TeX","input/MathML","output/SVG"],extensions: ["tex2jax.js","mml2jax.js","MathEvents.js"],TeX: {extensions: ["noErrors.js","noUndefined.js","autoload-all.js"]},MathMenu: {showRenderer: false},menuSettings: {zoom: "Click"},messageStyle: "none"});                 ',t.doc.body.appendChild(o),EPUBJS.core.addScript("http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML",null,t.doc.head)}else e&&e()},EPUBJS.Hooks.register("beforeChapterDisplay").smartimages=function(e,t){var o=t.contents.querySelectorAll("img"),n=Array.prototype.slice.call(o),r=t.height;return"reflowable"!=t.layoutSettings.layout?void e():(n.forEach(function(e){var o=function(){var o,n=e.getBoundingClientRect(),a=n.height,i=n.top,s=e.getAttribute("data-height"),l=s||a,c=Number(getComputedStyle(e,"").fontSize.match(/(\d*(\.\d*)?)px/)[1]),d=c?c/2:0;r=t.contents.clientHeight,0>i&&(i=0),l+i>=r?(r/2>i?(o=r-i-d,e.style.maxHeight=o+"px",e.style.width="auto"):(l>r&&(e.style.maxHeight=r+"px",e.style.width="auto",n=e.getBoundingClientRect(),l=n.height),e.style.display="block",e.style.WebkitColumnBreakBefore="always",e.style.breakBefore="column"),e.setAttribute("data-height",o)):(e.style.removeProperty("max-height"),e.style.removeProperty("margin-top"))},n=function(){t.off("renderer:resized",o),t.off("renderer:chapterUnload",this)};e.addEventListener("load",o,!1),t.on("renderer:resized",o),t.on("renderer:chapterUnload",n),o()}),void(e&&e()))},EPUBJS.Hooks.register("beforeChapterDisplay").transculsions=function(e,t){var o=t.contents.querySelectorAll("[transclusion]"),n=Array.prototype.slice.call(o);n.forEach(function(e){function o(){c=i,d=s,c>chapter.colWidth&&(n=chapter.colWidth/c,c=chapter.colWidth,d*=n),a.width=c,a.height=d}var n,r=e.getAttribute("ref"),a=document.createElement("iframe"),i=e.getAttribute("width"),s=e.getAttribute("height"),l=e.parentNode,c=i,d=s;o(),t.listenUntil("renderer:resized","renderer:chapterUnloaded",o),a.src=r,l.replaceChild(a,e)}),e&&e()};
EPUBJS.reader={},EPUBJS.reader.plugins={},function(e,t){var o=(e.ePubReader||{},e.ePubReader=function(e,t){return new EPUBJS.Reader(e,t)});"function"==typeof define&&define.amd?define(function(){return Reader}):"undefined"!=typeof module&&module.exports&&(module.exports=o)}(window,jQuery),EPUBJS.Reader=function(e,t){var o,n,r,i=this,s=$("#viewer"),a=window.location.search;this.settings=EPUBJS.core.defaults(t||{},{bookPath:e,restore:!1,reload:!1,bookmarks:void 0,annotations:void 0,contained:void 0,bookKey:void 0,styles:void 0,sidebarReflow:!1,generatePagination:!1,history:!0}),a&&(r=a.slice(1).split("&"),r.forEach(function(e){var t=e.split("="),o=t[0],n=t[1]||"";i.settings[o]=decodeURIComponent(n)})),this.setBookKey(this.settings.bookPath),this.settings.restore&&this.isSaved()&&this.applySavedSettings(),this.settings.styles=this.settings.styles||{fontSize:"100%"},this.book=o=new EPUBJS.Book(this.settings),this.settings.previousLocationCfi&&o.gotoCfi(this.settings.previousLocationCfi),this.offline=!1,this.sidebarOpen=!1,this.settings.bookmarks||(this.settings.bookmarks=[]),this.settings.annotations||(this.settings.annotations=[]),this.settings.generatePagination&&o.generatePagination(s.width(),s.height()),o.renderTo("viewer"),i.ReaderController=EPUBJS.reader.ReaderController.call(i,o),i.SettingsController=EPUBJS.reader.SettingsController.call(i,o),i.ControlsController=EPUBJS.reader.ControlsController.call(i,o),i.SidebarController=EPUBJS.reader.SidebarController.call(i,o),i.BookmarksController=EPUBJS.reader.BookmarksController.call(i,o),i.NotesController=EPUBJS.reader.NotesController.call(i,o);for(n in EPUBJS.reader.plugins)EPUBJS.reader.plugins.hasOwnProperty(n)&&(i[n]=EPUBJS.reader.plugins[n].call(i,o));return o.ready.all.then(function(){i.ReaderController.hideLoader()}),o.getMetadata().then(function(e){i.MetaController=EPUBJS.reader.MetaController.call(i,e)}),o.getToc().then(function(e){i.TocController=EPUBJS.reader.TocController.call(i,e)}),window.addEventListener("beforeunload",this.unload.bind(this),!1),window.addEventListener("hashchange",this.hashChanged.bind(this),!1),document.addEventListener("keydown",this.adjustFontSize.bind(this),!1),o.on("renderer:keydown",this.adjustFontSize.bind(this)),o.on("renderer:keydown",i.ReaderController.arrowKeys.bind(this)),o.on("renderer:selected",this.selectedRange.bind(this)),this},EPUBJS.Reader.prototype.adjustFontSize=function(e){var t,o=2,n=187,r=189,i=48,s=e.ctrlKey||e.metaKey;this.settings.styles&&(this.settings.styles.fontSize||(this.settings.styles.fontSize="100%"),t=parseInt(this.settings.styles.fontSize.slice(0,-1)),s&&e.keyCode==n&&(e.preventDefault(),this.book.setStyle("fontSize",t+o+"%")),s&&e.keyCode==r&&(e.preventDefault(),this.book.setStyle("fontSize",t-o+"%")),s&&e.keyCode==i&&(e.preventDefault(),this.book.setStyle("fontSize","100%")))},EPUBJS.Reader.prototype.addBookmark=function(e){var t=this.isBookmarked(e);t>-1||(this.settings.bookmarks.push(e),this.trigger("reader:bookmarked",e))},EPUBJS.Reader.prototype.removeBookmark=function(e){var t=this.isBookmarked(e);-1!==t&&(this.settings.bookmarks.splice(t,1),this.trigger("reader:unbookmarked",t))},EPUBJS.Reader.prototype.isBookmarked=function(e){var t=this.settings.bookmarks;return t.indexOf(e)},EPUBJS.Reader.prototype.clearBookmarks=function(){this.settings.bookmarks=[]},EPUBJS.Reader.prototype.addNote=function(e){this.settings.annotations.push(e)},EPUBJS.Reader.prototype.removeNote=function(e){var t=this.settings.annotations.indexOf(e);-1!==t&&delete this.settings.annotations[t]},EPUBJS.Reader.prototype.clearNotes=function(){this.settings.annotations=[]},EPUBJS.Reader.prototype.setBookKey=function(e){return this.settings.bookKey||(this.settings.bookKey="epubjsreader:"+EPUBJS.VERSION+":"+window.location.host+":"+e),this.settings.bookKey},EPUBJS.Reader.prototype.isSaved=function(e){var t;return localStorage?(t=localStorage.getItem(this.settings.bookKey),null===t?!1:!0):!1},EPUBJS.Reader.prototype.removeSavedSettings=function(){return localStorage?void localStorage.removeItem(this.settings.bookKey):!1},EPUBJS.Reader.prototype.applySavedSettings=function(){var e;if(!localStorage)return!1;try{e=JSON.parse(localStorage.getItem(this.settings.bookKey))}catch(t){return!1}return e?(e.styles&&(this.settings.styles=EPUBJS.core.defaults(this.settings.styles||{},e.styles)),this.settings=EPUBJS.core.defaults(this.settings,e),!0):!1},EPUBJS.Reader.prototype.saveSettings=function(){return this.book&&(this.settings.previousLocationCfi=this.book.getCurrentLocationCfi()),localStorage?void localStorage.setItem(this.settings.bookKey,JSON.stringify(this.settings)):!1},EPUBJS.Reader.prototype.unload=function(){this.settings.restore&&localStorage&&this.saveSettings()},EPUBJS.Reader.prototype.hashChanged=function(){var e=window.location.hash.slice(1);this.book["goto"](e)},EPUBJS.Reader.prototype.selectedRange=function(e){var t=new EPUBJS.EpubCFI,o=t.generateCfiFromRangeAnchor(e,this.book.renderer.currentChapter.cfiBase),n="#"+o;this.settings.history&&window.location.hash!=n&&(history.pushState({},"",n),this.currentLocationCfi=o)},RSVP.EventTarget.mixin(EPUBJS.Reader.prototype),EPUBJS.reader.BookmarksController=function(){var e=this.book,t=$("#bookmarksView"),o=t.find("#bookmarks"),n=document.createDocumentFragment(),r=function(){t.show()},i=function(){t.hide()},s=0,a=function(t){var o=document.createElement("li"),n=document.createElement("a");return o.id="bookmark-"+s,o.classList.add("list_item"),n.textContent=t,n.href=t,n.classList.add("bookmark_link"),n.addEventListener("click",function(t){var o=this.getAttribute("href");e.gotoCfi(o),t.preventDefault()},!1),o.appendChild(n),s++,o};return this.settings.bookmarks.forEach(function(e){var t=a(e);n.appendChild(t)}),o.append(n),this.on("reader:bookmarked",function(e){var t=a(e);o.append(t)}),this.on("reader:unbookmarked",function(e){var t=$("#bookmark-"+e);t.remove()}),{show:r,hide:i}},EPUBJS.reader.ControlsController=function(e){var t=this,o=($("#store"),$("#fullscreen")),n=($("#fullscreenicon"),$("#cancelfullscreenicon"),$("#slider")),r=($("#main"),$("#sidebar"),$("#setting")),i=$("#bookmark"),s=function(){t.offline=!1},a=function(){t.offline=!0},d=!1;return e.on("book:online",s),e.on("book:offline",a),n.on("click",function(){t.sidebarOpen?(t.SidebarController.hide(),n.addClass("icon-menu"),n.removeClass("icon-right")):(t.SidebarController.show(),n.addClass("icon-right"),n.removeClass("icon-menu"))}),"undefined"!=typeof screenfull&&(o.on("click",function(){screenfull.toggle($("#container")[0])}),screenfull.raw&&document.addEventListener(screenfull.raw.fullscreenchange,function(){d=screenfull.isFullscreen,d?o.addClass("icon-resize-small").removeClass("icon-resize-full"):o.addClass("icon-resize-full").removeClass("icon-resize-small")})),r.on("click",function(){t.SettingsController.show()}),i.on("click",function(){var e=t.book.getCurrentLocationCfi(),o=t.isBookmarked(e);-1===o?(t.addBookmark(e),i.addClass("icon-bookmark").removeClass("icon-bookmark-empty")):(t.removeBookmark(e),i.removeClass("icon-bookmark").addClass("icon-bookmark-empty"))}),e.on("renderer:locationChanged",function(e){var o="#"+e,n=t.isBookmarked(e);-1===n?i.removeClass("icon-bookmark").addClass("icon-bookmark-empty"):i.addClass("icon-bookmark").removeClass("icon-bookmark-empty"),t.currentLocationCfi=e,t.settings.history&&window.location.hash!=o&&history.pushState({},"",o)}),e.on("book:pageChanged",function(e){}),{}},EPUBJS.reader.MetaController=function(e){var t=e.bookTitle,o=e.creator,n=$("#book-title"),r=$("#chapter-title"),i=$("#title-seperator");document.title=t+" – "+o,n.html(t),r.html(o),i.show()},EPUBJS.reader.NotesController=function(){var e=this.book,t=this,o=$("#notesView"),n=$("#notes"),r=$("#note-text"),i=$("#note-anchor"),s=t.settings.annotations,a=e.renderer,d=[],l=new EPUBJS.EpubCFI,c=function(){o.show()},h=function(){o.hide()},u=function(o){var n,s,a,d,c,h=e.renderer.doc;if(h.caretPositionFromPoint?(n=h.caretPositionFromPoint(o.clientX,o.clientY),s=n.offsetNode,a=n.offset):h.caretRangeFromPoint&&(n=h.caretRangeFromPoint(o.clientX,o.clientY),s=n.startContainer,a=n.startOffset),3!==s.nodeType)for(var g=0;g<s.childNodes.length;g++)if(3==s.childNodes[g].nodeType){s=s.childNodes[g];break}a=s.textContent.indexOf(".",a),-1===a?a=s.length:a+=1,d=l.generateCfiFromTextNode(s,a,e.renderer.currentChapter.cfiBase),c={annotatedAt:new Date,anchor:d,body:r.val()},t.addNote(c),f(c),p(c),r.val(""),i.text("Attach"),r.prop("disabled",!1),e.off("renderer:click",u)},f=function(t){var o=document.createElement("li"),r=document.createElement("a");o.innerHTML=t.body,r.innerHTML=" context &#187;",r.href="#"+t.anchor,r.onclick=function(){return e.gotoCfi(t.anchor),!1},o.appendChild(r),n.append(o)},p=function(t){var o=e.renderer.doc,n=document.createElement("span"),r=document.createElement("a");n.classList.add("footnotesuperscript","reader_generated"),n.style.verticalAlign="super",n.style.fontSize=".75em",n.style.lineHeight="1em",r.style.padding="2px",r.style.backgroundColor="#fffa96",r.style.borderRadius="5px",r.style.cursor="pointer",n.id="note-"+EPUBJS.core.uuid(),r.innerHTML=s.indexOf(t)+1+"[Reader]",n.appendChild(r),l.addMarker(t.anchor,o,n),g(n,t.body)},g=function(e,o){var n=e.id,r=function(){var t,r,c,h,u=a.height,f=a.width,p=225;d[n]||(d[n]=document.createElement("div"),d[n].setAttribute("class","popup"),pop_content=document.createElement("div"),d[n].appendChild(pop_content),pop_content.innerHTML=o,pop_content.setAttribute("class","pop_content"),a.render.document.body.appendChild(d[n]),d[n].addEventListener("mouseover",i,!1),d[n].addEventListener("mouseout",s,!1),a.on("renderer:locationChanged",l,this),a.on("renderer:locationChanged",s,this)),t=d[n],r=e.getBoundingClientRect(),c=r.left,h=r.top,t.classList.add("show"),popRect=t.getBoundingClientRect(),t.style.left=c-popRect.width/2+"px",t.style.top=h+"px",p>u/2.5&&(p=u/2.5,pop_content.style.maxHeight=p+"px"),popRect.height+h>=u-25?(t.style.top=h-popRect.height+"px",t.classList.add("above")):t.classList.remove("above"),c-popRect.width<=0?(t.style.left=c+"px",t.classList.add("left")):t.classList.remove("left"),c+popRect.width/2>=f?(t.style.left=c-300+"px",popRect=t.getBoundingClientRect(),t.style.left=c-popRect.width+"px",popRect.height+h>=u-25?(t.style.top=h-popRect.height+"px",t.classList.add("above")):t.classList.remove("above"),t.classList.add("right")):t.classList.remove("right")},i=function(){d[n].classList.add("on")},s=function(){d[n].classList.remove("on")},l=function(){setTimeout(function(){d[n].classList.remove("show")},100)},h=function(){t.ReaderController.slideOut(),c()};e.addEventListener("mouseover",r,!1),e.addEventListener("mouseout",l,!1),e.addEventListener("click",h,!1)};return i.on("click",function(t){i.text("Cancel"),r.prop("disabled","true"),e.on("renderer:click",u)}),s.forEach(function(e){f(e)}),a.registerHook("beforeChapterDisplay",function(e,t){var o=t.currentChapter;s.forEach(function(e){var t=l.parse(e.anchor);if(t.spinePos===o.spinePos)try{p(e)}catch(n){console.log("anchoring failed",e.anchor)}}),e()},!0),{show:c,hide:h}},EPUBJS.reader.ReaderController=function(e){var t=$("#main"),o=$("#divider"),n=$("#loader"),r=$("#next"),i=$("#prev"),s=this,e=this.book,a=function(){var o=e.getCurrentLocationCfi();s.settings.sidebarReflow?(t.removeClass("single"),t.one("transitionend",function(){e.gotoCfi(o)})):t.removeClass("closed")},d=function(){var o=e.getCurrentLocationCfi();s.settings.sidebarReflow?(t.addClass("single"),t.one("transitionend",function(){e.gotoCfi(o)})):t.addClass("closed")},l=function(){n.show(),u()},c=function(){n.hide()},h=function(){o.addClass("show")},u=function(){o.removeClass("show")},f=!1,p=function(t){37==t.keyCode&&("rtl"===e.metadata.direction?e.nextPage():e.prevPage(),i.addClass("active"),f=!0,setTimeout(function(){f=!1,i.removeClass("active")},100),t.preventDefault()),39==t.keyCode&&("rtl"===e.metadata.direction?e.prevPage():e.nextPage(),r.addClass("active"),f=!0,setTimeout(function(){f=!1,r.removeClass("active")},100),t.preventDefault())};return document.addEventListener("keydown",p,!1),r.on("click",function(t){"rtl"===e.metadata.direction?e.prevPage():e.nextPage(),t.preventDefault()}),i.on("click",function(t){"rtl"===e.metadata.direction?e.nextPage():e.prevPage(),t.preventDefault()}),e.on("renderer:spreads",function(e){e?h():u()}),{slideOut:d,slideIn:a,showLoader:l,hideLoader:c,showDivider:h,hideDivider:u,arrowKeys:p}},EPUBJS.reader.SettingsController=function(){var e=(this.book,this),t=$("#settings-modal"),o=$(".overlay"),n=function(){t.addClass("md-show")},r=function(){t.removeClass("md-show")},i=$("#sidebarReflow");return i.on("click",function(){e.settings.sidebarReflow=!e.settings.sidebarReflow}),t.find(".closer").on("click",function(){r()}),o.on("click",function(){r()}),{show:n,hide:r}},EPUBJS.reader.SidebarController=function(e){var t=this,o=$("#sidebar"),n=$("#panels"),r="Toc",i=function(e){var o=e+"Controller";r!=e&&"undefined"!=typeof t[o]&&(t[r+"Controller"].hide(),t[o].show(),r=e,n.find(".active").removeClass("active"),n.find("#show-"+e).addClass("active"))},s=function(){return r},a=function(){t.sidebarOpen=!0,t.ReaderController.slideOut(),o.addClass("open")},d=function(){t.sidebarOpen=!1,t.ReaderController.slideIn(),o.removeClass("open")};return n.find(".show_view").on("click",function(e){var t=$(this).data("view");i(t),e.preventDefault()}),{show:a,hide:d,getActivePanel:s,changePanelTo:i}},EPUBJS.reader.TocController=function(e){var t=this.book,o=$("#tocView"),n=document.createDocumentFragment(),r=!1,i=function(e,t){var o=document.createElement("ul");return t||(t=1),e.forEach(function(e){var n=document.createElement("li"),r=document.createElement("a");toggle=document.createElement("a");var s;n.id="toc-"+e.id,n.classList.add("list_item"),r.textContent=e.label,r.href=e.href,r.classList.add("toc_link"),n.appendChild(r),e.subitems.length>0&&(t++,s=i(e.subitems,t),toggle.classList.add("toc_toggle"),n.insertBefore(toggle,r),n.appendChild(s)),o.appendChild(n)}),o},s=function(){o.show()},a=function(){o.hide()},d=function(e){var t=e.id,n=o.find("#toc-"+t),i=o.find(".currentChapter");o.find(".openChapter");n.length&&(n!=i&&n.has(r).length>0&&i.removeClass("currentChapter"),n.addClass("currentChapter"),n.parents("li").addClass("openChapter"))};t.on("renderer:chapterDisplayed",d);var l=i(e);return n.appendChild(l),o.append(n),o.find(".toc_link").on("click",function(e){var n=this.getAttribute("href");e.preventDefault(),t["goto"](n),o.find(".currentChapter").addClass("openChapter").removeClass("currentChapter"),$(this).parent("li").addClass("currentChapter")}),o.find(".toc_toggle").on("click",function(e){var t=$(this).parent("li"),o=t.hasClass("openChapter");e.preventDefault(),o?t.removeClass("openChapter"):t.addClass("openChapter")}),{show:s,hide:a}};
EPUBJS.reader={},EPUBJS.reader.plugins={},function(e){var t=(e.ePubReader||{},e.ePubReader=function(e,t){return new EPUBJS.Reader(e,t)});"function"==typeof define&&define.amd?define(function(){return Reader}):"undefined"!=typeof module&&module.exports&&(module.exports=t)}(window,jQuery),EPUBJS.Reader=function(e,t){var o,n,r,i=this,s=$("#viewer"),a=window.location.search;this.settings=EPUBJS.core.defaults(t||{},{bookPath:e,restore:!1,reload:!1,bookmarks:void 0,annotations:void 0,contained:void 0,bookKey:void 0,styles:void 0,sidebarReflow:!1,generatePagination:!1,history:!0}),a&&(r=a.slice(1).split("&"),r.forEach(function(e){var t=e.split("="),o=t[0],n=t[1]||"";i.settings[o]=decodeURIComponent(n)})),this.setBookKey(this.settings.bookPath),this.settings.restore&&this.isSaved()&&this.applySavedSettings(),this.settings.styles=this.settings.styles||{fontSize:"100%"},this.book=o=new EPUBJS.Book(this.settings),this.settings.previousLocationCfi&&o.gotoCfi(this.settings.previousLocationCfi),this.offline=!1,this.sidebarOpen=!1,this.settings.bookmarks||(this.settings.bookmarks=[]),this.settings.annotations||(this.settings.annotations=[]),this.settings.generatePagination&&o.generatePagination(s.width(),s.height()),o.renderTo("viewer"),i.ReaderController=EPUBJS.reader.ReaderController.call(i,o),i.SettingsController=EPUBJS.reader.SettingsController.call(i,o),i.ControlsController=EPUBJS.reader.ControlsController.call(i,o),i.SidebarController=EPUBJS.reader.SidebarController.call(i,o),i.BookmarksController=EPUBJS.reader.BookmarksController.call(i,o),i.NotesController=EPUBJS.reader.NotesController.call(i,o);for(n in EPUBJS.reader.plugins)EPUBJS.reader.plugins.hasOwnProperty(n)&&(i[n]=EPUBJS.reader.plugins[n].call(i,o));return o.ready.all.then(function(){i.ReaderController.hideLoader()}),o.getMetadata().then(function(e){i.MetaController=EPUBJS.reader.MetaController.call(i,e)}),o.getToc().then(function(e){i.TocController=EPUBJS.reader.TocController.call(i,e)}),window.addEventListener("beforeunload",this.unload.bind(this),!1),window.addEventListener("hashchange",this.hashChanged.bind(this),!1),document.addEventListener("keydown",this.adjustFontSize.bind(this),!1),o.on("renderer:keydown",this.adjustFontSize.bind(this)),o.on("renderer:keydown",i.ReaderController.arrowKeys.bind(this)),o.on("renderer:selected",this.selectedRange.bind(this)),this},EPUBJS.Reader.prototype.adjustFontSize=function(e){var t,o=2,n=187,r=189,i=48,s=e.ctrlKey||e.metaKey;this.settings.styles&&(this.settings.styles.fontSize||(this.settings.styles.fontSize="100%"),t=parseInt(this.settings.styles.fontSize.slice(0,-1)),s&&e.keyCode==n&&(e.preventDefault(),this.book.setStyle("fontSize",t+o+"%")),s&&e.keyCode==r&&(e.preventDefault(),this.book.setStyle("fontSize",t-o+"%")),s&&e.keyCode==i&&(e.preventDefault(),this.book.setStyle("fontSize","100%")))},EPUBJS.Reader.prototype.addBookmark=function(e){var t=this.isBookmarked(e);t>-1||(this.settings.bookmarks.push(e),this.trigger("reader:bookmarked",e))},EPUBJS.Reader.prototype.removeBookmark=function(e){var t=this.isBookmarked(e);-1!==t&&(this.settings.bookmarks.splice(t,1),this.trigger("reader:unbookmarked",t))},EPUBJS.Reader.prototype.isBookmarked=function(e){var t=this.settings.bookmarks;return t.indexOf(e)},EPUBJS.Reader.prototype.clearBookmarks=function(){this.settings.bookmarks=[]},EPUBJS.Reader.prototype.addNote=function(e){this.settings.annotations.push(e)},EPUBJS.Reader.prototype.removeNote=function(e){var t=this.settings.annotations.indexOf(e);-1!==t&&delete this.settings.annotations[t]},EPUBJS.Reader.prototype.clearNotes=function(){this.settings.annotations=[]},EPUBJS.Reader.prototype.setBookKey=function(e){return this.settings.bookKey||(this.settings.bookKey="epubjsreader:"+EPUBJS.VERSION+":"+window.location.host+":"+e),this.settings.bookKey},EPUBJS.Reader.prototype.isSaved=function(){var e;return localStorage?(e=localStorage.getItem(this.settings.bookKey),null===e?!1:!0):!1},EPUBJS.Reader.prototype.removeSavedSettings=function(){return localStorage?void localStorage.removeItem(this.settings.bookKey):!1},EPUBJS.Reader.prototype.applySavedSettings=function(){var e;if(!localStorage)return!1;try{e=JSON.parse(localStorage.getItem(this.settings.bookKey))}catch(t){return!1}return e?(e.styles&&(this.settings.styles=EPUBJS.core.defaults(this.settings.styles||{},e.styles)),this.settings=EPUBJS.core.defaults(this.settings,e),!0):!1},EPUBJS.Reader.prototype.saveSettings=function(){return this.book&&(this.settings.previousLocationCfi=this.book.getCurrentLocationCfi()),localStorage?void localStorage.setItem(this.settings.bookKey,JSON.stringify(this.settings)):!1},EPUBJS.Reader.prototype.unload=function(){this.settings.restore&&localStorage&&this.saveSettings()},EPUBJS.Reader.prototype.hashChanged=function(){var e=window.location.hash.slice(1);this.book["goto"](e)},EPUBJS.Reader.prototype.selectedRange=function(e){var t=new EPUBJS.EpubCFI,o=t.generateCfiFromRangeAnchor(e,this.book.renderer.currentChapter.cfiBase),n="#"+o;this.settings.history&&window.location.hash!=n&&(history.pushState({},"",n),this.currentLocationCfi=o)},RSVP.EventTarget.mixin(EPUBJS.Reader.prototype),EPUBJS.reader.BookmarksController=function(){var e=this.book,t=$("#bookmarksView"),o=t.find("#bookmarks"),n=document.createDocumentFragment(),r=function(){t.show()},i=function(){t.hide()},s=0,a=function(t){var o=document.createElement("li"),n=document.createElement("a");return o.id="bookmark-"+s,o.classList.add("list_item"),n.textContent=t,n.href=t,n.classList.add("bookmark_link"),n.addEventListener("click",function(t){var o=this.getAttribute("href");e.gotoCfi(o),t.preventDefault()},!1),o.appendChild(n),s++,o};return this.settings.bookmarks.forEach(function(e){var t=a(e);n.appendChild(t)}),o.append(n),this.on("reader:bookmarked",function(e){var t=a(e);o.append(t)}),this.on("reader:unbookmarked",function(e){var t=$("#bookmark-"+e);t.remove()}),{show:r,hide:i}},EPUBJS.reader.ControlsController=function(e){var t=this,o=($("#store"),$("#fullscreen")),n=($("#fullscreenicon"),$("#cancelfullscreenicon"),$("#slider")),r=($("#main"),$("#sidebar"),$("#setting")),i=$("#bookmark"),s=function(){t.offline=!1},a=function(){t.offline=!0},d=!1;return e.on("book:online",s),e.on("book:offline",a),n.on("click",function(){t.sidebarOpen?(t.SidebarController.hide(),n.addClass("icon-menu"),n.removeClass("icon-right")):(t.SidebarController.show(),n.addClass("icon-right"),n.removeClass("icon-menu"))}),"undefined"!=typeof screenfull&&(o.on("click",function(){screenfull.toggle($("#container")[0])}),screenfull.raw&&document.addEventListener(screenfull.raw.fullscreenchange,function(){d=screenfull.isFullscreen,d?o.addClass("icon-resize-small").removeClass("icon-resize-full"):o.addClass("icon-resize-full").removeClass("icon-resize-small")})),r.on("click",function(){t.SettingsController.show()}),i.on("click",function(){var e=t.book.getCurrentLocationCfi(),o=t.isBookmarked(e);-1===o?(t.addBookmark(e),i.addClass("icon-bookmark").removeClass("icon-bookmark-empty")):(t.removeBookmark(e),i.removeClass("icon-bookmark").addClass("icon-bookmark-empty"))}),e.on("renderer:locationChanged",function(e){var o="#"+e,n=t.isBookmarked(e);-1===n?i.removeClass("icon-bookmark").addClass("icon-bookmark-empty"):i.addClass("icon-bookmark").removeClass("icon-bookmark-empty"),t.currentLocationCfi=e,t.settings.history&&window.location.hash!=o&&history.pushState({},"",o)}),e.on("book:pageChanged",function(){}),{}},EPUBJS.reader.MetaController=function(e){var t=e.bookTitle,o=e.creator,n=$("#book-title"),r=$("#chapter-title"),i=$("#title-seperator");document.title=t+" – "+o,n.html(t),r.html(o),i.show()},EPUBJS.reader.NotesController=function(){var e=this.book,t=this,o=$("#notesView"),n=$("#notes"),r=$("#note-text"),i=$("#note-anchor"),s=t.settings.annotations,a=e.renderer,d=[],l=new EPUBJS.EpubCFI,c=function(){o.show()},h=function(){o.hide()},u=function(o){var n,s,a,d,c,h=e.renderer.doc;if(h.caretPositionFromPoint?(n=h.caretPositionFromPoint(o.clientX,o.clientY),s=n.offsetNode,a=n.offset):h.caretRangeFromPoint&&(n=h.caretRangeFromPoint(o.clientX,o.clientY),s=n.startContainer,a=n.startOffset),3!==s.nodeType)for(var g=0;g<s.childNodes.length;g++)if(3==s.childNodes[g].nodeType){s=s.childNodes[g];break}a=s.textContent.indexOf(".",a),-1===a?a=s.length:a+=1,d=l.generateCfiFromTextNode(s,a,e.renderer.currentChapter.cfiBase),c={annotatedAt:new Date,anchor:d,body:r.val()},t.addNote(c),f(c),p(c),r.val(""),i.text("Attach"),r.prop("disabled",!1),e.off("renderer:click",u)},f=function(t){var o=document.createElement("li"),r=document.createElement("a");o.innerHTML=t.body,r.innerHTML=" context &#187;",r.href="#"+t.anchor,r.onclick=function(){return e.gotoCfi(t.anchor),!1},o.appendChild(r),n.append(o)},p=function(t){var o=e.renderer.doc,n=document.createElement("span"),r=document.createElement("a");n.classList.add("footnotesuperscript","reader_generated"),n.style.verticalAlign="super",n.style.fontSize=".75em",n.style.lineHeight="1em",r.style.padding="2px",r.style.backgroundColor="#fffa96",r.style.borderRadius="5px",r.style.cursor="pointer",n.id="note-"+EPUBJS.core.uuid(),r.innerHTML=s.indexOf(t)+1+"[Reader]",n.appendChild(r),l.addMarker(t.anchor,o,n),g(n,t.body)},g=function(e,o){var n=e.id,r=function(){var t,r,c,h,u=a.height,f=a.width,p=225;d[n]||(d[n]=document.createElement("div"),d[n].setAttribute("class","popup"),pop_content=document.createElement("div"),d[n].appendChild(pop_content),pop_content.innerHTML=o,pop_content.setAttribute("class","pop_content"),a.render.document.body.appendChild(d[n]),d[n].addEventListener("mouseover",i,!1),d[n].addEventListener("mouseout",s,!1),a.on("renderer:locationChanged",l,this),a.on("renderer:locationChanged",s,this)),t=d[n],r=e.getBoundingClientRect(),c=r.left,h=r.top,t.classList.add("show"),popRect=t.getBoundingClientRect(),t.style.left=c-popRect.width/2+"px",t.style.top=h+"px",p>u/2.5&&(p=u/2.5,pop_content.style.maxHeight=p+"px"),popRect.height+h>=u-25?(t.style.top=h-popRect.height+"px",t.classList.add("above")):t.classList.remove("above"),c-popRect.width<=0?(t.style.left=c+"px",t.classList.add("left")):t.classList.remove("left"),c+popRect.width/2>=f?(t.style.left=c-300+"px",popRect=t.getBoundingClientRect(),t.style.left=c-popRect.width+"px",popRect.height+h>=u-25?(t.style.top=h-popRect.height+"px",t.classList.add("above")):t.classList.remove("above"),t.classList.add("right")):t.classList.remove("right")},i=function(){d[n].classList.add("on")},s=function(){d[n].classList.remove("on")},l=function(){setTimeout(function(){d[n].classList.remove("show")},100)},h=function(){t.ReaderController.slideOut(),c()};e.addEventListener("mouseover",r,!1),e.addEventListener("mouseout",l,!1),e.addEventListener("click",h,!1)};return i.on("click",function(){i.text("Cancel"),r.prop("disabled","true"),e.on("renderer:click",u)}),s.forEach(function(e){f(e)}),a.registerHook("beforeChapterDisplay",function(e,t){var o=t.currentChapter;s.forEach(function(e){var t=l.parse(e.anchor);if(t.spinePos===o.spinePos)try{p(e)}catch(n){console.log("anchoring failed",e.anchor)}}),e()},!0),{show:c,hide:h}},EPUBJS.reader.ReaderController=function(e){var t=$("#main"),o=$("#divider"),n=$("#loader"),r=$("#next"),i=$("#prev"),s=this,e=this.book,a=function(){var o=e.getCurrentLocationCfi();s.settings.sidebarReflow?(t.removeClass("single"),t.one("transitionend",function(){e.gotoCfi(o)})):t.removeClass("closed")},d=function(){var o=e.getCurrentLocationCfi();s.settings.sidebarReflow?(t.addClass("single"),t.one("transitionend",function(){e.gotoCfi(o)})):t.addClass("closed")},l=function(){n.show(),u()},c=function(){n.hide()},h=function(){o.addClass("show")},u=function(){o.removeClass("show")},f=!1,p=function(t){37==t.keyCode&&("rtl"===e.metadata.direction?e.nextPage():e.prevPage(),i.addClass("active"),f=!0,setTimeout(function(){f=!1,i.removeClass("active")},100),t.preventDefault()),39==t.keyCode&&("rtl"===e.metadata.direction?e.prevPage():e.nextPage(),r.addClass("active"),f=!0,setTimeout(function(){f=!1,r.removeClass("active")},100),t.preventDefault())};return document.addEventListener("keydown",p,!1),r.on("click",function(t){"rtl"===e.metadata.direction?e.prevPage():e.nextPage(),t.preventDefault()}),i.on("click",function(t){"rtl"===e.metadata.direction?e.nextPage():e.prevPage(),t.preventDefault()}),e.on("renderer:spreads",function(e){e?h():u()}),{slideOut:d,slideIn:a,showLoader:l,hideLoader:c,showDivider:h,hideDivider:u,arrowKeys:p}},EPUBJS.reader.SettingsController=function(){var e=(this.book,this),t=$("#settings-modal"),o=$(".overlay"),n=function(){t.addClass("md-show")},r=function(){t.removeClass("md-show")},i=$("#sidebarReflow");return i.on("click",function(){e.settings.sidebarReflow=!e.settings.sidebarReflow}),t.find(".closer").on("click",function(){r()}),o.on("click",function(){r()}),{show:n,hide:r}},EPUBJS.reader.SidebarController=function(){var e=this,t=$("#sidebar"),o=$("#panels"),n="Toc",r=function(t){var r=t+"Controller";n!=t&&"undefined"!=typeof e[r]&&(e[n+"Controller"].hide(),e[r].show(),n=t,o.find(".active").removeClass("active"),o.find("#show-"+t).addClass("active"))},i=function(){return n},s=function(){e.sidebarOpen=!0,e.ReaderController.slideOut(),t.addClass("open")},a=function(){e.sidebarOpen=!1,e.ReaderController.slideIn(),t.removeClass("open")};return o.find(".show_view").on("click",function(e){var t=$(this).data("view");r(t),e.preventDefault()}),{show:s,hide:a,getActivePanel:i,changePanelTo:r}},EPUBJS.reader.TocController=function(e){var t=this.book,o=$("#tocView"),n=document.createDocumentFragment(),r=!1,i=function(e,t){var o=document.createElement("ul");return t||(t=1),e.forEach(function(e){var n=document.createElement("li"),r=document.createElement("a");toggle=document.createElement("a");var s;n.id="toc-"+e.id,n.classList.add("list_item"),r.textContent=e.label,r.href=e.href,r.classList.add("toc_link"),n.appendChild(r),e.subitems.length>0&&(t++,s=i(e.subitems,t),toggle.classList.add("toc_toggle"),n.insertBefore(toggle,r),n.appendChild(s)),o.appendChild(n)}),o},s=function(){o.show()},a=function(){o.hide()},d=function(e){var t=e.id,n=o.find("#toc-"+t),i=o.find(".currentChapter");o.find(".openChapter"),n.length&&(n!=i&&n.has(r).length>0&&i.removeClass("currentChapter"),n.addClass("currentChapter"),n.parents("li").addClass("openChapter"))};t.on("renderer:chapterDisplayed",d);var l=i(e);return n.appendChild(l),o.append(n),o.find(".toc_link").on("click",function(e){var n=this.getAttribute("href");e.preventDefault(),t["goto"](n),o.find(".currentChapter").addClass("openChapter").removeClass("currentChapter"),$(this).parent("li").addClass("currentChapter")}),o.find(".toc_toggle").on("click",function(e){var t=$(this).parent("li"),o=t.hasClass("openChapter");e.preventDefault(),o?t.removeClass("openChapter"):t.addClass("openChapter")}),{show:s,hide:a}};
!function(){var e,n,t,r;!function(){var o={},i={};e=function(e,n,t){o[e]={deps:n,callback:t}},r=t=n=function(e){function t(n){if("."!==n.charAt(0))return n;for(var t=n.split("/"),r=e.split("/").slice(0,-1),o=0,i=t.length;i>o;o++){var a=t[o];if(".."===a)r.pop();else{if("."===a)continue;r.push(a)}}return r.join("/")}if(r._eak_seen=o,i[e])return i[e];if(i[e]={},!o[e])throw new Error("Could not find module "+e);for(var a,u=o[e],c=u.deps,s=u.callback,f=[],l=0,d=c.length;d>l;l++)"exports"===c[l]?f.push(a={}):f.push(n(t(c[l])));var v=s.apply(this,f);return i[e]=a||v}}(),e("promise/all",["./utils","exports"],function(e,n){"use strict";function t(e){var n=this;if(!r(e))throw new TypeError("You must pass an array to all.");return new n(function(n,t){function r(e){return function(n){i(e,n)}}function i(e,t){u[e]=t,0===--c&&n(u)}var a,u=[],c=e.length;0===c&&n([]);for(var s=0;s<e.length;s++)a=e[s],a&&o(a.then)?a.then(r(s),t):i(s,a)})}var r=e.isArray,o=e.isFunction;n.all=t}),e("promise/asap",["exports"],function(e){"use strict";function n(){return function(){process.nextTick(o)}}function t(){var e=0,n=new c(o),t=document.createTextNode("");return n.observe(t,{characterData:!0}),function(){t.data=e=++e%2}}function r(){return function(){s.setTimeout(o,1)}}function o(){for(var e=0;e<f.length;e++){var n=f[e],t=n[0],r=n[1];t(r)}f=[]}function i(e,n){var t=f.push([e,n]);1===t&&a()}var a,u="undefined"!=typeof window?window:{},c=u.MutationObserver||u.WebKitMutationObserver,s="undefined"!=typeof global?global:void 0===this?window:this,f=[];a="undefined"!=typeof process&&"[object process]"==={}.toString.call(process)?n():c?t():r(),e.asap=i}),e("promise/config",["exports"],function(e){"use strict";function n(e,n){return 2!==arguments.length?t[e]:void(t[e]=n)}var t={instrument:!1};e.config=t,e.configure=n}),e("promise/polyfill",["./promise","./utils","exports"],function(e,n,t){"use strict";function r(){var e;e="undefined"!=typeof global?global:"undefined"!=typeof window&&window.document?window:self;var n="Promise"in e&&"resolve"in e.Promise&&"reject"in e.Promise&&"all"in e.Promise&&"race"in e.Promise&&function(){var n;return new e.Promise(function(e){n=e}),i(n)}();n||(e.Promise=o)}var o=e.Promise,i=n.isFunction;t.polyfill=r}),e("promise/promise",["./config","./utils","./all","./race","./resolve","./reject","./asap","exports"],function(e,n,t,r,o,i,a,u){"use strict";function c(e){if(!_(e))throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");if(!(this instanceof c))throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");this._subscribers=[],s(e,this)}function s(e,n){function t(e){h(n,e)}function r(e){y(n,e)}try{e(t,r)}catch(o){r(o)}}function f(e,n,t,r){var o,i,a,u,c=_(t);if(c)try{o=t(r),a=!0}catch(s){u=!0,i=s}else o=r,a=!0;v(n,o)||(c&&a?h(n,o):u?y(n,i):e===N?h(n,o):e===k&&y(n,o))}function l(e,n,t,r){var o=e._subscribers,i=o.length;o[i]=n,o[i+N]=t,o[i+k]=r}function d(e,n){for(var t,r,o=e._subscribers,i=e._detail,a=0;a<o.length;a+=3)t=o[a],r=o[a+n],f(n,t,r,i);e._subscribers=null}function v(e,n){var t,r=null;try{if(e===n)throw new TypeError("A promises callback cannot return that same promise.");if(w(n)&&(r=n.then,_(r)))return r.call(n,function(r){return t?!0:(t=!0,void(n!==r?h(e,r):p(e,r)))},function(n){return t?!0:(t=!0,void y(e,n))}),!0}catch(o){return t?!0:(y(e,o),!0)}return!1}function h(e,n){e===n?p(e,n):v(e,n)||p(e,n)}function p(e,n){e._state===A&&(e._state=D,e._detail=n,m.async(g,e))}function y(e,n){e._state===A&&(e._state=D,e._detail=n,m.async(b,e))}function g(e){d(e,e._state=N)}function b(e){d(e,e._state=k)}var m=e.config,w=(e.configure,n.objectOrFunction),_=n.isFunction,E=(n.now,t.all),S=r.race,I=o.resolve,O=i.reject,x=a.asap;m.async=x;var A=void 0,D=0,N=1,k=2;c.prototype={constructor:c,_state:void 0,_detail:void 0,_subscribers:void 0,then:function(e,n){var t=this,r=new this.constructor(function(){});if(this._state){var o=arguments;m.async(function(){f(t._state,r,o[t._state-1],t._detail)})}else l(this,r,e,n);return r},"catch":function(e){return this.then(null,e)}},c.all=E,c.race=S,c.resolve=I,c.reject=O,u.Promise=c}),e("promise/race",["./utils","exports"],function(e,n){"use strict";function t(e){var n=this;if(!r(e))throw new TypeError("You must pass an array to race.");return new n(function(n,t){for(var r,o=0;o<e.length;o++)r=e[o],r&&"function"==typeof r.then?r.then(n,t):n(r)})}var r=e.isArray;n.race=t}),e("promise/reject",["exports"],function(e){"use strict";function n(e){var n=this;return new n(function(n,t){t(e)})}e.reject=n}),e("promise/resolve",["exports"],function(e){"use strict";function n(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var n=this;return new n(function(n){n(e)})}e.resolve=n}),e("promise/utils",["exports"],function(e){"use strict";function n(e){return t(e)||"object"==typeof e&&null!==e}function t(e){return"function"==typeof e}function r(e){return"[object Array]"===Object.prototype.toString.call(e)}var o=Date.now||function(){return(new Date).getTime()};e.objectOrFunction=n,e.isFunction=t,e.isArray=r,e.now=o}),n("promise/polyfill").polyfill()}(),function(){"use strict";function e(e,n){e=e||[],n=n||{};try{return new Blob(e,n)}catch(t){if("TypeError"!==t.name)throw t;for(var r=E.BlobBuilder||E.MSBlobBuilder||E.MozBlobBuilder||E.WebKitBlobBuilder,o=new r,i=0;i<e.length;i+=1)o.append(e[i]);return o.getBlob(n.type)}}function n(e,n){var t="";if(e&&(t=e.toString()),e&&("[object ArrayBuffer]"===e.toString()||e.buffer&&"[object ArrayBuffer]"===e.buffer.toString())){var r,i=c;e instanceof ArrayBuffer?(r=e,i+=f):(r=e.buffer,"[object Int8Array]"===t?i+=d:"[object Uint8Array]"===t?i+=v:"[object Uint8ClampedArray]"===t?i+=h:"[object Int16Array]"===t?i+=p:"[object Uint16Array]"===t?i+=g:"[object Int32Array]"===t?i+=y:"[object Uint32Array]"===t?i+=b:"[object Float32Array]"===t?i+=m:"[object Float64Array]"===t?i+=w:n(new Error("Failed to get type for BinaryArray"))),n(i+o(r))}else if("[object Blob]"===t){var u=new FileReader;u.onload=function(){var t=a+e.type+"~"+o(this.result);n(c+l+t)},u.readAsArrayBuffer(e)}else try{n(JSON.stringify(e))}catch(s){console.error("Couldn't convert value into a JSON string: ",e),n(null,s)}}function t(n){if(n.substring(0,s)!==c)return JSON.parse(n);var t,o=n.substring(_),i=n.substring(s,_);if(i===l&&u.test(o)){var a=o.match(u);t=a[1],o=o.substring(a[0].length)}var E=r(o);switch(i){case f:return E;case l:return e([E],{type:t});case d:return new Int8Array(E);case v:return new Uint8Array(E);case h:return new Uint8ClampedArray(E);case p:return new Int16Array(E);case g:return new Uint16Array(E);case y:return new Int32Array(E);case b:return new Uint32Array(E);case m:return new Float32Array(E);case w:return new Float64Array(E);default:throw new Error("Unkown type: "+i)}}function r(e){var n,t,r,o,a,u=.75*e.length,c=e.length,s=0;"="===e[e.length-1]&&(u--,"="===e[e.length-2]&&u--);var f=new ArrayBuffer(u),l=new Uint8Array(f);for(n=0;c>n;n+=4)t=i.indexOf(e[n]),r=i.indexOf(e[n+1]),o=i.indexOf(e[n+2]),a=i.indexOf(e[n+3]),l[s++]=t<<2|r>>4,l[s++]=(15&r)<<4|o>>2,l[s++]=(3&o)<<6|63&a;return f}function o(e){var n,t=new Uint8Array(e),r="";for(n=0;n<t.length;n+=3)r+=i[t[n]>>2],r+=i[(3&t[n])<<4|t[n+1]>>4],r+=i[(15&t[n+1])<<2|t[n+2]>>6],r+=i[63&t[n+2]];return t.length%3===2?r=r.substring(0,r.length-1)+"=":t.length%3===1&&(r=r.substring(0,r.length-2)+"=="),r}var i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a="~~local_forage_type~",u=/^~~local_forage_type~([^~]+)~/,c="__lfsc__:",s=c.length,f="arbf",l="blob",d="si08",v="ui08",h="uic8",p="si16",y="si32",g="ur16",b="ui32",m="fl32",w="fl64",_=s+f.length,E=this,S={serialize:n,deserialize:t,stringToBuffer:r,bufferToString:o};"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require?module.exports=S:"function"==typeof define&&define.amd?define("localforageSerializer",function(){return S}):this.localforageSerializer=S}.call(window),function(){"use strict";function e(e,n){e=e||[],n=n||{};try{return new Blob(e,n)}catch(t){if("TypeError"!==t.name)throw t;for(var r=window.BlobBuilder||window.MSBlobBuilder||window.MozBlobBuilder||window.WebKitBlobBuilder,o=new r,i=0;i<e.length;i+=1)o.append(e[i]);return o.getBlob(n.type)}}function n(e){for(var n=e.length,t=new ArrayBuffer(n),r=new Uint8Array(t),o=0;n>o;o++)r[o]=e.charCodeAt(o);return t}function t(e){return new b(function(n,t){var r=new XMLHttpRequest;r.open("GET",e),r.withCredentials=!0,r.responseType="arraybuffer",r.onreadystatechange=function(){return 4===r.readyState?200===r.status?n({response:r.response,type:r.getResponseHeader("Content-Type")}):void t({status:r.status,response:r.response}):void 0},r.send()})}function r(n){return new b(function(r,o){var i=e([""],{type:"image/png"}),a=n.transaction([_],"readwrite");a.objectStore(_).put(i,"key"),a.oncomplete=function(){var e=n.transaction([_],"readwrite"),i=e.objectStore(_).get("key");i.onerror=o,i.onsuccess=function(e){var n=e.target.result,o=URL.createObjectURL(n);t(o).then(function(e){r(!(!e||"image/png"!==e.type))},function(){r(!1)}).then(function(){URL.revokeObjectURL(o)})}}})["catch"](function(){return!1})}function o(e){return"boolean"==typeof w?b.resolve(w):r(e).then(function(e){return w=e})}function i(e){return new b(function(n,t){var r=new FileReader;r.onerror=t,r.onloadend=function(t){var r=btoa(t.target.result||"");n({__local_forage_encoded_blob:!0,data:r,type:e.type})},r.readAsBinaryString(e)})}function a(t){var r=n(atob(t.data));return e([r],{type:t.type})}function u(e){return e&&e.__local_forage_encoded_blob}function c(e){var n=this,t={db:null};if(e)for(var r in e)t[r]=e[r];return new b(function(e,r){var o=m.open(t.name,t.version);o.onerror=function(){r(o.error)},o.onupgradeneeded=function(e){o.result.createObjectStore(t.storeName),e.oldVersion<=1&&o.result.createObjectStore(_)},o.onsuccess=function(){t.db=o.result,n._dbInfo=t,e()}})}function s(e,n){var t=this;"string"!=typeof e&&(window.console.warn(e+" used as a key, but it is not a string."),e=String(e));var r=new b(function(n,r){t.ready().then(function(){var o=t._dbInfo,i=o.db.transaction(o.storeName,"readonly").objectStore(o.storeName),c=i.get(e);c.onsuccess=function(){var e=c.result;void 0===e&&(e=null),u(e)&&(e=a(e)),n(e)},c.onerror=function(){r(c.error)}})["catch"](r)});return g(r,n),r}function f(e,n){var t=this,r=new b(function(n,r){t.ready().then(function(){var o=t._dbInfo,i=o.db.transaction(o.storeName,"readonly").objectStore(o.storeName),c=i.openCursor(),s=1;c.onsuccess=function(){var t=c.result;if(t){var r=t.value;u(r)&&(r=a(r));var o=e(r,t.key,s++);void 0!==o?n(o):t["continue"]()}else n()},c.onerror=function(){r(c.error)}})["catch"](r)});return g(r,n),r}function l(e,n,t){var r=this;"string"!=typeof e&&(window.console.warn(e+" used as a key, but it is not a string."),e=String(e));var a=new b(function(t,a){var u;r.ready().then(function(){return u=r._dbInfo,o(u.db)}).then(function(e){return!e&&n instanceof Blob?i(n):n}).then(function(n){var r=u.db.transaction(u.storeName,"readwrite"),o=r.objectStore(u.storeName);null===n&&(n=void 0);var i=o.put(n,e);r.oncomplete=function(){void 0===n&&(n=null),t(n)},r.onabort=r.onerror=function(){var e=i.error?i.error:i.transaction.error;a(e)}})["catch"](a)});return g(a,t),a}function d(e,n){var t=this;"string"!=typeof e&&(window.console.warn(e+" used as a key, but it is not a string."),e=String(e));var r=new b(function(n,r){t.ready().then(function(){var o=t._dbInfo,i=o.db.transaction(o.storeName,"readwrite"),a=i.objectStore(o.storeName),u=a["delete"](e);i.oncomplete=function(){n()},i.onerror=function(){r(u.error)},i.onabort=function(){var e=u.error?u.error:u.transaction.error;r(e)}})["catch"](r)});return g(r,n),r}function v(e){var n=this,t=new b(function(e,t){n.ready().then(function(){var r=n._dbInfo,o=r.db.transaction(r.storeName,"readwrite"),i=o.objectStore(r.storeName),a=i.clear();o.oncomplete=function(){e()},o.onabort=o.onerror=function(){var e=a.error?a.error:a.transaction.error;t(e)}})["catch"](t)});return g(t,e),t}function h(e){var n=this,t=new b(function(e,t){n.ready().then(function(){var r=n._dbInfo,o=r.db.transaction(r.storeName,"readonly").objectStore(r.storeName),i=o.count();i.onsuccess=function(){e(i.result)},i.onerror=function(){t(i.error)}})["catch"](t)});return g(t,e),t}function p(e,n){var t=this,r=new b(function(n,r){return 0>e?void n(null):void t.ready().then(function(){var o=t._dbInfo,i=o.db.transaction(o.storeName,"readonly").objectStore(o.storeName),a=!1,u=i.openCursor();u.onsuccess=function(){var t=u.result;return t?void(0===e?n(t.key):a?n(t.key):(a=!0,t.advance(e))):void n(null)},u.onerror=function(){r(u.error)}})["catch"](r)});return g(r,n),r}function y(e){var n=this,t=new b(function(e,t){n.ready().then(function(){var r=n._dbInfo,o=r.db.transaction(r.storeName,"readonly").objectStore(r.storeName),i=o.openCursor(),a=[];i.onsuccess=function(){var n=i.result;return n?(a.push(n.key),void n["continue"]()):void e(a)},i.onerror=function(){t(i.error)}})["catch"](t)});return g(t,e),t}function g(e,n){n&&e.then(function(e){n(null,e)},function(e){n(e)})}var b="undefined"!=typeof module&&module.exports&&"undefined"!=typeof require?require("promise"):this.Promise,m=m||this.indexedDB||this.webkitIndexedDB||this.mozIndexedDB||this.OIndexedDB||this.msIndexedDB;if(m){var w,_="local-forage-detect-blob-support",E={_driver:"asyncStorage",_initStorage:c,iterate:f,getItem:s,setItem:l,removeItem:d,clear:v,length:h,key:p,keys:y};"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require?module.exports=E:"function"==typeof define&&define.amd?define("asyncStorage",function(){return E}):this.asyncStorage=E}}.call(window),function(){"use strict";function e(e){var n=this,t={};if(e)for(var r in e)t[r]=e[r];t.keyPrefix=t.name+"/",n._dbInfo=t;var o=new f(function(e){y===p.DEFINE?require(["localforageSerializer"],e):e(y===p.EXPORT?require("./../utils/serializer"):l.localforageSerializer)});return o.then(function(e){return d=e,f.resolve()})}function n(e){var n=this,t=n.ready().then(function(){for(var e=n._dbInfo.keyPrefix,t=v.length-1;t>=0;t--){var r=v.key(t);0===r.indexOf(e)&&v.removeItem(r)}});return s(t,e),t}function t(e,n){var t=this;"string"!=typeof e&&(window.console.warn(e+" used as a key, but it is not a string."),e=String(e));var r=t.ready().then(function(){var n=t._dbInfo,r=v.getItem(n.keyPrefix+e);return r&&(r=d.deserialize(r)),r});return s(r,n),r}function r(e,n){var t=this,r=t.ready().then(function(){for(var n=t._dbInfo.keyPrefix,r=n.length,o=v.length,i=1,a=0;o>a;a++){var u=v.key(a);if(0===u.indexOf(n)){var c=v.getItem(u);if(c&&(c=d.deserialize(c)),c=e(c,u.substring(r),i++),void 0!==c)return c}}});return s(r,n),r}function o(e,n){var t=this,r=t.ready().then(function(){var n,r=t._dbInfo;try{n=v.key(e)}catch(o){n=null}return n&&(n=n.substring(r.keyPrefix.length)),n});return s(r,n),r}function i(e){var n=this,t=n.ready().then(function(){for(var e=n._dbInfo,t=v.length,r=[],o=0;t>o;o++)0===v.key(o).indexOf(e.keyPrefix)&&r.push(v.key(o).substring(e.keyPrefix.length));return r});return s(t,e),t}function a(e){var n=this,t=n.keys().then(function(e){return e.length});return s(t,e),t}function u(e,n){var t=this;"string"!=typeof e&&(window.console.warn(e+" used as a key, but it is not a string."),e=String(e));var r=t.ready().then(function(){var n=t._dbInfo;v.removeItem(n.keyPrefix+e)});return s(r,n),r}function c(e,n,t){var r=this;"string"!=typeof e&&(window.console.warn(e+" used as a key, but it is not a string."),e=String(e));var o=r.ready().then(function(){void 0===n&&(n=null);var t=n;return new f(function(o,i){d.serialize(n,function(n,a){if(a)i(a);else try{var u=r._dbInfo;v.setItem(u.keyPrefix+e,n),o(t)}catch(c){("QuotaExceededError"===c.name||"NS_ERROR_DOM_QUOTA_REACHED"===c.name)&&i(c),i(c)}})})});return s(o,t),o}function s(e,n){n&&e.then(function(e){n(null,e)},function(e){n(e)})}var f="undefined"!=typeof module&&module.exports&&"undefined"!=typeof require?require("promise"):this.Promise,l=this,d=null,v=null;try{if(!(this.localStorage&&"setItem"in this.localStorage))return;v=this.localStorage}catch(h){return}var p={DEFINE:1,EXPORT:2,WINDOW:3},y=p.WINDOW;"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require?y=p.EXPORT:"function"==typeof define&&define.amd&&(y=p.DEFINE);var g={_driver:"localStorageWrapper",_initStorage:e,iterate:r,getItem:t,setItem:c,removeItem:u,clear:n,length:a,key:o,keys:i};y===p.EXPORT?module.exports=g:y===p.DEFINE?define("localStorageWrapper",function(){return g}):this.localStorageWrapper=g}.call(window),function(){"use strict";function e(e){var n=this,t={db:null};if(e)for(var r in e)t[r]="string"!=typeof e[r]?e[r].toString():e[r];var o=new f(function(e){p===h.DEFINE?require(["localforageSerializer"],e):e(p===h.EXPORT?require("./../utils/serializer"):l.localforageSerializer)}),i=new f(function(r,o){try{t.db=v(t.name,String(t.version),t.description,t.size)}catch(i){return n.setDriver(n.LOCALSTORAGE).then(function(){return n._initStorage(e)}).then(r)["catch"](o)}t.db.transaction(function(e){e.executeSql("CREATE TABLE IF NOT EXISTS "+t.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],function(){n._dbInfo=t,r()},function(e,n){o(n)})})});return o.then(function(e){return d=e,i})}function n(e,n){var t=this;"string"!=typeof e&&(window.console.warn(e+" used as a key, but it is not a string."),e=String(e));var r=new f(function(n,r){t.ready().then(function(){var o=t._dbInfo;o.db.transaction(function(t){t.executeSql("SELECT * FROM "+o.storeName+" WHERE key = ? LIMIT 1",[e],function(e,t){var r=t.rows.length?t.rows.item(0).value:null;r&&(r=d.deserialize(r)),n(r)},function(e,n){r(n)})})})["catch"](r)});return s(r,n),r}function t(e,n){var t=this,r=new f(function(n,r){t.ready().then(function(){var o=t._dbInfo;o.db.transaction(function(t){t.executeSql("SELECT * FROM "+o.storeName,[],function(t,r){for(var o=r.rows,i=o.length,a=0;i>a;a++){var u=o.item(a),c=u.value;if(c&&(c=d.deserialize(c)),c=e(c,u.key,a+1),void 0!==c)return void n(c)}n()},function(e,n){r(n)})})})["catch"](r)});return s(r,n),r}function r(e,n,t){var r=this;"string"!=typeof e&&(window.console.warn(e+" used as a key, but it is not a string."),e=String(e));var o=new f(function(t,o){r.ready().then(function(){void 0===n&&(n=null);var i=n;d.serialize(n,function(n,a){if(a)o(a);else{var u=r._dbInfo;u.db.transaction(function(r){r.executeSql("INSERT OR REPLACE INTO "+u.storeName+" (key, value) VALUES (?, ?)",[e,n],function(){t(i)},function(e,n){o(n)})},function(e){e.code===e.QUOTA_ERR&&o(e)})}})})["catch"](o)});return s(o,t),o}function o(e,n){var t=this;"string"!=typeof e&&(window.console.warn(e+" used as a key, but it is not a string."),e=String(e));var r=new f(function(n,r){t.ready().then(function(){var o=t._dbInfo;o.db.transaction(function(t){t.executeSql("DELETE FROM "+o.storeName+" WHERE key = ?",[e],function(){n()},function(e,n){r(n)})})})["catch"](r)});return s(r,n),r}function i(e){var n=this,t=new f(function(e,t){n.ready().then(function(){var r=n._dbInfo;r.db.transaction(function(n){n.executeSql("DELETE FROM "+r.storeName,[],function(){e()},function(e,n){t(n)})})})["catch"](t)});return s(t,e),t}function a(e){var n=this,t=new f(function(e,t){n.ready().then(function(){var r=n._dbInfo;r.db.transaction(function(n){n.executeSql("SELECT COUNT(key) as c FROM "+r.storeName,[],function(n,t){var r=t.rows.item(0).c;e(r)},function(e,n){t(n)})})})["catch"](t)});return s(t,e),t}function u(e,n){var t=this,r=new f(function(n,r){t.ready().then(function(){var o=t._dbInfo;o.db.transaction(function(t){t.executeSql("SELECT key FROM "+o.storeName+" WHERE id = ? LIMIT 1",[e+1],function(e,t){var r=t.rows.length?t.rows.item(0).key:null;n(r)},function(e,n){r(n)})})})["catch"](r)});return s(r,n),r}function c(e){var n=this,t=new f(function(e,t){n.ready().then(function(){var r=n._dbInfo;r.db.transaction(function(n){n.executeSql("SELECT key FROM "+r.storeName,[],function(n,t){for(var r=[],o=0;o<t.rows.length;o++)r.push(t.rows.item(o).key);e(r)},function(e,n){t(n)})})})["catch"](t)});return s(t,e),t}function s(e,n){n&&e.then(function(e){n(null,e)},function(e){n(e)})}var f="undefined"!=typeof module&&module.exports&&"undefined"!=typeof require?require("promise"):this.Promise,l=this,d=null,v=this.openDatabase;if(v){var h={DEFINE:1,EXPORT:2,WINDOW:3},p=h.WINDOW;"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require?p=h.EXPORT:"function"==typeof define&&define.amd&&(p=h.DEFINE);var y={_driver:"webSQLStorage",_initStorage:e,iterate:t,getItem:n,setItem:r,removeItem:o,clear:i,length:a,key:u,keys:c};p===h.DEFINE?define("webSQLStorage",function(){return y}):p===h.EXPORT?module.exports=y:this.webSQLStorage=y}}.call(window),function(){"use strict";function e(e,n){e[n]=function(){var t=arguments;return e.ready().then(function(){return e[n].apply(e,t)})}}function n(){for(var e=1;e<arguments.length;e++){var n=arguments[e];if(n)for(var t in n)n.hasOwnProperty(t)&&(v(n[t])?arguments[0][t]=n[t].slice():arguments[0][t]=n[t])}return arguments[0]}function t(e){for(var n in a)if(a.hasOwnProperty(n)&&a[n]===e)return!0;return!1}function r(t){this._config=n({},f,t),this._driverSet=null,this._ready=!1,this._dbInfo=null;for(var r=0;r<c.length;r++)e(this,c[r]);this.setDriver(this._config.driver)}var o="undefined"!=typeof module&&module.exports&&"undefined"!=typeof require?require("promise"):this.Promise,i={},a={INDEXEDDB:"asyncStorage",LOCALSTORAGE:"localStorageWrapper",WEBSQL:"webSQLStorage"},u=[a.INDEXEDDB,a.WEBSQL,a.LOCALSTORAGE],c=["clear","getItem","iterate","key","keys","length","removeItem","setItem"],s={DEFINE:1,EXPORT:2,WINDOW:3},f={description:"",driver:u.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1},l=s.WINDOW;"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require?l=s.EXPORT:"function"==typeof define&&define.amd&&(l=s.DEFINE);var d=function(e){var n=n||e.indexedDB||e.webkitIndexedDB||e.mozIndexedDB||e.OIndexedDB||e.msIndexedDB,t={};return t[a.WEBSQL]=!!e.openDatabase,t[a.INDEXEDDB]=!!function(){if("undefined"!=typeof e.openDatabase&&e.navigator&&e.navigator.userAgent&&/Safari/.test(e.navigator.userAgent)&&!/Chrome/.test(e.navigator.userAgent))return!1;try{return n&&"function"==typeof n.open&&"undefined"!=typeof e.IDBKeyRange}catch(t){return!1}}(),t[a.LOCALSTORAGE]=!!function(){try{return e.localStorage&&"setItem"in e.localStorage&&e.localStorage.setItem}catch(n){return!1}}(),t}(this),v=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},h=this;r.prototype.INDEXEDDB=a.INDEXEDDB,r.prototype.LOCALSTORAGE=a.LOCALSTORAGE,r.prototype.WEBSQL=a.WEBSQL,r.prototype.config=function(e){if("object"==typeof e){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var n in e)"storeName"===n&&(e[n]=e[n].replace(/\W/g,"_")),this._config[n]=e[n];return"driver"in e&&e.driver&&this.setDriver(this._config.driver),!0}return"string"==typeof e?this._config[e]:this._config},r.prototype.defineDriver=function(e,n,r){var a=new o(function(n,r){try{var a=e._driver,u=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver"),s=new Error("Custom driver name already in use: "+e._driver);if(!e._driver)return void r(u);if(t(e._driver))return void r(s);for(var f=c.concat("_initStorage"),l=0;l<f.length;l++){var v=f[l];if(!v||!e[v]||"function"!=typeof e[v])return void r(u)}var h=o.resolve(!0);"_support"in e&&(h=e._support&&"function"==typeof e._support?e._support():o.resolve(!!e._support)),h.then(function(t){d[a]=t,i[a]=e,n()},r)}catch(p){r(p)}});return a.then(n,r),a},r.prototype.driver=function(){return this._driver||null},r.prototype.ready=function(e){var n=this,t=new o(function(e,t){n._driverSet.then(function(){null===n._ready&&(n._ready=n._initStorage(n._config)),n._ready.then(e,t)})["catch"](t)});return t.then(e,e),t},r.prototype.setDriver=function(e,n,r){function a(){u._config.driver=u.driver()}var u=this;return"string"==typeof e&&(e=[e]),this._driverSet=new o(function(n,r){var a=u._getFirstSupportedDriver(e),c=new Error("No available storage method found.");if(!a)return u._driverSet=o.reject(c),void r(c);if(u._dbInfo=null,u._ready=null,t(a)){var f=new o(function(e){if(l===s.DEFINE)require([a],e);else if(l===s.EXPORT)switch(a){case u.INDEXEDDB:e(require("./drivers/indexeddb"));break;case u.LOCALSTORAGE:e(require("./drivers/localstorage"));break;case u.WEBSQL:e(require("./drivers/websql"))}else e(h[a])});f.then(function(e){u._extend(e),n()})}else i[a]?(u._extend(i[a]),n()):(u._driverSet=o.reject(c),r(c))}),this._driverSet.then(a,a),this._driverSet.then(n,r),this._driverSet},r.prototype.supports=function(e){return!!d[e]},r.prototype._extend=function(e){n(this,e)},r.prototype._getFirstSupportedDriver=function(e){if(e&&v(e))for(var n=0;n<e.length;n++){var t=e[n];if(this.supports(t))return t}return null},r.prototype.createInstance=function(e){return new r(e)};var p=new r;l===s.DEFINE?define("localforage",function(){return p}):l===s.EXPORT?module.exports=p:this.localforage=p}.call(window);
!function(e,n){"use strict";var l="undefined"!=typeof Element&&"ALLOW_KEYBOARD_INPUT"in Element,r=function(){for(var e,l,r=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenchange","MSFullscreenerror"]],t=0,u=r.length,c={};u>t;t++)if(e=r[t],e&&e[1]in n){for(t=0,l=e.length;l>t;t++)c[r[0][t]]=e[t];return c}return!1}(),t={request:function(e){var t=r.requestFullscreen;e=e||n.documentElement,/5\.1[\.\d]* Safari/.test(navigator.userAgent)?e[t]():e[t](l&&Element.ALLOW_KEYBOARD_INPUT)},exit:function(){n[r.exitFullscreen]()},toggle:function(e){this.isFullscreen?this.exit():this.request(e)},onchange:function(){},onerror:function(){},raw:r};return r?(Object.defineProperties(t,{isFullscreen:{get:function(){return!!n[r.fullscreenElement]}},element:{enumerable:!0,get:function(){return n[r.fullscreenElement]}},enabled:{enumerable:!0,get:function(){return!!n[r.fullscreenEnabled]}}}),n.addEventListener(r.fullscreenchange,function(e){t.onchange.call(t,e)}),n.addEventListener(r.fullscreenerror,function(e){t.onerror.call(t,e)}),void(e.screenfull=t)):void(e.screenfull=!1)}(window,document);
!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;"undefined"!=typeof window?e=window:"undefined"!=typeof global?e=global:"undefined"!=typeof self&&(e=self),e.JSZip=t()}}(function(){return function t(e,r,n){function i(s,o){if(!r[s]){if(!e[s]){var d="function"==typeof require&&require;if(!o&&d)return d(s,!0);if(a)return a(s,!0);throw new Error("Cannot find module '"+s+"'")}var h=r[s]={exports:{}};e[s][0].call(h.exports,function(t){var r=e[s][1][t];return i(r?r:t)},h,h.exports,t,e,r,n)}return r[s].exports}for(var a="function"==typeof require&&require,s=0;s<n.length;s++)i(n[s]);return i}({1:[function(t,e,r){"use strict";var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(t){for(var e,r,i,a,s,o,d,h="",l=0;l<t.length;)e=t.charCodeAt(l++),r=t.charCodeAt(l++),i=t.charCodeAt(l++),a=e>>2,s=(3&e)<<4|r>>4,o=(15&r)<<2|i>>6,d=63&i,isNaN(r)?o=d=64:isNaN(i)&&(d=64),h=h+n.charAt(a)+n.charAt(s)+n.charAt(o)+n.charAt(d);return h},r.decode=function(t){var e,r,i,a,s,o,d,h="",l=0;for(t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"");l<t.length;)a=n.indexOf(t.charAt(l++)),s=n.indexOf(t.charAt(l++)),o=n.indexOf(t.charAt(l++)),d=n.indexOf(t.charAt(l++)),e=a<<2|s>>4,r=(15&s)<<4|o>>2,i=(3&o)<<6|d,h+=String.fromCharCode(e),64!=o&&(h+=String.fromCharCode(r)),64!=d&&(h+=String.fromCharCode(i));return h}},{}],2:[function(t,e){"use strict";function r(){this.compressedSize=0,this.uncompressedSize=0,this.crc32=0,this.compressionMethod=null,this.compressedContent=null}r.prototype={getContent:function(){return null},getCompressedContent:function(){return null}},e.exports=r},{}],3:[function(t,e,r){"use strict";r.STORE={magic:"\x00\x00",compress:function(t){return t},uncompress:function(t){return t},compressInputType:null,uncompressInputType:null},r.DEFLATE=t("./flate")},{"./flate":8}],4:[function(t,e){"use strict";var r=t("./utils"),n=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];e.exports=function(t,e){if("undefined"==typeof t||!t.length)return 0;var i="string"!==r.getTypeOf(t);"undefined"==typeof e&&(e=0);var a=0,s=0,o=0;e=-1^e;for(var d=0,h=t.length;h>d;d++)o=i?t[d]:t.charCodeAt(d),s=255&(e^o),a=n[s],e=e>>>8^a;return-1^e}},{"./utils":21}],5:[function(t,e){"use strict";function r(){this.data=null,this.length=0,this.index=0}var n=t("./utils");r.prototype={checkOffset:function(t){this.checkIndex(this.index+t)},checkIndex:function(t){if(this.length<t||0>t)throw new Error("End of data reached (data length = "+this.length+", asked index = "+t+"). Corrupted zip ?")},setIndex:function(t){this.checkIndex(t),this.index=t},skip:function(t){this.setIndex(this.index+t)},byteAt:function(){},readInt:function(t){var e,r=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)r=(r<<8)+this.byteAt(e);return this.index+=t,r},readString:function(t){return n.transformTo("string",this.readData(t))},readData:function(){},lastIndexOfSignature:function(){},readDate:function(){var t=this.readInt(4);return new Date((t>>25&127)+1980,(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1)}},e.exports=r},{"./utils":21}],6:[function(t,e,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!1,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],7:[function(t,e,r){"use strict";var n=t("./utils");r.string2binary=function(t){return n.string2binary(t)},r.string2Uint8Array=function(t){return n.transformTo("uint8array",t)},r.uint8Array2String=function(t){return n.transformTo("string",t)},r.string2Blob=function(t){var e=n.transformTo("arraybuffer",t);return n.arrayBuffer2Blob(e)},r.arrayBuffer2Blob=function(t){return n.arrayBuffer2Blob(t)},r.transformTo=function(t,e){return n.transformTo(t,e)},r.getTypeOf=function(t){return n.getTypeOf(t)},r.checkSupport=function(t){return n.checkSupport(t)},r.MAX_VALUE_16BITS=n.MAX_VALUE_16BITS,r.MAX_VALUE_32BITS=n.MAX_VALUE_32BITS,r.pretty=function(t){return n.pretty(t)},r.findCompression=function(t){return n.findCompression(t)},r.isRegExp=function(t){return n.isRegExp(t)}},{"./utils":21}],8:[function(t,e,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=t("pako");r.uncompressInputType=n?"uint8array":"array",r.compressInputType=n?"uint8array":"array",r.magic="\b\x00",r.compress=function(t,e){return i.deflateRaw(t,{level:e.level||-1})},r.uncompress=function(t){return i.inflateRaw(t)}},{pako:24}],9:[function(t,e){"use strict";function r(t,e){return this instanceof r?(this.files={},this.comment=null,this.root="",t&&this.load(t,e),void(this.clone=function(){var t=new r;for(var e in this)"function"!=typeof this[e]&&(t[e]=this[e]);return t})):new r(t,e)}var n=t("./base64");r.prototype=t("./object"),r.prototype.load=t("./load"),r.support=t("./support"),r.defaults=t("./defaults"),r.utils=t("./deprecatedPublicUtils"),r.base64={encode:function(t){return n.encode(t)},decode:function(t){return n.decode(t)}},r.compressions=t("./compressions"),e.exports=r},{"./base64":1,"./compressions":3,"./defaults":6,"./deprecatedPublicUtils":7,"./load":10,"./object":13,"./support":17}],10:[function(t,e){"use strict";var r=t("./base64"),n=t("./zipEntries");e.exports=function(t,e){var i,a,s,o;for(e=e||{},e.base64&&(t=r.decode(t)),a=new n(t,e),i=a.files,s=0;s<i.length;s++)o=i[s],this.file(o.fileName,o.decompressed,{binary:!0,optimizedBinaryString:!0,date:o.date,dir:o.dir,comment:o.fileComment.length?o.fileComment:null,unixPermissions:o.unixPermissions,dosPermissions:o.dosPermissions,createFolders:e.createFolders});return a.zipComment.length&&(this.comment=a.zipComment),this}},{"./base64":1,"./zipEntries":22}],11:[function(t,e){(function(t){"use strict";e.exports=function(e,r){return new t(e,r)},e.exports.test=function(e){return t.isBuffer(e)}}).call(this,"undefined"!=typeof Buffer?Buffer:void 0)},{}],12:[function(t,e){"use strict";function r(t){this.data=t,this.length=this.data.length,this.index=0}var n=t("./uint8ArrayReader");r.prototype=new n,r.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.index,this.index+t);return this.index+=t,e},e.exports=r},{"./uint8ArrayReader":18}],13:[function(t,e){"use strict";var r=t("./support"),n=t("./utils"),i=t("./crc32"),a=t("./signature"),s=t("./defaults"),o=t("./base64"),d=t("./compressions"),h=t("./compressedObject"),l=t("./nodeBuffer"),f=t("./utf8"),u=t("./stringWriter"),c=t("./uint8ArrayWriter"),p=function(t){if(t._data instanceof h&&(t._data=t._data.getContent(),t.options.binary=!0,t.options.base64=!1,"uint8array"===n.getTypeOf(t._data))){var e=t._data;t._data=new Uint8Array(e.length),0!==e.length&&t._data.set(e,0)}return t._data},_=function(t){var e=p(t),i=n.getTypeOf(e);return"string"===i?!t.options.binary&&r.nodebuffer?l(e,"utf-8"):t.asBinary():e},m=function(t){var e=p(this);return null===e||"undefined"==typeof e?"":(this.options.base64&&(e=o.decode(e)),e=t&&this.options.binary?B.utf8decode(e):n.transformTo("string",e),t||this.options.binary||(e=n.transformTo("string",B.utf8encode(e))),e)},g=function(t,e,r){this.name=t,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=e,this.options=r,this._initialMetadata={dir:r.dir,date:r.date}};g.prototype={asText:function(){return m.call(this,!0)},asBinary:function(){return m.call(this,!1)},asNodeBuffer:function(){var t=_(this);return n.transformTo("nodebuffer",t)},asUint8Array:function(){var t=_(this);return n.transformTo("uint8array",t)},asArrayBuffer:function(){return this.asUint8Array().buffer}};var b=function(t,e){var r,n="";for(r=0;e>r;r++)n+=String.fromCharCode(255&t),t>>>=8;return n},w=function(){var t,e,r={};for(t=0;t<arguments.length;t++)for(e in arguments[t])arguments[t].hasOwnProperty(e)&&"undefined"==typeof r[e]&&(r[e]=arguments[t][e]);return r},v=function(t){return t=t||{},t.base64!==!0||null!==t.binary&&void 0!==t.binary||(t.binary=!0),t=w(t,s),t.date=t.date||new Date,null!==t.compression&&(t.compression=t.compression.toUpperCase()),t},y=function(t,e,r){var i,a=n.getTypeOf(e);if(r=v(r),"string"==typeof r.unixPermissions&&(r.unixPermissions=parseInt(r.unixPermissions,8)),r.unixPermissions&&16384&r.unixPermissions&&(r.dir=!0),r.dosPermissions&&16&r.dosPermissions&&(r.dir=!0),r.dir&&(t=x(t)),r.createFolders&&(i=k(t))&&z.call(this,i,!0),r.dir||null===e||"undefined"==typeof e)r.base64=!1,r.binary=!1,e=null,a=null;else if("string"===a)r.binary&&!r.base64&&r.optimizedBinaryString!==!0&&(e=n.string2binary(e));else{if(r.base64=!1,r.binary=!0,!(a||e instanceof h))throw new Error("The data of '"+t+"' is in an unsupported format !");"arraybuffer"===a&&(e=n.transformTo("uint8array",e))}var s=new g(t,e,r);return this.files[t]=s,s},k=function(t){"/"==t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf("/");return e>0?t.substring(0,e):""},x=function(t){return"/"!=t.slice(-1)&&(t+="/"),t},z=function(t,e){return e="undefined"!=typeof e?e:!1,t=x(t),this.files[t]||y.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]},C=function(t,e,r){var a,s=new h;return t._data instanceof h?(s.uncompressedSize=t._data.uncompressedSize,s.crc32=t._data.crc32,0===s.uncompressedSize||t.dir?(e=d.STORE,s.compressedContent="",s.crc32=0):t._data.compressionMethod===e.magic?s.compressedContent=t._data.getCompressedContent():(a=t._data.getContent(),s.compressedContent=e.compress(n.transformTo(e.compressInputType,a),r))):(a=_(t),(!a||0===a.length||t.dir)&&(e=d.STORE,a=""),s.uncompressedSize=a.length,s.crc32=i(a),s.compressedContent=e.compress(n.transformTo(e.compressInputType,a),r)),s.compressedSize=s.compressedContent.length,s.compressionMethod=e.magic,s},A=function(t,e){var r=t;return t||(r=e?16893:33204),(65535&r)<<16},E=function(t){return 63&(t||0)},S=function(t,e,r,s,o){var d,h,l,u,c=(r.compressedContent,n.transformTo("string",f.utf8encode(e.name))),p=e.comment||"",_=n.transformTo("string",f.utf8encode(p)),m=c.length!==e.name.length,g=_.length!==p.length,w=e.options,v="",y="",k="";l=e._initialMetadata.dir!==e.dir?e.dir:w.dir,u=e._initialMetadata.date!==e.date?e.date:w.date;var x=0,z=0;l&&(x|=16),"UNIX"===o?(z=798,x|=A(e.unixPermissions,l)):(z=20,x|=E(e.dosPermissions,l)),d=u.getHours(),d<<=6,d|=u.getMinutes(),d<<=5,d|=u.getSeconds()/2,h=u.getFullYear()-1980,h<<=4,h|=u.getMonth()+1,h<<=5,h|=u.getDate(),m&&(y=b(1,1)+b(i(c),4)+c,v+="up"+b(y.length,2)+y),g&&(k=b(1,1)+b(this.crc32(_),4)+_,v+="uc"+b(k.length,2)+k);var C="";C+="\n\x00",C+=m||g?"\x00\b":"\x00\x00",C+=r.compressionMethod,C+=b(d,2),C+=b(h,2),C+=b(r.crc32,4),C+=b(r.compressedSize,4),C+=b(r.uncompressedSize,4),C+=b(c.length,2),C+=b(v.length,2);var S=a.LOCAL_FILE_HEADER+C+c+v,B=a.CENTRAL_FILE_HEADER+b(z,2)+C+b(_.length,2)+"\x00\x00\x00\x00"+b(x,4)+b(s,4)+c+v+_;return{fileRecord:S,dirRecord:B,compressedObject:r}},B={load:function(){throw new Error("Load method is not defined. Is the file jszip-load.js included ?")},filter:function(t){var e,r,n,i,a=[];for(e in this.files)this.files.hasOwnProperty(e)&&(n=this.files[e],i=new g(n.name,n._data,w(n.options)),r=e.slice(this.root.length,e.length),e.slice(0,this.root.length)===this.root&&t(r,i)&&a.push(i));return a},file:function(t,e,r){if(1===arguments.length){if(n.isRegExp(t)){var i=t;return this.filter(function(t,e){return!e.dir&&i.test(t)})}return this.filter(function(e,r){return!r.dir&&e===t})[0]||null}return t=this.root+t,y.call(this,t,e,r),this},folder:function(t){if(!t)return this;if(n.isRegExp(t))return this.filter(function(e,r){return r.dir&&t.test(e)});var e=this.root+t,r=z.call(this,e),i=this.clone();return i.root=r.name,i},remove:function(t){t=this.root+t;var e=this.files[t];if(e||("/"!=t.slice(-1)&&(t+="/"),e=this.files[t]),e&&!e.dir)delete this.files[t];else for(var r=this.filter(function(e,r){return r.name.slice(0,t.length)===t}),n=0;n<r.length;n++)delete this.files[r[n].name];return this},generate:function(t){t=w(t||{},{base64:!0,compression:"STORE",compressionOptions:null,type:"base64",platform:"DOS",comment:null,mimeType:"application/zip"}),n.checkSupport(t.type),("darwin"===t.platform||"freebsd"===t.platform||"linux"===t.platform||"sunos"===t.platform)&&(t.platform="UNIX"),"win32"===t.platform&&(t.platform="DOS");var e,r,i=[],s=0,h=0,l=n.transformTo("string",this.utf8encode(t.comment||this.comment||""));for(var f in this.files)if(this.files.hasOwnProperty(f)){var p=this.files[f],_=p.options.compression||t.compression.toUpperCase(),m=d[_];if(!m)throw new Error(_+" is not a valid compression method !");var g=p.options.compressionOptions||t.compressionOptions||{},v=C.call(this,p,m,g),y=S.call(this,f,p,v,s,t.platform);s+=y.fileRecord.length+v.compressedSize,h+=y.dirRecord.length,i.push(y)}var k="";k=a.CENTRAL_DIRECTORY_END+"\x00\x00\x00\x00"+b(i.length,2)+b(i.length,2)+b(h,4)+b(s,4)+b(l.length,2)+l;var x=t.type.toLowerCase();for(e="uint8array"===x||"arraybuffer"===x||"blob"===x||"nodebuffer"===x?new c(s+h+k.length):new u(s+h+k.length),r=0;r<i.length;r++)e.append(i[r].fileRecord),e.append(i[r].compressedObject.compressedContent);for(r=0;r<i.length;r++)e.append(i[r].dirRecord);e.append(k);var z=e.finalize();switch(t.type.toLowerCase()){case"uint8array":case"arraybuffer":case"nodebuffer":return n.transformTo(t.type.toLowerCase(),z);case"blob":return n.arrayBuffer2Blob(n.transformTo("arraybuffer",z),t.mimeType);case"base64":return t.base64?o.encode(z):z;default:return z}},crc32:function(t,e){return i(t,e)},utf8encode:function(t){return n.transformTo("string",f.utf8encode(t))},utf8decode:function(t){return f.utf8decode(t)}};e.exports=B},{"./base64":1,"./compressedObject":2,"./compressions":3,"./crc32":4,"./defaults":6,"./nodeBuffer":11,"./signature":14,"./stringWriter":16,"./support":17,"./uint8ArrayWriter":19,"./utf8":20,"./utils":21}],14:[function(t,e,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],15:[function(t,e){"use strict";function r(t,e){this.data=t,e||(this.data=i.string2binary(this.data)),this.length=this.data.length,this.index=0}var n=t("./dataReader"),i=t("./utils");r.prototype=new n,r.prototype.byteAt=function(t){return this.data.charCodeAt(t)},r.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)},r.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.index,this.index+t);return this.index+=t,e},e.exports=r},{"./dataReader":5,"./utils":21}],16:[function(t,e){"use strict";var r=t("./utils"),n=function(){this.data=[]};n.prototype={append:function(t){t=r.transformTo("string",t),this.data.push(t)},finalize:function(){return this.data.join("")}},e.exports=n},{"./utils":21}],17:[function(t,e,r){(function(t){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof t,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var e=new ArrayBuffer(0);try{r.blob=0===new Blob([e],{type:"application/zip"}).size}catch(n){try{var i=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,a=new i;a.append(e),r.blob=0===a.getBlob("application/zip").size}catch(n){r.blob=!1}}}}).call(this,"undefined"!=typeof Buffer?Buffer:void 0)},{}],18:[function(t,e){"use strict";function r(t){t&&(this.data=t,this.length=this.data.length,this.index=0)}var n=t("./dataReader");r.prototype=new n,r.prototype.byteAt=function(t){return this.data[t]},r.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),r=t.charCodeAt(1),n=t.charCodeAt(2),i=t.charCodeAt(3),a=this.length-4;a>=0;--a)if(this.data[a]===e&&this.data[a+1]===r&&this.data[a+2]===n&&this.data[a+3]===i)return a;return-1},r.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.index,this.index+t);return this.index+=t,e},e.exports=r},{"./dataReader":5}],19:[function(t,e){"use strict";var r=t("./utils"),n=function(t){this.data=new Uint8Array(t),this.index=0};n.prototype={append:function(t){0!==t.length&&(t=r.transformTo("uint8array",t),this.data.set(t,this.index),this.index+=t.length)},finalize:function(){return this.data}},e.exports=n},{"./utils":21}],20:[function(t,e,r){"use strict";for(var n=t("./utils"),i=t("./support"),a=t("./nodeBuffer"),s=new Array(256),o=0;256>o;o++)s[o]=o>=252?6:o>=248?5:o>=240?4:o>=224?3:o>=192?2:1;s[254]=s[254]=1;var d=function(t){var e,r,n,a,s,o=t.length,d=0;for(a=0;o>a;a++)r=t.charCodeAt(a),55296===(64512&r)&&o>a+1&&(n=t.charCodeAt(a+1),56320===(64512&n)&&(r=65536+(r-55296<<10)+(n-56320),a++)),d+=128>r?1:2048>r?2:65536>r?3:4;for(e=i.uint8array?new Uint8Array(d):new Array(d),s=0,a=0;d>s;a++)r=t.charCodeAt(a),55296===(64512&r)&&o>a+1&&(n=t.charCodeAt(a+1),56320===(64512&n)&&(r=65536+(r-55296<<10)+(n-56320),a++)),128>r?e[s++]=r:2048>r?(e[s++]=192|r>>>6,e[s++]=128|63&r):65536>r?(e[s++]=224|r>>>12,e[s++]=128|r>>>6&63,e[s++]=128|63&r):(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63,e[s++]=128|r>>>6&63,e[s++]=128|63&r);return e},h=function(t,e){var r;for(e=e||t.length,e>t.length&&(e=t.length),r=e-1;r>=0&&128===(192&t[r]);)r--;return 0>r?e:0===r?e:r+s[t[r]]>e?r:e},l=function(t){var e,r,i,a,o=t.length,d=new Array(2*o);for(r=0,e=0;o>e;)if(i=t[e++],128>i)d[r++]=i;else if(a=s[i],a>4)d[r++]=65533,e+=a-1;else{for(i&=2===a?31:3===a?15:7;a>1&&o>e;)i=i<<6|63&t[e++],a--;a>1?d[r++]=65533:65536>i?d[r++]=i:(i-=65536,d[r++]=55296|i>>10&1023,d[r++]=56320|1023&i)}return d.length!==r&&(d.subarray?d=d.subarray(0,r):d.length=r),n.applyFromCharCode(d)};r.utf8encode=function(t){return i.nodebuffer?a(t,"utf-8"):d(t)},r.utf8decode=function(t){if(i.nodebuffer)return n.transformTo("nodebuffer",t).toString("utf-8");t=n.transformTo(i.uint8array?"uint8array":"array",t);for(var e=[],r=0,a=t.length,s=65536;a>r;){var o=h(t,Math.min(r+s,a));e.push(l(i.uint8array?t.subarray(r,o):t.slice(r,o))),r=o}return e.join("")}},{"./nodeBuffer":11,"./support":17,"./utils":21}],21:[function(t,e,r){"use strict";function n(t){return t}function i(t,e){for(var r=0;r<t.length;++r)e[r]=255&t.charCodeAt(r);return e}function a(t){var e=65536,n=[],i=t.length,a=r.getTypeOf(t),s=0,o=!0;try{switch(a){case"uint8array":String.fromCharCode.apply(null,new Uint8Array(0));break;case"nodebuffer":String.fromCharCode.apply(null,h(0))}}catch(d){o=!1}if(!o){for(var l="",f=0;f<t.length;f++)l+=String.fromCharCode(t[f]);return l}for(;i>s&&e>1;)try{n.push("array"===a||"nodebuffer"===a?String.fromCharCode.apply(null,t.slice(s,Math.min(s+e,i))):String.fromCharCode.apply(null,t.subarray(s,Math.min(s+e,i)))),s+=e}catch(d){e=Math.floor(e/2)}return n.join("")}function s(t,e){for(var r=0;r<t.length;r++)e[r]=t[r];return e}var o=t("./support"),d=t("./compressions"),h=t("./nodeBuffer");r.string2binary=function(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(255&t.charCodeAt(r));return e},r.arrayBuffer2Blob=function(t,e){r.checkSupport("blob"),e=e||"application/zip";try{return new Blob([t],{type:e})}catch(n){try{var i=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,a=new i;return a.append(t),a.getBlob(e)}catch(n){throw new Error("Bug : can't construct the Blob.")}}},r.applyFromCharCode=a;var l={};l.string={string:n,array:function(t){return i(t,new Array(t.length))},arraybuffer:function(t){return l.string.uint8array(t).buffer},uint8array:function(t){return i(t,new Uint8Array(t.length))},nodebuffer:function(t){return i(t,h(t.length))}},l.array={string:a,array:n,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return h(t)}},l.arraybuffer={string:function(t){return a(new Uint8Array(t))},array:function(t){return s(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:n,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return h(new Uint8Array(t))}},l.uint8array={string:a,array:function(t){return s(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:n,nodebuffer:function(t){return h(t)}},l.nodebuffer={string:a,array:function(t){return s(t,new Array(t.length))},arraybuffer:function(t){return l.nodebuffer.uint8array(t).buffer},uint8array:function(t){return s(t,new Uint8Array(t.length))},nodebuffer:n},r.transformTo=function(t,e){if(e||(e=""),!t)return e;r.checkSupport(t);var n=r.getTypeOf(e),i=l[n][t](e);return i},r.getTypeOf=function(t){return"string"==typeof t?"string":"[object Array]"===Object.prototype.toString.call(t)?"array":o.nodebuffer&&h.test(t)?"nodebuffer":o.uint8array&&t instanceof Uint8Array?"uint8array":o.arraybuffer&&t instanceof ArrayBuffer?"arraybuffer":void 0},r.checkSupport=function(t){var e=o[t.toLowerCase()];if(!e)throw new Error(t+" is not supported by this browser")},r.MAX_VALUE_16BITS=65535,r.MAX_VALUE_32BITS=-1,r.pretty=function(t){var e,r,n="";for(r=0;r<(t||"").length;r++)e=t.charCodeAt(r),n+="\\x"+(16>e?"0":"")+e.toString(16).toUpperCase();return n},r.findCompression=function(t){for(var e in d)if(d.hasOwnProperty(e)&&d[e].magic===t)return d[e];return null},r.isRegExp=function(t){return"[object RegExp]"===Object.prototype.toString.call(t)}},{"./compressions":3,"./nodeBuffer":11,"./support":17}],22:[function(t,e){"use strict";function r(t,e){this.files=[],this.loadOptions=e,t&&this.load(t)}var n=t("./stringReader"),i=t("./nodeBufferReader"),a=t("./uint8ArrayReader"),s=t("./utils"),o=t("./signature"),d=t("./zipEntry"),h=t("./support"),l=t("./object");r.prototype={checkSignature:function(t){var e=this.reader.readString(4);if(e!==t)throw new Error("Corrupted zip or bug : unexpected signature ("+s.pretty(e)+", expected "+s.pretty(t)+")")},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2),this.zipComment=this.reader.readString(this.zipCommentLength),this.zipComment=l.utf8decode(this.zipComment)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.versionMadeBy=this.reader.readString(2),this.versionNeeded=this.reader.readInt(2),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,r,n=this.zip64EndOfCentralSize-44,i=0;n>i;)t=this.reader.readInt(2),e=this.reader.readInt(4),r=this.reader.readString(e),this.zip64ExtensibleData[t]={id:t,length:e,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),this.disksCount>1)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(o.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes()},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readString(4)===o.CENTRAL_FILE_HEADER;)t=new d({zip64:this.zip64},this.loadOptions),t.readCentralPart(this.reader),this.files.push(t)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(o.CENTRAL_DIRECTORY_END);if(-1===t){var e=!0;try{this.reader.setIndex(0),this.checkSignature(o.LOCAL_FILE_HEADER),e=!1}catch(r){}throw new Error(e?"Can't find end of central directory : is this a zip file ? If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html":"Corrupted zip : can't find end of central directory")}if(this.reader.setIndex(t),this.checkSignature(o.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===s.MAX_VALUE_16BITS||this.diskWithCentralDirStart===s.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===s.MAX_VALUE_16BITS||this.centralDirRecords===s.MAX_VALUE_16BITS||this.centralDirSize===s.MAX_VALUE_32BITS||this.centralDirOffset===s.MAX_VALUE_32BITS){if(this.zip64=!0,t=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR),-1===t)throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");this.reader.setIndex(t),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}},prepareReader:function(t){var e=s.getTypeOf(t);this.reader="string"!==e||h.uint8array?"nodebuffer"===e?new i(t):new a(s.transformTo("uint8array",t)):new n(t,this.loadOptions.optimizedBinaryString)},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},e.exports=r},{"./nodeBufferReader":12,"./object":13,"./signature":14,"./stringReader":15,"./support":17,"./uint8ArrayReader":18,"./utils":21,"./zipEntry":23}],23:[function(t,e){"use strict";function r(t,e){this.options=t,this.loadOptions=e}var n=t("./stringReader"),i=t("./utils"),a=t("./compressedObject"),s=t("./object"),o=0,d=3;r.prototype={isEncrypted:function(){return 1===(1&this.bitFlag)},useUTF8:function(){return 2048===(2048&this.bitFlag)},prepareCompressedContent:function(t,e,r){return function(){var n=t.index;t.setIndex(e);var i=t.readData(r);return t.setIndex(n),i}},prepareContent:function(t,e,r,n,a){return function(){var t=i.transformTo(n.uncompressInputType,this.getCompressedContent()),e=n.uncompress(t);if(e.length!==a)throw new Error("Bug : uncompressed data size mismatch");return e}},readLocalPart:function(t){var e,r;if(t.skip(22),this.fileNameLength=t.readInt(2),r=t.readInt(2),this.fileName=t.readString(this.fileNameLength),t.skip(r),-1==this.compressedSize||-1==this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize == -1 || uncompressedSize == -1)");if(e=i.findCompression(this.compressionMethod),null===e)throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+this.fileName+")");if(this.decompressed=new a,this.decompressed.compressedSize=this.compressedSize,this.decompressed.uncompressedSize=this.uncompressedSize,this.decompressed.crc32=this.crc32,this.decompressed.compressionMethod=this.compressionMethod,this.decompressed.getCompressedContent=this.prepareCompressedContent(t,t.index,this.compressedSize,e),this.decompressed.getContent=this.prepareContent(t,t.index,this.compressedSize,e,this.uncompressedSize),this.loadOptions.checkCRC32&&(this.decompressed=i.transformTo("string",this.decompressed.getContent()),s.crc32(this.decompressed)!==this.crc32))throw new Error("Corrupted zip : CRC32 mismatch")},readCentralPart:function(t){if(this.versionMadeBy=t.readInt(2),this.versionNeeded=t.readInt(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4),this.fileNameLength=t.readInt(2),this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");this.fileName=t.readString(this.fileNameLength),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readString(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=16&this.externalFileAttributes?!0:!1,t===o&&(this.dosPermissions=63&this.externalFileAttributes),t===d&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileName.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var t=new n(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=t.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=t.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=t.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=t.readInt(4))}},readExtraFields:function(t){var e,r,n,i=t.index;for(this.extraFields=this.extraFields||{};t.index<i+this.extraFieldsLength;)e=t.readInt(2),r=t.readInt(2),n=t.readString(r),this.extraFields[e]={id:e,length:r,value:n}},handleUTF8:function(){if(this.useUTF8())this.fileName=s.utf8decode(this.fileName),this.fileComment=s.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();null!==t&&(this.fileName=t);var e=this.findExtraFieldUnicodeComment();null!==e&&(this.fileComment=e)}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=new n(t.value);return 1!==e.readInt(1)?null:s.crc32(this.fileName)!==e.readInt(4)?null:s.utf8decode(e.readString(t.length-5));
}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=new n(t.value);return 1!==e.readInt(1)?null:s.crc32(this.fileComment)!==e.readInt(4)?null:s.utf8decode(e.readString(t.length-5))}return null}},e.exports=r},{"./compressedObject":2,"./object":13,"./stringReader":15,"./utils":21}],24:[function(t,e){"use strict";var r=t("./lib/utils/common").assign,n=t("./lib/deflate"),i=t("./lib/inflate"),a=t("./lib/zlib/constants"),s={};r(s,n,i,a),e.exports=s},{"./lib/deflate":25,"./lib/inflate":26,"./lib/utils/common":27,"./lib/zlib/constants":30}],25:[function(t,e,r){"use strict";function n(t,e){var r=new b(e);if(r.push(t,!0),r.err)throw r.msg;return r.result}function i(t,e){return e=e||{},e.raw=!0,n(t,e)}function a(t,e){return e=e||{},e.gzip=!0,n(t,e)}var s=t("./zlib/deflate.js"),o=t("./utils/common"),d=t("./utils/strings"),h=t("./zlib/messages"),l=t("./zlib/zstream"),f=0,u=4,c=0,p=1,_=-1,m=0,g=8,b=function(t){this.options=o.assign({level:_,method:g,chunkSize:16384,windowBits:15,memLevel:8,strategy:m,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var r=s.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(r!==c)throw new Error(h[r]);e.header&&s.deflateSetHeader(this.strm,e.header)};b.prototype.push=function(t,e){var r,n,i=this.strm,a=this.options.chunkSize;if(this.ended)return!1;n=e===~~e?e:e===!0?u:f,i.input="string"==typeof t?d.string2buf(t):t,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new o.Buf8(a),i.next_out=0,i.avail_out=a),r=s.deflate(i,n),r!==p&&r!==c)return this.onEnd(r),this.ended=!0,!1;(0===i.avail_out||0===i.avail_in&&n===u)&&this.onData("string"===this.options.to?d.buf2binstring(o.shrinkBuf(i.output,i.next_out)):o.shrinkBuf(i.output,i.next_out))}while((i.avail_in>0||0===i.avail_out)&&r!==p);return n===u?(r=s.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===c):!0},b.prototype.onData=function(t){this.chunks.push(t)},b.prototype.onEnd=function(t){t===c&&(this.result="string"===this.options.to?this.chunks.join(""):o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Deflate=b,r.deflate=n,r.deflateRaw=i,r.gzip=a},{"./utils/common":27,"./utils/strings":28,"./zlib/deflate.js":32,"./zlib/messages":37,"./zlib/zstream":39}],26:[function(t,e,r){"use strict";function n(t,e){var r=new u(e);if(r.push(t,!0),r.err)throw r.msg;return r.result}function i(t,e){return e=e||{},e.raw=!0,n(t,e)}var a=t("./zlib/inflate.js"),s=t("./utils/common"),o=t("./utils/strings"),d=t("./zlib/constants"),h=t("./zlib/messages"),l=t("./zlib/zstream"),f=t("./zlib/gzheader"),u=function(t){this.options=s.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0===(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var r=a.inflateInit2(this.strm,e.windowBits);if(r!==d.Z_OK)throw new Error(h[r]);this.header=new f,a.inflateGetHeader(this.strm,this.header)};u.prototype.push=function(t,e){var r,n,i,h,l,f=this.strm,u=this.options.chunkSize;if(this.ended)return!1;n=e===~~e?e:e===!0?d.Z_FINISH:d.Z_NO_FLUSH,f.input="string"==typeof t?o.binstring2buf(t):t,f.next_in=0,f.avail_in=f.input.length;do{if(0===f.avail_out&&(f.output=new s.Buf8(u),f.next_out=0,f.avail_out=u),r=a.inflate(f,d.Z_NO_FLUSH),r!==d.Z_STREAM_END&&r!==d.Z_OK)return this.onEnd(r),this.ended=!0,!1;f.next_out&&(0===f.avail_out||r===d.Z_STREAM_END||0===f.avail_in&&n===d.Z_FINISH)&&("string"===this.options.to?(i=o.utf8border(f.output,f.next_out),h=f.next_out-i,l=o.buf2string(f.output,i),f.next_out=h,f.avail_out=u-h,h&&s.arraySet(f.output,f.output,i,h,0),this.onData(l)):this.onData(s.shrinkBuf(f.output,f.next_out)))}while(f.avail_in>0&&r!==d.Z_STREAM_END);return r===d.Z_STREAM_END&&(n=d.Z_FINISH),n===d.Z_FINISH?(r=a.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===d.Z_OK):!0},u.prototype.onData=function(t){this.chunks.push(t)},u.prototype.onEnd=function(t){t===d.Z_OK&&(this.result="string"===this.options.to?this.chunks.join(""):s.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Inflate=u,r.inflate=n,r.inflateRaw=i,r.ungzip=n},{"./utils/common":27,"./utils/strings":28,"./zlib/constants":30,"./zlib/gzheader":33,"./zlib/inflate.js":35,"./zlib/messages":37,"./zlib/zstream":39}],27:[function(t,e,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(t[n]=r[n])}}return t},r.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var i={arraySet:function(t,e,r,n,i){if(e.subarray&&t.subarray)return void t.set(e.subarray(r,r+n),i);for(var a=0;n>a;a++)t[i+a]=e[r+a]},flattenChunks:function(t){var e,r,n,i,a,s;for(n=0,e=0,r=t.length;r>e;e++)n+=t[e].length;for(s=new Uint8Array(n),i=0,e=0,r=t.length;r>e;e++)a=t[e],s.set(a,i),i+=a.length;return s}},a={arraySet:function(t,e,r,n,i){for(var a=0;n>a;a++)t[i+a]=e[r+a]},flattenChunks:function(t){return[].concat.apply([],t)}};r.setTyped=function(t){t?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,a))},r.setTyped(n)},{}],28:[function(t,e,r){"use strict";function n(t,e){if(65537>e&&(t.subarray&&s||!t.subarray&&a))return String.fromCharCode.apply(null,i.shrinkBuf(t,e));for(var r="",n=0;e>n;n++)r+=String.fromCharCode(t[n]);return r}var i=t("./common"),a=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(o){a=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(o){s=!1}for(var d=new i.Buf8(256),h=0;256>h;h++)d[h]=h>=252?6:h>=248?5:h>=240?4:h>=224?3:h>=192?2:1;d[254]=d[254]=1,r.string2buf=function(t){var e,r,n,a,s,o=t.length,d=0;for(a=0;o>a;a++)r=t.charCodeAt(a),55296===(64512&r)&&o>a+1&&(n=t.charCodeAt(a+1),56320===(64512&n)&&(r=65536+(r-55296<<10)+(n-56320),a++)),d+=128>r?1:2048>r?2:65536>r?3:4;for(e=new i.Buf8(d),s=0,a=0;d>s;a++)r=t.charCodeAt(a),55296===(64512&r)&&o>a+1&&(n=t.charCodeAt(a+1),56320===(64512&n)&&(r=65536+(r-55296<<10)+(n-56320),a++)),128>r?e[s++]=r:2048>r?(e[s++]=192|r>>>6,e[s++]=128|63&r):65536>r?(e[s++]=224|r>>>12,e[s++]=128|r>>>6&63,e[s++]=128|63&r):(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63,e[s++]=128|r>>>6&63,e[s++]=128|63&r);return e},r.buf2binstring=function(t){return n(t,t.length)},r.binstring2buf=function(t){for(var e=new i.Buf8(t.length),r=0,n=e.length;n>r;r++)e[r]=t.charCodeAt(r);return e},r.buf2string=function(t,e){var r,i,a,s,o=e||t.length,h=new Array(2*o);for(i=0,r=0;o>r;)if(a=t[r++],128>a)h[i++]=a;else if(s=d[a],s>4)h[i++]=65533,r+=s-1;else{for(a&=2===s?31:3===s?15:7;s>1&&o>r;)a=a<<6|63&t[r++],s--;s>1?h[i++]=65533:65536>a?h[i++]=a:(a-=65536,h[i++]=55296|a>>10&1023,h[i++]=56320|1023&a)}return n(h,i)},r.utf8border=function(t,e){var r;for(e=e||t.length,e>t.length&&(e=t.length),r=e-1;r>=0&&128===(192&t[r]);)r--;return 0>r?e:0===r?e:r+d[t[r]]>e?r:e}},{"./common":27}],29:[function(t,e){"use strict";function r(t,e,r,n){for(var i=65535&t|0,a=t>>>16&65535|0,s=0;0!==r;){s=r>2e3?2e3:r,r-=s;do i=i+e[n++]|0,a=a+i|0;while(--s);i%=65521,a%=65521}return i|a<<16|0}e.exports=r},{}],30:[function(t,e){e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],31:[function(t,e){"use strict";function r(){for(var t,e=[],r=0;256>r;r++){t=r;for(var n=0;8>n;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}function n(t,e,r,n){var a=i,s=n+r;t=-1^t;for(var o=n;s>o;o++)t=t>>>8^a[255&(t^e[o])];return-1^t}var i=r();e.exports=n},{}],32:[function(t,e,r){"use strict";function n(t,e){return t.msg=O[e],e}function i(t){return(t<<1)-(t>4?9:0)}function a(t){for(var e=t.length;--e>=0;)t[e]=0}function s(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(S.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function o(t,e){B._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,s(t.strm)}function d(t,e){t.pending_buf[t.pending++]=e}function h(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function l(t,e,r,n){var i=t.avail_in;return i>n&&(i=n),0===i?0:(t.avail_in-=i,S.arraySet(e,t.input,t.next_in,i,r),1===t.state.wrap?t.adler=I(t.adler,e,i,r):2===t.state.wrap&&(t.adler=T(t.adler,e,i,r)),t.next_in+=i,t.total_in+=i,i)}function f(t,e){var r,n,i=t.max_chain_length,a=t.strstart,s=t.prev_length,o=t.nice_match,d=t.strstart>t.w_size-ht?t.strstart-(t.w_size-ht):0,h=t.window,l=t.w_mask,f=t.prev,u=t.strstart+dt,c=h[a+s-1],p=h[a+s];t.prev_length>=t.good_match&&(i>>=2),o>t.lookahead&&(o=t.lookahead);do if(r=e,h[r+s]===p&&h[r+s-1]===c&&h[r]===h[a]&&h[++r]===h[a+1]){a+=2,r++;do;while(h[++a]===h[++r]&&h[++a]===h[++r]&&h[++a]===h[++r]&&h[++a]===h[++r]&&h[++a]===h[++r]&&h[++a]===h[++r]&&h[++a]===h[++r]&&h[++a]===h[++r]&&u>a);if(n=dt-(u-a),a=u-dt,n>s){if(t.match_start=e,s=n,n>=o)break;c=h[a+s-1],p=h[a+s]}}while((e=f[e&l])>d&&0!==--i);return s<=t.lookahead?s:t.lookahead}function u(t){var e,r,n,i,a,s=t.w_size;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=s+(s-ht)){S.arraySet(t.window,t.window,s,s,0),t.match_start-=s,t.strstart-=s,t.block_start-=s,r=t.hash_size,e=r;do n=t.head[--e],t.head[e]=n>=s?n-s:0;while(--r);r=s,e=r;do n=t.prev[--e],t.prev[e]=n>=s?n-s:0;while(--r);i+=s}if(0===t.strm.avail_in)break;if(r=l(t.strm,t.window,t.strstart+t.lookahead,i),t.lookahead+=r,t.lookahead+t.insert>=ot)for(a=t.strstart-t.insert,t.ins_h=t.window[a],t.ins_h=(t.ins_h<<t.hash_shift^t.window[a+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[a+ot-1])&t.hash_mask,t.prev[a&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=a,a++,t.insert--,!(t.lookahead+t.insert<ot)););}while(t.lookahead<ht&&0!==t.strm.avail_in)}function c(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(u(t),0===t.lookahead&&e===R)return bt;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var n=t.block_start+r;if((0===t.strstart||t.strstart>=n)&&(t.lookahead=t.strstart-n,t.strstart=n,o(t,!1),0===t.strm.avail_out))return bt;if(t.strstart-t.block_start>=t.w_size-ht&&(o(t,!1),0===t.strm.avail_out))return bt}return t.insert=0,e===N?(o(t,!0),0===t.strm.avail_out?vt:yt):t.strstart>t.block_start&&(o(t,!1),0===t.strm.avail_out)?bt:bt}function p(t,e){for(var r,n;;){if(t.lookahead<ht){if(u(t),t.lookahead<ht&&e===R)return bt;if(0===t.lookahead)break}if(r=0,t.lookahead>=ot&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ot-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-ht&&(t.match_length=f(t,r)),t.match_length>=ot)if(n=B._tr_tally(t,t.strstart-t.match_start,t.match_length-ot),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=ot){t.match_length--;do t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ot-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(0!==--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else n=B._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(n&&(o(t,!1),0===t.strm.avail_out))return bt}return t.insert=t.strstart<ot-1?t.strstart:ot-1,e===N?(o(t,!0),0===t.strm.avail_out?vt:yt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?bt:wt}function _(t,e){for(var r,n,i;;){if(t.lookahead<ht){if(u(t),t.lookahead<ht&&e===R)return bt;if(0===t.lookahead)break}if(r=0,t.lookahead>=ot&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ot-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=ot-1,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-ht&&(t.match_length=f(t,r),t.match_length<=5&&(t.strategy===X||t.match_length===ot&&t.strstart-t.match_start>4096)&&(t.match_length=ot-1)),t.prev_length>=ot&&t.match_length<=t.prev_length){i=t.strstart+t.lookahead-ot,n=B._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-ot),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=i&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ot-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(0!==--t.prev_length);if(t.match_available=0,t.match_length=ot-1,t.strstart++,n&&(o(t,!1),0===t.strm.avail_out))return bt}else if(t.match_available){if(n=B._tr_tally(t,0,t.window[t.strstart-1]),n&&o(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return bt}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(n=B._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<ot-1?t.strstart:ot-1,e===N?(o(t,!0),0===t.strm.avail_out?vt:yt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?bt:wt}function m(t,e){for(var r,n,i,a,s=t.window;;){if(t.lookahead<=dt){if(u(t),t.lookahead<=dt&&e===R)return bt;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=ot&&t.strstart>0&&(i=t.strstart-1,n=s[i],n===s[++i]&&n===s[++i]&&n===s[++i])){a=t.strstart+dt;do;while(n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&a>i);t.match_length=dt-(a-i),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=ot?(r=B._tr_tally(t,1,t.match_length-ot),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=B._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(o(t,!1),0===t.strm.avail_out))return bt}return t.insert=0,e===N?(o(t,!0),0===t.strm.avail_out?vt:yt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?bt:wt}function g(t,e){for(var r;;){if(0===t.lookahead&&(u(t),0===t.lookahead)){if(e===R)return bt;break}if(t.match_length=0,r=B._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(o(t,!1),0===t.strm.avail_out))return bt}return t.insert=0,e===N?(o(t,!0),0===t.strm.avail_out?vt:yt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?bt:wt}function b(t){t.window_size=2*t.w_size,a(t.head),t.max_lazy_match=E[t.level].max_lazy,t.good_match=E[t.level].good_length,t.nice_match=E[t.level].nice_length,t.max_chain_length=E[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=ot-1,t.match_available=0,t.ins_h=0}function w(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=G,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new S.Buf16(2*at),this.dyn_dtree=new S.Buf16(2*(2*nt+1)),this.bl_tree=new S.Buf16(2*(2*it+1)),a(this.dyn_ltree),a(this.dyn_dtree),a(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new S.Buf16(st+1),this.heap=new S.Buf16(2*rt+1),a(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new S.Buf16(2*rt+1),a(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function v(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=q,e=t.state,e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?ft:mt,t.adler=2===e.wrap?0:1,e.last_flush=R,B._tr_init(e),F):n(t,P)}function y(t){var e=v(t);return e===F&&b(t.state),e}function k(t,e){return t&&t.state?2!==t.state.wrap?P:(t.state.gzhead=e,F):P}function x(t,e,r,i,a,s){if(!t)return P;var o=1;if(e===H&&(e=6),0>i?(o=0,i=-i):i>15&&(o=2,i-=16),1>a||a>J||r!==G||8>i||i>15||0>e||e>9||0>s||s>Y)return n(t,P);8===i&&(i=9);var d=new w;return t.state=d,d.strm=t,d.wrap=o,d.gzhead=null,d.w_bits=i,d.w_size=1<<d.w_bits,d.w_mask=d.w_size-1,d.hash_bits=a+7,d.hash_size=1<<d.hash_bits,d.hash_mask=d.hash_size-1,d.hash_shift=~~((d.hash_bits+ot-1)/ot),d.window=new S.Buf8(2*d.w_size),d.head=new S.Buf16(d.hash_size),d.prev=new S.Buf16(d.w_size),d.lit_bufsize=1<<a+6,d.pending_buf_size=4*d.lit_bufsize,d.pending_buf=new S.Buf8(d.pending_buf_size),d.d_buf=d.lit_bufsize>>1,d.l_buf=3*d.lit_bufsize,d.level=e,d.strategy=s,d.method=r,y(t)}function z(t,e){return x(t,e,G,Q,$,W)}function C(t,e){var r,o,l,f;if(!t||!t.state||e>U||0>e)return t?n(t,P):P;if(o=t.state,!t.output||!t.input&&0!==t.avail_in||o.status===gt&&e!==N)return n(t,0===t.avail_out?j:P);if(o.strm=t,r=o.last_flush,o.last_flush=e,o.status===ft)if(2===o.wrap)t.adler=0,d(o,31),d(o,139),d(o,8),o.gzhead?(d(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),d(o,255&o.gzhead.time),d(o,o.gzhead.time>>8&255),d(o,o.gzhead.time>>16&255),d(o,o.gzhead.time>>24&255),d(o,9===o.level?2:o.strategy>=K||o.level<2?4:0),d(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(d(o,255&o.gzhead.extra.length),d(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(t.adler=T(t.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=ut):(d(o,0),d(o,0),d(o,0),d(o,0),d(o,0),d(o,9===o.level?2:o.strategy>=K||o.level<2?4:0),d(o,kt),o.status=mt);else{var u=G+(o.w_bits-8<<4)<<8,c=-1;c=o.strategy>=K||o.level<2?0:o.level<6?1:6===o.level?2:3,u|=c<<6,0!==o.strstart&&(u|=lt),u+=31-u%31,o.status=mt,h(o,u),0!==o.strstart&&(h(o,t.adler>>>16),h(o,65535&t.adler)),t.adler=1}if(o.status===ut)if(o.gzhead.extra){for(l=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>l&&(t.adler=T(t.adler,o.pending_buf,o.pending-l,l)),s(t),l=o.pending,o.pending!==o.pending_buf_size));)d(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>l&&(t.adler=T(t.adler,o.pending_buf,o.pending-l,l)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=ct)}else o.status=ct;if(o.status===ct)if(o.gzhead.name){l=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>l&&(t.adler=T(t.adler,o.pending_buf,o.pending-l,l)),s(t),l=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,d(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>l&&(t.adler=T(t.adler,o.pending_buf,o.pending-l,l)),0===f&&(o.gzindex=0,o.status=pt)}else o.status=pt;if(o.status===pt)if(o.gzhead.comment){l=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>l&&(t.adler=T(t.adler,o.pending_buf,o.pending-l,l)),s(t),l=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,d(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>l&&(t.adler=T(t.adler,o.pending_buf,o.pending-l,l)),0===f&&(o.status=_t)}else o.status=_t;if(o.status===_t&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&s(t),o.pending+2<=o.pending_buf_size&&(d(o,255&t.adler),d(o,t.adler>>8&255),t.adler=0,o.status=mt)):o.status=mt),0!==o.pending){if(s(t),0===t.avail_out)return o.last_flush=-1,F}else if(0===t.avail_in&&i(e)<=i(r)&&e!==N)return n(t,j);if(o.status===gt&&0!==t.avail_in)return n(t,j);if(0!==t.avail_in||0!==o.lookahead||e!==R&&o.status!==gt){var p=o.strategy===K?g(o,e):o.strategy===V?m(o,e):E[o.level].func(o,e);if((p===vt||p===yt)&&(o.status=gt),p===bt||p===vt)return 0===t.avail_out&&(o.last_flush=-1),F;if(p===wt&&(e===L?B._tr_align(o):e!==U&&(B._tr_stored_block(o,0,0,!1),e===D&&(a(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),s(t),0===t.avail_out))return o.last_flush=-1,F}return e!==N?F:o.wrap<=0?Z:(2===o.wrap?(d(o,255&t.adler),d(o,t.adler>>8&255),d(o,t.adler>>16&255),d(o,t.adler>>24&255),d(o,255&t.total_in),d(o,t.total_in>>8&255),d(o,t.total_in>>16&255),d(o,t.total_in>>24&255)):(h(o,t.adler>>>16),h(o,65535&t.adler)),s(t),o.wrap>0&&(o.wrap=-o.wrap),0!==o.pending?F:Z)}function A(t){var e;return t&&t.state?(e=t.state.status,e!==ft&&e!==ut&&e!==ct&&e!==pt&&e!==_t&&e!==mt&&e!==gt?n(t,P):(t.state=null,e===mt?n(t,M):F)):P}var E,S=t("../utils/common"),B=t("./trees"),I=t("./adler32"),T=t("./crc32"),O=t("./messages"),R=0,L=1,D=3,N=4,U=5,F=0,Z=1,P=-2,M=-3,j=-5,H=-1,X=1,K=2,V=3,Y=4,W=0,q=2,G=8,J=9,Q=15,$=8,tt=29,et=256,rt=et+1+tt,nt=30,it=19,at=2*rt+1,st=15,ot=3,dt=258,ht=dt+ot+1,lt=32,ft=42,ut=69,ct=73,pt=91,_t=103,mt=113,gt=666,bt=1,wt=2,vt=3,yt=4,kt=3,xt=function(t,e,r,n,i){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=n,this.func=i};E=[new xt(0,0,0,0,c),new xt(4,4,8,4,p),new xt(4,5,16,8,p),new xt(4,6,32,32,p),new xt(4,4,16,16,_),new xt(8,16,32,32,_),new xt(8,16,128,128,_),new xt(8,32,128,256,_),new xt(32,128,258,1024,_),new xt(32,258,258,4096,_)],r.deflateInit=z,r.deflateInit2=x,r.deflateReset=y,r.deflateResetKeep=v,r.deflateSetHeader=k,r.deflate=C,r.deflateEnd=A,r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":27,"./adler32":29,"./crc32":31,"./messages":37,"./trees":38}],33:[function(t,e){"use strict";function r(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}e.exports=r},{}],34:[function(t,e){"use strict";var r=30,n=12;e.exports=function(t,e){var i,a,s,o,d,h,l,f,u,c,p,_,m,g,b,w,v,y,k,x,z,C,A,E,S;i=t.state,a=t.next_in,E=t.input,s=a+(t.avail_in-5),o=t.next_out,S=t.output,d=o-(e-t.avail_out),h=o+(t.avail_out-257),l=i.dmax,f=i.wsize,u=i.whave,c=i.wnext,p=i.window,_=i.hold,m=i.bits,g=i.lencode,b=i.distcode,w=(1<<i.lenbits)-1,v=(1<<i.distbits)-1;t:do{15>m&&(_+=E[a++]<<m,m+=8,_+=E[a++]<<m,m+=8),y=g[_&w];e:for(;;){if(k=y>>>24,_>>>=k,m-=k,k=y>>>16&255,0===k)S[o++]=65535&y;else{if(!(16&k)){if(0===(64&k)){y=g[(65535&y)+(_&(1<<k)-1)];continue e}if(32&k){i.mode=n;break t}t.msg="invalid literal/length code",i.mode=r;break t}x=65535&y,k&=15,k&&(k>m&&(_+=E[a++]<<m,m+=8),x+=_&(1<<k)-1,_>>>=k,m-=k),15>m&&(_+=E[a++]<<m,m+=8,_+=E[a++]<<m,m+=8),y=b[_&v];r:for(;;){if(k=y>>>24,_>>>=k,m-=k,k=y>>>16&255,!(16&k)){if(0===(64&k)){y=b[(65535&y)+(_&(1<<k)-1)];continue r}t.msg="invalid distance code",i.mode=r;break t}if(z=65535&y,k&=15,k>m&&(_+=E[a++]<<m,m+=8,k>m&&(_+=E[a++]<<m,m+=8)),z+=_&(1<<k)-1,z>l){t.msg="invalid distance too far back",i.mode=r;break t}if(_>>>=k,m-=k,k=o-d,z>k){if(k=z-k,k>u&&i.sane){t.msg="invalid distance too far back",i.mode=r;break t}if(C=0,A=p,0===c){if(C+=f-k,x>k){x-=k;do S[o++]=p[C++];while(--k);C=o-z,A=S}}else if(k>c){if(C+=f+c-k,k-=c,x>k){x-=k;do S[o++]=p[C++];while(--k);if(C=0,x>c){k=c,x-=k;do S[o++]=p[C++];while(--k);C=o-z,A=S}}}else if(C+=c-k,x>k){x-=k;do S[o++]=p[C++];while(--k);C=o-z,A=S}for(;x>2;)S[o++]=A[C++],S[o++]=A[C++],S[o++]=A[C++],x-=3;x&&(S[o++]=A[C++],x>1&&(S[o++]=A[C++]))}else{C=o-z;do S[o++]=S[C++],S[o++]=S[C++],S[o++]=S[C++],x-=3;while(x>2);x&&(S[o++]=S[C++],x>1&&(S[o++]=S[C++]))}break}}break}}while(s>a&&h>o);x=m>>3,a-=x,m-=x<<3,_&=(1<<m)-1,t.next_in=a,t.next_out=o,t.avail_in=s>a?5+(s-a):5-(a-s),t.avail_out=h>o?257+(h-o):257-(o-h),i.hold=_,i.bits=m}},{}],35:[function(t,e,r){"use strict";function n(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function i(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new g.Buf16(320),this.work=new g.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=N,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new g.Buf32(pt),e.distcode=e.distdyn=new g.Buf32(_t),e.sane=1,e.back=-1,S):T}function s(t){var e;return t&&t.state?(e=t.state,e.wsize=0,e.whave=0,e.wnext=0,a(t)):T}function o(t,e){var r,n;return t&&t.state?(n=t.state,0>e?(r=0,e=-e):(r=(e>>4)+1,48>e&&(e&=15)),e&&(8>e||e>15)?T:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=r,n.wbits=e,s(t))):T}function d(t,e){var r,n;return t?(n=new i,t.state=n,n.window=null,r=o(t,e),r!==S&&(t.state=null),r):T}function h(t){return d(t,gt)}function l(t){if(bt){var e;for(_=new g.Buf32(512),m=new g.Buf32(32),e=0;144>e;)t.lens[e++]=8;for(;256>e;)t.lens[e++]=9;for(;280>e;)t.lens[e++]=7;for(;288>e;)t.lens[e++]=8;for(y(x,t.lens,0,288,_,0,t.work,{bits:9}),e=0;32>e;)t.lens[e++]=5;y(z,t.lens,0,32,m,0,t.work,{bits:5}),bt=!1}t.lencode=_,t.lenbits=9,t.distcode=m,t.distbits=5}function f(t,e,r,n){var i,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new g.Buf8(a.wsize)),n>=a.wsize?(g.arraySet(a.window,e,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):(i=a.wsize-a.wnext,i>n&&(i=n),g.arraySet(a.window,e,r-n,i,a.wnext),n-=i,n?(g.arraySet(a.window,e,r-n,n,0),a.wnext=n,a.whave=a.wsize):(a.wnext+=i,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=i))),0}function u(t,e){var r,i,a,s,o,d,h,u,c,p,_,m,pt,_t,mt,gt,bt,wt,vt,yt,kt,xt,zt,Ct,At=0,Et=new g.Buf8(4),St=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return T;r=t.state,r.mode===Y&&(r.mode=W),o=t.next_out,a=t.output,h=t.avail_out,s=t.next_in,i=t.input,d=t.avail_in,u=r.hold,c=r.bits,p=d,_=h,xt=S;t:for(;;)switch(r.mode){case N:if(0===r.wrap){r.mode=W;break}for(;16>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}if(2&r.wrap&&35615===u){r.check=0,Et[0]=255&u,Et[1]=u>>>8&255,r.check=w(r.check,Et,2,0),u=0,c=0,r.mode=U;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){t.msg="incorrect header check",r.mode=ft;break}if((15&u)!==D){t.msg="unknown compression method",r.mode=ft;break}if(u>>>=4,c-=4,kt=(15&u)+8,0===r.wbits)r.wbits=kt;else if(kt>r.wbits){t.msg="invalid window size",r.mode=ft;break}r.dmax=1<<kt,t.adler=r.check=1,r.mode=512&u?K:Y,u=0,c=0;break;case U:for(;16>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}if(r.flags=u,(255&r.flags)!==D){t.msg="unknown compression method",r.mode=ft;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=ft;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(Et[0]=255&u,Et[1]=u>>>8&255,r.check=w(r.check,Et,2,0)),u=0,c=0,r.mode=F;case F:for(;32>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}r.head&&(r.head.time=u),512&r.flags&&(Et[0]=255&u,Et[1]=u>>>8&255,Et[2]=u>>>16&255,Et[3]=u>>>24&255,r.check=w(r.check,Et,4,0)),u=0,c=0,r.mode=Z;case Z:for(;16>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(Et[0]=255&u,Et[1]=u>>>8&255,r.check=w(r.check,Et,2,0)),u=0,c=0,r.mode=P;case P:if(1024&r.flags){for(;16>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(Et[0]=255&u,Et[1]=u>>>8&255,r.check=w(r.check,Et,2,0)),u=0,c=0}else r.head&&(r.head.extra=null);r.mode=M;case M:if(1024&r.flags&&(m=r.length,m>d&&(m=d),m&&(r.head&&(kt=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),g.arraySet(r.head.extra,i,s,m,kt)),512&r.flags&&(r.check=w(r.check,i,m,s)),d-=m,s+=m,r.length-=m),r.length))break t;r.length=0,r.mode=j;case j:if(2048&r.flags){if(0===d)break t;m=0;do kt=i[s+m++],r.head&&kt&&r.length<65536&&(r.head.name+=String.fromCharCode(kt));while(kt&&d>m);if(512&r.flags&&(r.check=w(r.check,i,m,s)),d-=m,s+=m,kt)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=H;case H:if(4096&r.flags){if(0===d)break t;m=0;do kt=i[s+m++],r.head&&kt&&r.length<65536&&(r.head.comment+=String.fromCharCode(kt));while(kt&&d>m);if(512&r.flags&&(r.check=w(r.check,i,m,s)),d-=m,s+=m,kt)break t}else r.head&&(r.head.comment=null);r.mode=X;case X:if(512&r.flags){for(;16>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}if(u!==(65535&r.check)){t.msg="header crc mismatch",r.mode=ft;break}u=0,c=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=Y;break;case K:for(;32>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}t.adler=r.check=n(u),u=0,c=0,r.mode=V;case V:if(0===r.havedict)return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=d,r.hold=u,r.bits=c,I;t.adler=r.check=1,r.mode=Y;case Y:if(e===A||e===E)break t;case W:if(r.last){u>>>=7&c,c-=7&c,r.mode=dt;break}for(;3>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}switch(r.last=1&u,u>>>=1,c-=1,3&u){case 0:r.mode=q;break;case 1:if(l(r),r.mode=et,e===E){u>>>=2,c-=2;break t}break;case 2:r.mode=Q;break;case 3:t.msg="invalid block type",r.mode=ft}u>>>=2,c-=2;break;case q:for(u>>>=7&c,c-=7&c;32>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}if((65535&u)!==(u>>>16^65535)){t.msg="invalid stored block lengths",r.mode=ft;break}if(r.length=65535&u,u=0,c=0,r.mode=G,e===E)break t;case G:r.mode=J;case J:if(m=r.length){if(m>d&&(m=d),m>h&&(m=h),0===m)break t;g.arraySet(a,i,s,m,o),d-=m,s+=m,h-=m,o+=m,r.length-=m;break}r.mode=Y;break;case Q:for(;14>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}if(r.nlen=(31&u)+257,u>>>=5,c-=5,r.ndist=(31&u)+1,u>>>=5,c-=5,r.ncode=(15&u)+4,u>>>=4,c-=4,r.nlen>286||r.ndist>30){t.msg="too many length or distance symbols",r.mode=ft;break}r.have=0,r.mode=$;case $:for(;r.have<r.ncode;){for(;3>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}r.lens[St[r.have++]]=7&u,u>>>=3,c-=3}for(;r.have<19;)r.lens[St[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,zt={bits:r.lenbits},xt=y(k,r.lens,0,19,r.lencode,0,r.work,zt),r.lenbits=zt.bits,xt){t.msg="invalid code lengths set",r.mode=ft;break}r.have=0,r.mode=tt;case tt:for(;r.have<r.nlen+r.ndist;){for(;At=r.lencode[u&(1<<r.lenbits)-1],mt=At>>>24,gt=At>>>16&255,bt=65535&At,!(c>=mt);){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}if(16>bt)u>>>=mt,c-=mt,r.lens[r.have++]=bt;else{if(16===bt){for(Ct=mt+2;Ct>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}if(u>>>=mt,c-=mt,0===r.have){t.msg="invalid bit length repeat",r.mode=ft;break}kt=r.lens[r.have-1],m=3+(3&u),u>>>=2,c-=2}else if(17===bt){for(Ct=mt+3;Ct>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}u>>>=mt,c-=mt,kt=0,m=3+(7&u),u>>>=3,c-=3}else{for(Ct=mt+7;Ct>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}u>>>=mt,c-=mt,kt=0,m=11+(127&u),u>>>=7,c-=7}if(r.have+m>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=ft;break}for(;m--;)r.lens[r.have++]=kt}}if(r.mode===ft)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=ft;break}if(r.lenbits=9,zt={bits:r.lenbits},xt=y(x,r.lens,0,r.nlen,r.lencode,0,r.work,zt),r.lenbits=zt.bits,xt){t.msg="invalid literal/lengths set",r.mode=ft;break}if(r.distbits=6,r.distcode=r.distdyn,zt={bits:r.distbits},xt=y(z,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,zt),r.distbits=zt.bits,xt){t.msg="invalid distances set",r.mode=ft;break}if(r.mode=et,e===E)break t;case et:r.mode=rt;case rt:if(d>=6&&h>=258){t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=d,r.hold=u,r.bits=c,v(t,_),o=t.next_out,a=t.output,h=t.avail_out,s=t.next_in,i=t.input,d=t.avail_in,u=r.hold,
c=r.bits,r.mode===Y&&(r.back=-1);break}for(r.back=0;At=r.lencode[u&(1<<r.lenbits)-1],mt=At>>>24,gt=At>>>16&255,bt=65535&At,!(c>=mt);){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}if(gt&&0===(240&gt)){for(wt=mt,vt=gt,yt=bt;At=r.lencode[yt+((u&(1<<wt+vt)-1)>>wt)],mt=At>>>24,gt=At>>>16&255,bt=65535&At,!(c>=wt+mt);){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}u>>>=wt,c-=wt,r.back+=wt}if(u>>>=mt,c-=mt,r.back+=mt,r.length=bt,0===gt){r.mode=ot;break}if(32&gt){r.back=-1,r.mode=Y;break}if(64&gt){t.msg="invalid literal/length code",r.mode=ft;break}r.extra=15&gt,r.mode=nt;case nt:if(r.extra){for(Ct=r.extra;Ct>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,c-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=it;case it:for(;At=r.distcode[u&(1<<r.distbits)-1],mt=At>>>24,gt=At>>>16&255,bt=65535&At,!(c>=mt);){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}if(0===(240&gt)){for(wt=mt,vt=gt,yt=bt;At=r.distcode[yt+((u&(1<<wt+vt)-1)>>wt)],mt=At>>>24,gt=At>>>16&255,bt=65535&At,!(c>=wt+mt);){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}u>>>=wt,c-=wt,r.back+=wt}if(u>>>=mt,c-=mt,r.back+=mt,64&gt){t.msg="invalid distance code",r.mode=ft;break}r.offset=bt,r.extra=15&gt,r.mode=at;case at:if(r.extra){for(Ct=r.extra;Ct>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,c-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=ft;break}r.mode=st;case st:if(0===h)break t;if(m=_-h,r.offset>m){if(m=r.offset-m,m>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=ft;break}m>r.wnext?(m-=r.wnext,pt=r.wsize-m):pt=r.wnext-m,m>r.length&&(m=r.length),_t=r.window}else _t=a,pt=o-r.offset,m=r.length;m>h&&(m=h),h-=m,r.length-=m;do a[o++]=_t[pt++];while(--m);0===r.length&&(r.mode=rt);break;case ot:if(0===h)break t;a[o++]=r.length,h--,r.mode=rt;break;case dt:if(r.wrap){for(;32>c;){if(0===d)break t;d--,u|=i[s++]<<c,c+=8}if(_-=h,t.total_out+=_,r.total+=_,_&&(t.adler=r.check=r.flags?w(r.check,a,_,o-_):b(r.check,a,_,o-_)),_=h,(r.flags?u:n(u))!==r.check){t.msg="incorrect data check",r.mode=ft;break}u=0,c=0}r.mode=ht;case ht:if(r.wrap&&r.flags){for(;32>c;){if(0===d)break t;d--,u+=i[s++]<<c,c+=8}if(u!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=ft;break}u=0,c=0}r.mode=lt;case lt:xt=B;break t;case ft:xt=O;break t;case ut:return R;case ct:default:return T}return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=d,r.hold=u,r.bits=c,(r.wsize||_!==t.avail_out&&r.mode<ft&&(r.mode<dt||e!==C))&&f(t,t.output,t.next_out,_-t.avail_out)?(r.mode=ut,R):(p-=t.avail_in,_-=t.avail_out,t.total_in+=p,t.total_out+=_,r.total+=_,r.wrap&&_&&(t.adler=r.check=r.flags?w(r.check,a,_,t.next_out-_):b(r.check,a,_,t.next_out-_)),t.data_type=r.bits+(r.last?64:0)+(r.mode===Y?128:0)+(r.mode===et||r.mode===G?256:0),(0===p&&0===_||e===C)&&xt===S&&(xt=L),xt)}function c(t){if(!t||!t.state)return T;var e=t.state;return e.window&&(e.window=null),t.state=null,S}function p(t,e){var r;return t&&t.state?(r=t.state,0===(2&r.wrap)?T:(r.head=e,e.done=!1,S)):T}var _,m,g=t("../utils/common"),b=t("./adler32"),w=t("./crc32"),v=t("./inffast"),y=t("./inftrees"),k=0,x=1,z=2,C=4,A=5,E=6,S=0,B=1,I=2,T=-2,O=-3,R=-4,L=-5,D=8,N=1,U=2,F=3,Z=4,P=5,M=6,j=7,H=8,X=9,K=10,V=11,Y=12,W=13,q=14,G=15,J=16,Q=17,$=18,tt=19,et=20,rt=21,nt=22,it=23,at=24,st=25,ot=26,dt=27,ht=28,lt=29,ft=30,ut=31,ct=32,pt=852,_t=592,mt=15,gt=mt,bt=!0;r.inflateReset=s,r.inflateReset2=o,r.inflateResetKeep=a,r.inflateInit=h,r.inflateInit2=d,r.inflate=u,r.inflateEnd=c,r.inflateGetHeader=p,r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":27,"./adler32":29,"./crc32":31,"./inffast":34,"./inftrees":36}],36:[function(t,e){"use strict";var r=t("../utils/common"),n=15,i=852,a=592,s=0,o=1,d=2,h=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],l=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],f=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],u=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,c,p,_,m,g,b){var w,v,y,k,x,z,C,A,E,S=b.bits,B=0,I=0,T=0,O=0,R=0,L=0,D=0,N=0,U=0,F=0,Z=null,P=0,M=new r.Buf16(n+1),j=new r.Buf16(n+1),H=null,X=0;for(B=0;n>=B;B++)M[B]=0;for(I=0;p>I;I++)M[e[c+I]]++;for(R=S,O=n;O>=1&&0===M[O];O--);if(R>O&&(R=O),0===O)return _[m++]=20971520,_[m++]=20971520,b.bits=1,0;for(T=1;O>T&&0===M[T];T++);for(T>R&&(R=T),N=1,B=1;n>=B;B++)if(N<<=1,N-=M[B],0>N)return-1;if(N>0&&(t===s||1!==O))return-1;for(j[1]=0,B=1;n>B;B++)j[B+1]=j[B]+M[B];for(I=0;p>I;I++)0!==e[c+I]&&(g[j[e[c+I]]++]=I);if(t===s?(Z=H=g,z=19):t===o?(Z=h,P-=257,H=l,X-=257,z=256):(Z=f,H=u,z=-1),F=0,I=0,B=T,x=m,L=R,D=0,y=-1,U=1<<R,k=U-1,t===o&&U>i||t===d&&U>a)return 1;for(var K=0;;){K++,C=B-D,g[I]<z?(A=0,E=g[I]):g[I]>z?(A=H[X+g[I]],E=Z[P+g[I]]):(A=96,E=0),w=1<<B-D,v=1<<L,T=v;do v-=w,_[x+(F>>D)+v]=C<<24|A<<16|E|0;while(0!==v);for(w=1<<B-1;F&w;)w>>=1;if(0!==w?(F&=w-1,F+=w):F=0,I++,0===--M[B]){if(B===O)break;B=e[c+g[I]]}if(B>R&&(F&k)!==y){for(0===D&&(D=R),x+=T,L=B-D,N=1<<L;O>L+D&&(N-=M[L+D],!(0>=N));)L++,N<<=1;if(U+=1<<L,t===o&&U>i||t===d&&U>a)return 1;y=F&k,_[y]=R<<24|L<<16|x-m|0}}return 0!==F&&(_[x+F]=B-D<<24|64<<16|0),b.bits=R,0}},{"../utils/common":27}],37:[function(t,e){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],38:[function(t,e,r){"use strict";function n(t){for(var e=t.length;--e>=0;)t[e]=0}function i(t){return 256>t?st[t]:st[256+(t>>>7)]}function a(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function s(t,e,r){t.bi_valid>Y-r?(t.bi_buf|=e<<t.bi_valid&65535,a(t,t.bi_buf),t.bi_buf=e>>Y-t.bi_valid,t.bi_valid+=r-Y):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function o(t,e,r){s(t,r[2*e],r[2*e+1])}function d(t,e){var r=0;do r|=1&t,t>>>=1,r<<=1;while(--e>0);return r>>>1}function h(t){16===t.bi_valid?(a(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}function l(t,e){var r,n,i,a,s,o,d=e.dyn_tree,h=e.max_code,l=e.stat_desc.static_tree,f=e.stat_desc.has_stree,u=e.stat_desc.extra_bits,c=e.stat_desc.extra_base,p=e.stat_desc.max_length,_=0;for(a=0;V>=a;a++)t.bl_count[a]=0;for(d[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;K>r;r++)n=t.heap[r],a=d[2*d[2*n+1]+1]+1,a>p&&(a=p,_++),d[2*n+1]=a,n>h||(t.bl_count[a]++,s=0,n>=c&&(s=u[n-c]),o=d[2*n],t.opt_len+=o*(a+s),f&&(t.static_len+=o*(l[2*n+1]+s)));if(0!==_){do{for(a=p-1;0===t.bl_count[a];)a--;t.bl_count[a]--,t.bl_count[a+1]+=2,t.bl_count[p]--,_-=2}while(_>0);for(a=p;0!==a;a--)for(n=t.bl_count[a];0!==n;)i=t.heap[--r],i>h||(d[2*i+1]!==a&&(t.opt_len+=(a-d[2*i+1])*d[2*i],d[2*i+1]=a),n--)}}function f(t,e,r){var n,i,a=new Array(V+1),s=0;for(n=1;V>=n;n++)a[n]=s=s+r[n-1]<<1;for(i=0;e>=i;i++){var o=t[2*i+1];0!==o&&(t[2*i]=d(a[o]++,o))}}function u(){var t,e,r,n,i,a=new Array(V+1);for(r=0,n=0;P-1>n;n++)for(dt[n]=r,t=0;t<1<<$[n];t++)ot[r++]=n;for(ot[r-1]=n,i=0,n=0;16>n;n++)for(ht[n]=i,t=0;t<1<<tt[n];t++)st[i++]=n;for(i>>=7;H>n;n++)for(ht[n]=i<<7,t=0;t<1<<tt[n]-7;t++)st[256+i++]=n;for(e=0;V>=e;e++)a[e]=0;for(t=0;143>=t;)it[2*t+1]=8,t++,a[8]++;for(;255>=t;)it[2*t+1]=9,t++,a[9]++;for(;279>=t;)it[2*t+1]=7,t++,a[7]++;for(;287>=t;)it[2*t+1]=8,t++,a[8]++;for(f(it,j+1,a),t=0;H>t;t++)at[2*t+1]=5,at[2*t]=d(t,5);lt=new ct(it,$,M+1,j,V),ft=new ct(at,tt,0,H,V),ut=new ct(new Array(0),et,0,X,W)}function c(t){var e;for(e=0;j>e;e++)t.dyn_ltree[2*e]=0;for(e=0;H>e;e++)t.dyn_dtree[2*e]=0;for(e=0;X>e;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*q]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function p(t){t.bi_valid>8?a(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function _(t,e,r,n){p(t),n&&(a(t,r),a(t,~r)),I.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}function m(t,e,r,n){var i=2*e,a=2*r;return t[i]<t[a]||t[i]===t[a]&&n[e]<=n[r]}function g(t,e,r){for(var n=t.heap[r],i=r<<1;i<=t.heap_len&&(i<t.heap_len&&m(e,t.heap[i+1],t.heap[i],t.depth)&&i++,!m(e,n,t.heap[i],t.depth));)t.heap[r]=t.heap[i],r=i,i<<=1;t.heap[r]=n}function b(t,e,r){var n,a,d,h,l=0;if(0!==t.last_lit)do n=t.pending_buf[t.d_buf+2*l]<<8|t.pending_buf[t.d_buf+2*l+1],a=t.pending_buf[t.l_buf+l],l++,0===n?o(t,a,e):(d=ot[a],o(t,d+M+1,e),h=$[d],0!==h&&(a-=dt[d],s(t,a,h)),n--,d=i(n),o(t,d,r),h=tt[d],0!==h&&(n-=ht[d],s(t,n,h)));while(l<t.last_lit);o(t,q,e)}function w(t,e){var r,n,i,a=e.dyn_tree,s=e.stat_desc.static_tree,o=e.stat_desc.has_stree,d=e.stat_desc.elems,h=-1;for(t.heap_len=0,t.heap_max=K,r=0;d>r;r++)0!==a[2*r]?(t.heap[++t.heap_len]=h=r,t.depth[r]=0):a[2*r+1]=0;for(;t.heap_len<2;)i=t.heap[++t.heap_len]=2>h?++h:0,a[2*i]=1,t.depth[i]=0,t.opt_len--,o&&(t.static_len-=s[2*i+1]);for(e.max_code=h,r=t.heap_len>>1;r>=1;r--)g(t,a,r);i=d;do r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],g(t,a,1),n=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=n,a[2*i]=a[2*r]+a[2*n],t.depth[i]=(t.depth[r]>=t.depth[n]?t.depth[r]:t.depth[n])+1,a[2*r+1]=a[2*n+1]=i,t.heap[1]=i++,g(t,a,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],l(t,e),f(a,h,t.bl_count)}function v(t,e,r){var n,i,a=-1,s=e[1],o=0,d=7,h=4;for(0===s&&(d=138,h=3),e[2*(r+1)+1]=65535,n=0;r>=n;n++)i=s,s=e[2*(n+1)+1],++o<d&&i===s||(h>o?t.bl_tree[2*i]+=o:0!==i?(i!==a&&t.bl_tree[2*i]++,t.bl_tree[2*G]++):10>=o?t.bl_tree[2*J]++:t.bl_tree[2*Q]++,o=0,a=i,0===s?(d=138,h=3):i===s?(d=6,h=3):(d=7,h=4))}function y(t,e,r){var n,i,a=-1,d=e[1],h=0,l=7,f=4;for(0===d&&(l=138,f=3),n=0;r>=n;n++)if(i=d,d=e[2*(n+1)+1],!(++h<l&&i===d)){if(f>h){do o(t,i,t.bl_tree);while(0!==--h)}else 0!==i?(i!==a&&(o(t,i,t.bl_tree),h--),o(t,G,t.bl_tree),s(t,h-3,2)):10>=h?(o(t,J,t.bl_tree),s(t,h-3,3)):(o(t,Q,t.bl_tree),s(t,h-11,7));h=0,a=i,0===d?(l=138,f=3):i===d?(l=6,f=3):(l=7,f=4)}}function k(t){var e;for(v(t,t.dyn_ltree,t.l_desc.max_code),v(t,t.dyn_dtree,t.d_desc.max_code),w(t,t.bl_desc),e=X-1;e>=3&&0===t.bl_tree[2*rt[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}function x(t,e,r,n){var i;for(s(t,e-257,5),s(t,r-1,5),s(t,n-4,4),i=0;n>i;i++)s(t,t.bl_tree[2*rt[i]+1],3);y(t,t.dyn_ltree,e-1),y(t,t.dyn_dtree,r-1)}function z(t){var e,r=4093624447;for(e=0;31>=e;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return O;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return R;for(e=32;M>e;e++)if(0!==t.dyn_ltree[2*e])return R;return O}function C(t){_t||(u(),_t=!0),t.l_desc=new pt(t.dyn_ltree,lt),t.d_desc=new pt(t.dyn_dtree,ft),t.bl_desc=new pt(t.bl_tree,ut),t.bi_buf=0,t.bi_valid=0,c(t)}function A(t,e,r,n){s(t,(D<<1)+(n?1:0),3),_(t,e,r,!0)}function E(t){s(t,N<<1,3),o(t,q,it),h(t)}function S(t,e,r,n){var i,a,o=0;t.level>0?(t.strm.data_type===L&&(t.strm.data_type=z(t)),w(t,t.l_desc),w(t,t.d_desc),o=k(t),i=t.opt_len+3+7>>>3,a=t.static_len+3+7>>>3,i>=a&&(i=a)):i=a=r+5,i>=r+4&&-1!==e?A(t,e,r,n):t.strategy===T||a===i?(s(t,(N<<1)+(n?1:0),3),b(t,it,at)):(s(t,(U<<1)+(n?1:0),3),x(t,t.l_desc.max_code+1,t.d_desc.max_code+1,o+1),b(t,t.dyn_ltree,t.dyn_dtree)),c(t),n&&p(t)}function B(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(ot[r]+M+1)]++,t.dyn_dtree[2*i(e)]++),t.last_lit===t.lit_bufsize-1}var I=t("../utils/common"),T=4,O=0,R=1,L=2,D=0,N=1,U=2,F=3,Z=258,P=29,M=256,j=M+1+P,H=30,X=19,K=2*j+1,V=15,Y=16,W=7,q=256,G=16,J=17,Q=18,$=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],tt=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],et=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],rt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],nt=512,it=new Array(2*(j+2));n(it);var at=new Array(2*H);n(at);var st=new Array(nt);n(st);var ot=new Array(Z-F+1);n(ot);var dt=new Array(P);n(dt);var ht=new Array(H);n(ht);var lt,ft,ut,ct=function(t,e,r,n,i){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=t&&t.length},pt=function(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e},_t=!1;r._tr_init=C,r._tr_stored_block=A,r._tr_flush_block=S,r._tr_tally=B,r._tr_align=E},{"../utils/common":27}],39:[function(t,e){"use strict";function r(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}e.exports=r},{}]},{},[9])(9)});
//# sourceMappingURL=data:application/json;base64,
